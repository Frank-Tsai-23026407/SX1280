
SOPHIA_V2_SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08008238  08008238  00018238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008704  08008704  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800870c  0800870c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800871c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001d8  080088f0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  080088f0  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022c35  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434e  00000000  00000000  00042e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  000471d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9e  00000000  00000000  000484a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028929  00000000  00000000  00049346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187b5  00000000  00000000  00071c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000def45  00000000  00000000  0008a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006290  00000000  00000000  0016936c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  0016f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008220 	.word	0x08008220

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008220 	.word	0x08008220

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
		return 0;
 800101c:	2300      	movs	r3, #0
	}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3344      	adds	r3, #68	; 0x44
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f240 1153 	movw	r1, #339	; 0x153
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
 8001042:	4603      	mov	r3, r0
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21c      	sxth	r4, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3344      	adds	r3, #68	; 0x44
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
 800105a:	b21b      	sxth	r3, r3
 800105c:	4323      	orrs	r3, r4
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}

0800106a <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 800106a:	b590      	push	{r4, r7, lr}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3334      	adds	r3, #52	; 0x34
 800107c:	681c      	ldr	r4, [r3, #0]
 800107e:	f107 020f 	add.w	r2, r7, #15
 8001082:	2301      	movs	r3, #1
 8001084:	21c0      	movs	r1, #192	; 0xc0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	47a0      	blx	r4
	status.Value = stat;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	733b      	strb	r3, [r7, #12]
	return( status );
 800108e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}

08001098 <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 80010b2:	b590      	push	{r4, r7, lr}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3330      	adds	r3, #48	; 0x30
 80010c4:	681c      	ldr	r4, [r3, #0]
 80010c6:	1cfa      	adds	r2, r7, #3
 80010c8:	2301      	movs	r3, #1
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d104      	bne.n	80010e0 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2202      	movs	r2, #2
 80010da:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 80010de:	e003      	b.n	80010e8 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <_ZN6SX128x5SetTxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_FS, 0, 0 );
	OperatingMode = MODE_FS;
}

void SX128x::SetTx(TickTime_t timeout )
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 80010fa:	783b      	ldrb	r3, [r7, #0]
 80010fc:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73bb      	strb	r3, [r7, #14]

	ClearIrqStatus( IRQ_RADIO_ALL );
 800110e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fa31 	bl	800157a <_ZN6SX128x14ClearIrqStatusEt>
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_MASTER );
//	}

	HalPostRx();
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3318      	adds	r3, #24
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
	HalPreTx();
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	330c      	adds	r3, #12
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
	WriteCommand( RADIO_SET_TX, buf, 3 );
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3330      	adds	r3, #48	; 0x30
 8001136:	681c      	ldr	r4, [r3, #0]
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	2303      	movs	r3, #3
 800113e:	2183      	movs	r1, #131	; 0x83
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	47a0      	blx	r4
	OperatingMode = MODE_TX;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2206      	movs	r2, #6
 8001148:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3330      	adds	r3, #48	; 0x30
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	1cfa      	adds	r2, r7, #3
 8001172:	2301      	movs	r3, #1
 8001174:	218a      	movs	r1, #138	; 0x8a
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	47a0      	blx	r4
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <_ZN6SX128x14SetRfFrequencyEm>:
	}
	return packetType;
}

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f7ff f9d7 	bl	8000544 <__aeabi_ui2d>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800119c:	f7ff fb76 	bl	800088c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd1e 	bl	8000be8 <__aeabi_d2uiz>
 80011ac:	4603      	mov	r3, r0
 80011ae:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0c1b      	lsrs	r3, r3, #16
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3330      	adds	r3, #48	; 0x30
 80011cc:	681c      	ldr	r4, [r3, #0]
 80011ce:	f107 0208 	add.w	r2, r7, #8
 80011d2:	2303      	movs	r3, #3
 80011d4:	2186      	movs	r1, #134	; 0x86
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	47a0      	blx	r4
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}

080011e2 <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>:

void SX128x::SetTxParams(int8_t power, RadioRampTimes_t rampTime )
{
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	70fb      	strb	r3, [r7, #3]
 80011ee:	4613      	mov	r3, r2
 80011f0:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	// The power value to send on SPI/UART is in the range [0..31] and the
	// physical output power is in the range [-18..13]dBm
	buf[0] = power + 18;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	3312      	adds	r3, #18
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )rampTime;
 80011fa:	78bb      	ldrb	r3, [r7, #2]
 80011fc:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3330      	adds	r3, #48	; 0x30
 8001204:	681c      	ldr	r4, [r3, #0]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	2302      	movs	r3, #2
 800120c:	218e      	movs	r1, #142	; 0x8e
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	47a0      	blx	r4
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}

0800121a <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800121a:	b590      	push	{r4, r7, lr}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	70fb      	strb	r3, [r7, #3]
 8001226:	4613      	mov	r3, r2
 8001228:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 800122e:	78bb      	ldrb	r3, [r7, #2]
 8001230:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3330      	adds	r3, #48	; 0x30
 8001238:	681c      	ldr	r4, [r3, #0]
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	2302      	movs	r3, #2
 8001240:	218f      	movs	r1, #143	; 0x8f
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	47a0      	blx	r4
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
	...

08001250 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d005      	beq.n	8001274 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff70 	bl	8001154 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d857      	bhi.n	800132c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012c5 	.word	0x080012c5
 8001288:	080012d9 	.word	0x080012d9
 800128c:	080012d9 	.word	0x080012d9
 8001290:	080012f7 	.word	0x080012f7
 8001294:	0800130b 	.word	0x0800130b
 8001298:	0800132d 	.word	0x0800132d
 800129c:	0800132d 	.word	0x0800132d
 80012a0:	0800132d 	.word	0x0800132d
 80012a4:	0800132d 	.word	0x0800132d
 80012a8:	0800132d 	.word	0x0800132d
 80012ac:	0800132d 	.word	0x0800132d
 80012b0:	0800132d 	.word	0x0800132d
 80012b4:	0800132d 	.word	0x0800132d
 80012b8:	0800132d 	.word	0x0800132d
 80012bc:	0800132d 	.word	0x0800132d
 80012c0:	0800131f 	.word	0x0800131f
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	785b      	ldrb	r3, [r3, #1]
 80012c8:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	78db      	ldrb	r3, [r3, #3]
 80012d4:	73bb      	strb	r3, [r7, #14]
			break;
 80012d6:	e029      	b.n	800132c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	791b      	ldrb	r3, [r3, #4]
 80012dc:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	795b      	ldrb	r3, [r3, #5]
 80012e2:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	799b      	ldrb	r3, [r3, #6]
 80012e8:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	795a      	ldrb	r2, [r3, #5]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 80012f4:	e01a      	b.n	800132c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	79db      	ldrb	r3, [r3, #7]
 80012fa:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	7a1b      	ldrb	r3, [r3, #8]
 8001300:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	7a5b      	ldrb	r3, [r3, #9]
 8001306:	73bb      	strb	r3, [r7, #14]
			break;
 8001308:	e010      	b.n	800132c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	7a9b      	ldrb	r3, [r3, #10]
 800130e:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	7adb      	ldrb	r3, [r3, #11]
 8001314:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	7b1b      	ldrb	r3, [r3, #12]
 800131a:	73bb      	strb	r3, [r7, #14]
			break;
 800131c:	e006      	b.n	800132c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	73bb      	strb	r3, [r7, #14]
			break;
 800132a:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3330      	adds	r3, #48	; 0x30
 8001332:	681c      	ldr	r4, [r3, #0]
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	2303      	movs	r3, #3
 800133a:	218b      	movs	r1, #139	; 0x8b
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	47a0      	blx	r4
	CurrentModParams = modParams;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	33ab      	adds	r3, #171	; 0xab
 8001346:	6814      	ldr	r4, [r2, #0]
 8001348:	6850      	ldr	r0, [r2, #4]
 800134a:	6891      	ldr	r1, [r2, #8]
 800134c:	601c      	str	r4, [r3, #0]
 800134e:	6058      	str	r0, [r3, #4]
 8001350:	6099      	str	r1, [r3, #8]
 8001352:	7b12      	ldrb	r2, [r2, #12]
 8001354:	731a      	strb	r2, [r3, #12]
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop

08001360 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d005      	beq.n	8001384 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fee8 	bl	8001154 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	f200 8085 	bhi.w	8001498 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013d5 	.word	0x080013d5
 8001398:	08001401 	.word	0x08001401
 800139c:	08001401 	.word	0x08001401
 80013a0:	08001429 	.word	0x08001429
 80013a4:	08001455 	.word	0x08001455
 80013a8:	08001499 	.word	0x08001499
 80013ac:	08001499 	.word	0x08001499
 80013b0:	08001499 	.word	0x08001499
 80013b4:	08001499 	.word	0x08001499
 80013b8:	08001499 	.word	0x08001499
 80013bc:	08001499 	.word	0x08001499
 80013c0:	08001499 	.word	0x08001499
 80013c4:	08001499 	.word	0x08001499
 80013c8:	08001499 	.word	0x08001499
 80013cc:	08001499 	.word	0x08001499
 80013d0:	0800147b 	.word	0x0800147b
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	78db      	ldrb	r3, [r3, #3]
 80013e4:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	795b      	ldrb	r3, [r3, #5]
 80013f0:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	73bb      	strb	r3, [r7, #14]
			break;
 80013fe:	e04b      	b.n	8001498 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	7a1b      	ldrb	r3, [r3, #8]
 8001404:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7a5b      	ldrb	r3, [r3, #9]
 800140a:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	7a9b      	ldrb	r3, [r3, #10]
 8001410:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7adb      	ldrb	r3, [r3, #11]
 8001416:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	7b1b      	ldrb	r3, [r3, #12]
 800141c:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	73bb      	strb	r3, [r7, #14]
			break;
 8001426:	e037      	b.n	8001498 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	7b5b      	ldrb	r3, [r3, #13]
 800142c:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	7b9b      	ldrb	r3, [r3, #14]
 8001432:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	7bdb      	ldrb	r3, [r3, #15]
 8001438:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7c1b      	ldrb	r3, [r3, #16]
 800143e:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	7c5b      	ldrb	r3, [r3, #17]
 8001444:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	7c9b      	ldrb	r3, [r3, #18]
 800144a:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	7cdb      	ldrb	r3, [r3, #19]
 8001450:	73bb      	strb	r3, [r7, #14]
			break;
 8001452:	e021      	b.n	8001498 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7d5b      	ldrb	r3, [r3, #21]
 800145e:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	7d9b      	ldrb	r3, [r3, #22]
 8001464:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	7ddb      	ldrb	r3, [r3, #23]
 800146a:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	73bb      	strb	r3, [r7, #14]
			break;
 8001478:	e00e      	b.n	8001498 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73bb      	strb	r3, [r7, #14]
			break;
 8001496:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3330      	adds	r3, #48	; 0x30
 800149e:	681c      	ldr	r4, [r3, #0]
 80014a0:	f107 0208 	add.w	r2, r7, #8
 80014a4:	2307      	movs	r3, #7
 80014a6:	218c      	movs	r1, #140	; 0x8c
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80014b4:	4615      	mov	r5, r2
 80014b6:	6828      	ldr	r0, [r5, #0]
 80014b8:	6869      	ldr	r1, [r5, #4]
 80014ba:	68aa      	ldr	r2, [r5, #8]
 80014bc:	68eb      	ldr	r3, [r5, #12]
 80014be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c0:	6928      	ldr	r0, [r5, #16]
 80014c2:	6969      	ldr	r1, [r5, #20]
 80014c4:	c403      	stmia	r4!, {r0, r1}
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop

080014d0 <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	817b      	strh	r3, [r7, #10]
 80014e2:	460b      	mov	r3, r1
 80014e4:	813b      	strh	r3, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80014f4:	897b      	ldrh	r3, [r7, #10]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80014fa:	893b      	ldrh	r3, [r7, #8]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001504:	893b      	ldrh	r3, [r7, #8]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b29b      	uxth	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800151a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001524:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001526:	b2db      	uxtb	r3, r3
 8001528:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3330      	adds	r3, #48	; 0x30
 8001530:	681c      	ldr	r4, [r3, #0]
 8001532:	f107 0210 	add.w	r2, r7, #16
 8001536:	2308      	movs	r3, #8
 8001538:	218d      	movs	r1, #141	; 0x8d
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	47a0      	blx	r4
}
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}

08001546 <_ZN6SX128x12GetIrqStatusEv>:

uint16_t SX128x::GetIrqStatus(void )
{
 8001546:	b590      	push	{r4, r7, lr}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	uint8_t irqStatus[2];
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3334      	adds	r3, #52	; 0x34
 8001554:	681c      	ldr	r4, [r3, #0]
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	2302      	movs	r3, #2
 800155c:	2115      	movs	r1, #21
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	47a0      	blx	r4
	return ( irqStatus[0] << 8 ) | irqStatus[1];
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	b29b      	uxth	r3, r3
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}

0800157a <_ZN6SX128x14ClearIrqStatusEt>:

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b29b      	uxth	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3330      	adds	r3, #48	; 0x30
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	2302      	movs	r3, #2
 80015a4:	2197      	movs	r1, #151	; 0x97
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	47a0      	blx	r4
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <_ZN6SX128x10SetPayloadEPhhh>:
{
	WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX128x::SetPayload(uint8_t *buffer, uint8_t size, uint8_t offset )
{
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	4611      	mov	r1, r2
 80015be:	461a      	mov	r2, r3
 80015c0:	460b      	mov	r3, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
	WriteBuffer( offset, buffer, size );
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3348      	adds	r3, #72	; 0x48
 80015ce:	681c      	ldr	r4, [r3, #0]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	79b9      	ldrb	r1, [r7, #6]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	47a0      	blx	r4
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}

080015e2 <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>:
	ReadBuffer( offset, buffer, *size );
	return 0;
}

void SX128x::SendPayload(uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
	SetPayload( payload, size, offset );
 80015f2:	7e3b      	ldrb	r3, [r7, #24]
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff ffda 	bl	80015b2 <_ZN6SX128x10SetPayloadEPhhh>
	SetTx( timeout );
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fd75 	bl	80010f0 <_ZN6SX128x5SetTxENS_10TickTime_sE>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 800160e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
}
 800161e:	466b      	mov	r3, sp
 8001620:	461e      	mov	r6, r3
	uint8_t useless[size];
 8001622:	88f9      	ldrh	r1, [r7, #6]
 8001624:	460b      	mov	r3, r1
 8001626:	3b01      	subs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	b28b      	uxth	r3, r1
 800162c:	2200      	movs	r2, #0
 800162e:	4698      	mov	r8, r3
 8001630:	4691      	mov	r9, r2
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001646:	b28b      	uxth	r3, r1
 8001648:	2200      	movs	r2, #0
 800164a:	461c      	mov	r4, r3
 800164c:	4615      	mov	r5, r2
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	00eb      	lsls	r3, r5, #3
 8001658:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165c:	00e2      	lsls	r2, r4, #3
 800165e:	460b      	mov	r3, r1
 8001660:	3307      	adds	r3, #7
 8001662:	08db      	lsrs	r3, r3, #3
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	ebad 0d03 	sub.w	sp, sp, r3
 800166a:	466b      	mov	r3, sp
 800166c:	3300      	adds	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3308      	adds	r3, #8
 8001676:	681c      	ldr	r4, [r3, #0]
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	47a0      	blx	r4
 8001682:	46b5      	mov	sp, r6
}
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800168e <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY));
 8001696:	bf00      	nop
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f1      	bne.n	8001698 <_ZN6SX128x10WaitOnBusyEv+0xa>
//	HAL_Delay(1);
//	for(int i = 0; i < 100; i++);
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 80016c6:	e002      	b.n	80016ce <_ZN6SX128x14WaitOnBusyLongEv+0x10>
		HAL_Delay(10);
 80016c8:	200a      	movs	r0, #10
 80016ca:	f001 fbd3 	bl	8002e74 <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ee      	bne.n	80016c8 <_ZN6SX128x14WaitOnBusyLongEv+0xa>
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	2100      	movs	r1, #0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
	HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f001 fbb1 	bl	8002e74 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3304      	adds	r3, #4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
	HAL_Delay(10);
 8001722:	200a      	movs	r0, #10
 8001724:	f001 fba6 	bl	8002e74 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
	HAL_Delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f001 fb9b 	bl	8002e74 <HAL_Delay>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2202      	movs	r2, #2
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff57 	bl	800160e <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffac 	bl	80016be <_ZN6SX128x14WaitOnBusyLongEv>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	461a      	mov	r2, r3
 800177a:	460b      	mov	r3, r1
 800177c:	72fb      	strb	r3, [r7, #11]
 800177e:	4613      	mov	r3, r2
 8001780:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 8001782:	893b      	ldrh	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	3307      	adds	r3, #7
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	ebad 0d03 	sub.w	sp, sp, r3
 8001790:	466b      	mov	r3, sp
 8001792:	3307      	adds	r3, #7
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	7afa      	ldrb	r2, [r7, #11]
 800179e:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	893a      	ldrh	r2, [r7, #8]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fdce 	bl	800634a <memcpy>

	WaitOnBusy();
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ff6d 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 80017b4:	893b      	ldrh	r3, [r7, #8]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	6979      	ldr	r1, [r7, #20]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff ff25 	bl	800160e <_ZN6SX128x11HalSpiWriteEPKht>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	72fb      	strb	r3, [r7, #11]
 80017dc:	4613      	mov	r3, r2
 80017de:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	2bc0      	cmp	r3, #192	; 0xc0
 80017e4:	d11a      	bne.n	800181c <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	2100      	movs	r1, #0
 80017ec:	460a      	mov	r2, r1
 80017ee:	801a      	strh	r2, [r3, #0]
 80017f0:	460a      	mov	r2, r1
 80017f2:	709a      	strb	r2, [r3, #2]
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff ff48 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3308      	adds	r3, #8
 8001804:	681c      	ldr	r4, [r3, #0]
 8001806:	f107 0218 	add.w	r2, r7, #24
 800180a:	f107 0114 	add.w	r1, r7, #20
 800180e:	2303      	movs	r3, #3
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 8001814:	7d3a      	ldrb	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 800181a:	e035      	b.n	8001888 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 800181c:	893b      	ldrh	r3, [r7, #8]
 800181e:	3302      	adds	r3, #2
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3307      	adds	r3, #7
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	ebad 0d03 	sub.w	sp, sp, r3
 800182e:	466b      	mov	r3, sp
 8001830:	3307      	adds	r3, #7
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3307      	adds	r3, #7
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	ebad 0d03 	sub.w	sp, sp, r3
 8001844:	466b      	mov	r3, sp
 8001846:	3307      	adds	r3, #7
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	461a      	mov	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	6a38      	ldr	r0, [r7, #32]
 8001856:	f004 fca4 	bl	80061a2 <memset>
		buf_out[0] = opcode;
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	7afa      	ldrb	r2, [r7, #11]
 800185e:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff ff14 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3308      	adds	r3, #8
 800186c:	681c      	ldr	r4, [r3, #0]
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	b29b      	uxth	r3, r3
 8001872:	6a3a      	ldr	r2, [r7, #32]
 8001874:	69f9      	ldr	r1, [r7, #28]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3302      	adds	r3, #2
 800187e:	893a      	ldrh	r2, [r7, #8]
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f004 fd61 	bl	800634a <memcpy>
}
 8001888:	bf00      	nop
 800188a:	372c      	adds	r7, #44	; 0x2c
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	460b      	mov	r3, r1
 800189e:	817b      	strh	r3, [r7, #10]
 80018a0:	4613      	mov	r3, r2
 80018a2:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	3303      	adds	r3, #3
 80018a8:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3307      	adds	r3, #7
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	ebad 0d03 	sub.w	sp, sp, r3
 80018b6:	466b      	mov	r3, sp
 80018b8:	3307      	adds	r3, #7
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2218      	movs	r2, #24
 80018c4:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	3302      	adds	r3, #2
 80018d8:	897a      	ldrh	r2, [r7, #10]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	3303      	adds	r3, #3
 80018e2:	893a      	ldrh	r2, [r7, #8]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fd2f 	bl	800634a <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fece 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	6939      	ldr	r1, [r7, #16]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7ff fe87 	bl	800160e <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3338      	adds	r3, #56	; 0x38
 800191e:	681c      	ldr	r4, [r3, #0]
 8001920:	1c7a      	adds	r2, r7, #1
 8001922:	8879      	ldrh	r1, [r7, #2]
 8001924:	2301      	movs	r3, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	47a0      	blx	r4
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}

08001932 <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001932:	b590      	push	{r4, r7, lr}
 8001934:	b089      	sub	sp, #36	; 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	461a      	mov	r2, r3
 800193e:	460b      	mov	r3, r1
 8001940:	817b      	strh	r3, [r7, #10]
 8001942:	4613      	mov	r3, r2
 8001944:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 8001946:	893b      	ldrh	r3, [r7, #8]
 8001948:	3304      	adds	r3, #4
 800194a:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3307      	adds	r3, #7
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	ebad 0d03 	sub.w	sp, sp, r3
 8001958:	466b      	mov	r3, sp
 800195a:	3307      	adds	r3, #7
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3307      	adds	r3, #7
 8001966:	08db      	lsrs	r3, r3, #3
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	ebad 0d03 	sub.w	sp, sp, r3
 800196e:	466b      	mov	r3, sp
 8001970:	3307      	adds	r3, #7
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	461a      	mov	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	69b8      	ldr	r0, [r7, #24]
 8001980:	f004 fc0f 	bl	80061a2 <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2219      	movs	r2, #25
 8001988:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 800198a:	897b      	ldrh	r3, [r7, #10]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	3301      	adds	r3, #1
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	3302      	adds	r3, #2
 800199c:	897a      	ldrh	r2, [r7, #10]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff fe73 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3308      	adds	r3, #8
 80019ae:	681c      	ldr	r4, [r3, #0]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	6979      	ldr	r1, [r7, #20]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3304      	adds	r3, #4
 80019c0:	893a      	ldrh	r2, [r7, #8]
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f004 fcc0 	bl	800634a <memcpy>
}
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}

080019d2 <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 80019d2:	b590      	push	{r4, r7, lr}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3340      	adds	r3, #64	; 0x40
 80019e4:	681c      	ldr	r4, [r3, #0]
 80019e6:	f107 020f 	add.w	r2, r7, #15
 80019ea:	8879      	ldrh	r1, [r7, #2]
 80019ec:	2301      	movs	r3, #1
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	47a0      	blx	r4
	return data;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}

080019fc <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	72fb      	strb	r3, [r7, #11]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 8001a10:	7abb      	ldrb	r3, [r7, #10]
 8001a12:	3302      	adds	r3, #2
 8001a14:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3307      	adds	r3, #7
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a22:	466b      	mov	r3, sp
 8001a24:	3307      	adds	r3, #7
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	221a      	movs	r2, #26
 8001a30:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3301      	adds	r3, #1
 8001a36:	7afa      	ldrb	r2, [r7, #11]
 8001a38:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	7aba      	ldrb	r2, [r7, #10]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fc81 	bl	800634a <memcpy>
	
	WaitOnBusy();
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f7ff fe20 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	6939      	ldr	r1, [r7, #16]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff fdd9 	bl	800160e <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	460b      	mov	r3, r1
 8001a72:	72fb      	strb	r3, [r7, #11]
 8001a74:	4613      	mov	r3, r2
 8001a76:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 8001a78:	7abb      	ldrb	r3, [r7, #10]
 8001a7a:	3303      	adds	r3, #3
 8001a7c:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3307      	adds	r3, #7
 8001a82:	08db      	lsrs	r3, r3, #3
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	ebad 0d03 	sub.w	sp, sp, r3
 8001a8a:	466b      	mov	r3, sp
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3307      	adds	r3, #7
 8001a98:	08db      	lsrs	r3, r3, #3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001aa0:	466b      	mov	r3, sp
 8001aa2:	3307      	adds	r3, #7
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	461a      	mov	r2, r3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	69b8      	ldr	r0, [r7, #24]
 8001ab2:	f004 fb76 	bl	80061a2 <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	221b      	movs	r2, #27
 8001aba:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	7afa      	ldrb	r2, [r7, #11]
 8001ac2:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fde2 	bl	800168e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	681c      	ldr	r4, [r3, #0]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	7aba      	ldrb	r2, [r7, #10]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f004 fc2f 	bl	800634a <memcpy>
}
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	; 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_OBJ::CommonTransceiverSetting()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2103      	movs	r1, #3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fad6 	bl	80010b2 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb22 	bl	8001154 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7ff fb31 	bl	8001182 <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fb77 	bl	800121a <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f7ff fb8a 	bl	8001250 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7ff fc0a 	bl	8001360 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN10SX128x_OBJ9TxSettingEv>:

void SX128x_OBJ::TxSetting()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	6078      	str	r0, [r7, #4]
	SetTxParams(13, RADIO_RAMP_02_US);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	210d      	movs	r1, #13
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb3d 	bl	80011e2 <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>
	InterruptSetting();
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f80e 	bl	8001b8a <_ZN10SX128x_OBJ16InterruptSettingEv>
	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b7e:	f7ff fca7 	bl	80014d0 <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_ZN10SX128x_OBJ16InterruptSettingEv>:
	ClearIrqStatus(0xFFFF);
	return 0;
}

inline void SX128x_OBJ::InterruptSetting()
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af02      	add	r7, sp, #8
 8001b90:	6078      	str	r0, [r7, #4]
	SetDioIrqParams(0x0003, 0x0003, 0x0000, 0x0000);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	f7ff fc97 	bl	80014d0 <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_ZN10SX128x_OBJ4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_OBJ::Init()
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
	Reset();
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3328      	adds	r3, #40	; 0x28
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001bc8:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 8001bca:	f107 0210 	add.w	r2, r7, #16
 8001bce:	f107 0114 	add.w	r1, r7, #20
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fa9b 	bl	8002110 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>
	RadioStatus_t status;
	status = GetStatus();
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3358      	adds	r3, #88	; 0x58
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4610      	mov	r0, r2
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	f003 031c 	and.w	r3, r3, #28
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d001      	beq.n	8001bfc <_ZN10SX128x_OBJ4InitEv+0x52>
		return 1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00b      	b.n	8001c14 <_ZN10SX128x_OBJ4InitEv+0x6a>
	if(status.Fields.ChipMode != 0x03)
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	f023 031f 	bic.w	r3, r3, #31
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b60      	cmp	r3, #96	; 0x60
 8001c06:	d001      	beq.n	8001c0c <_ZN10SX128x_OBJ4InitEv+0x62>
		return 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e003      	b.n	8001c14 <_ZN10SX128x_OBJ4InitEv+0x6a>

	CommonTransceiverSetting();
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff71 	bl	8001af4 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>
	return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f984 	bl	8001f34 <_ZNSt8functionIFvvEEC1Ev>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3310      	adds	r3, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f97f 	bl	8001f34 <_ZNSt8functionIFvvEEC1Ev>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3320      	adds	r3, #32
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f97a 	bl	8001f34 <_ZNSt8functionIFvvEEC1Ev>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3330      	adds	r3, #48	; 0x30
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f975 	bl	8001f34 <_ZNSt8functionIFvvEEC1Ev>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3340      	adds	r3, #64	; 0x40
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f970 	bl	8001f34 <_ZNSt8functionIFvvEEC1Ev>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3350      	adds	r3, #80	; 0x50
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f96b 	bl	8001f34 <_ZNSt8functionIFvvEEC1Ev>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3360      	adds	r3, #96	; 0x60
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f97c 	bl	8001f60 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3370      	adds	r3, #112	; 0x70
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f98d 	bl	8001f8c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3380      	adds	r3, #128	; 0x80
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f99e 	bl	8001fb8 <_ZNSt8functionIFvbEEC1Ev>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <_ZN6SX128xC1Ev+0x88>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	a31b      	add	r3, pc, #108	; (adr r3, 8001d08 <_ZN6SX128xC1Ev+0x80>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	741a      	strb	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cae:	825a      	strh	r2, [r3, #18]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	751a      	strb	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	82da      	strh	r2, [r3, #22]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ffab 	bl	8001c1c <_ZN6SX128xUt0_C1Ev>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220a      	movs	r2, #10
 8001cda:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	33ab      	adds	r3, #171	; 0xab
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	731a      	strb	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	33b8      	adds	r3, #184	; 0xb8
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	4068cba8 	.word	0x4068cba8
 8001d10:	080082bc 	.word	0x080082bc

08001d14 <_ZN10SX128x_OBJC1Ev>:

SX128x_OBJ::SX128x_OBJ()
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffb2 	bl	8001c88 <_ZN6SX128xC1Ev>
 8001d24:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <_ZN10SX128x_OBJC1Ev+0xb0>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	33d0      	adds	r3, #208	; 0xd0
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fa35 	bl	80061a2 <memset>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <_ZN10SX128x_OBJC1Ev+0xb4>)
 8001d64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF7;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2270      	movs	r2, #112	; 0x70
 8001d74:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2218      	movs	r2, #24
 8001d7c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2208      	movs	r2, #8
 8001dac:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	220c      	movs	r2, #12
 8001db4:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08008320 	.word	0x08008320
 8001dc8:	8f0d1800 	.word	0x8f0d1800

08001dcc <_ZN10SX128x_OBJ9PutPacketEPh>:

uint8_t SX128x_OBJ::PutPacket(uint8_t* in)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]

	if(tx_length == 8) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d101      	bne.n	8001de4 <_ZN10SX128x_OBJ9PutPacketEPh+0x18>
		return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e045      	b.n	8001e70 <_ZN10SX128x_OBJ9PutPacketEPh+0xa4>
	} else {
		*(uint32_t*)tx_eprt = *(uint32_t*)in;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	601a      	str	r2, [r3, #0]
		*(uint32_t*)(tx_eprt+4) = *(uint32_t*)(in+4);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001df6:	3304      	adds	r3, #4
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	6852      	ldr	r2, [r2, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
		if(tx_eprt == tx_fifo[7])
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d106      	bne.n	8001e1c <_ZN10SX128x_OBJ9PutPacketEPh+0x50>
		{
			tx_eprt = tx_fifo[0];
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001e1a:	e007      	b.n	8001e2c <_ZN10SX128x_OBJ9PutPacketEPh+0x60>
		}
		else
		{
			tx_eprt += 8;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001e22:	f103 0208 	add.w	r2, r3, #8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
		tx_length ++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b25a      	sxtb	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		if(!tx_activated)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d111      	bne.n	8001e6e <_ZN10SX128x_OBJ9PutPacketEPh+0xa2>
		{
			TickTime_t t;
			t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	733b      	strb	r3, [r7, #12]
			t.PeriodBaseCount = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	81fb      	strh	r3, [r7, #14]
			tx_activated = 1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
			SendPayload(tx_sprt, 8, t, 0x80);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	f7ff fbba 	bl	80015e2 <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>
		}
	}
	return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN10SX128x_OBJ12tx_recursionEv>:
{
	return tx_length;
}

void SX128x_OBJ::tx_recursion()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	6078      	str	r0, [r7, #4]

	uint16_t irqRegs = GetIrqStatus();
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fb5f 	bl	8001546 <_ZN6SX128x12GetIrqStatusEv>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	81fb      	strh	r3, [r7, #14]
	if(!(irqRegs|IRQ_TX_DONE))
		return;
	ClearIrqStatus(IRQ_TX_DONE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fb72 	bl	800157a <_ZN6SX128x14ClearIrqStatusEt>
	if(tx_sprt == tx_fifo[7])
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d106      	bne.n	8001eb4 <_ZN10SX128x_OBJ12tx_recursionEv+0x3c>
	{
		tx_sprt = tx_fifo[0];
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001eb2:	e007      	b.n	8001ec4 <_ZN10SX128x_OBJ12tx_recursionEv+0x4c>
	}
	else
	{
		tx_sprt += 8;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001eba:	f103 0208 	add.w	r2, r3, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	}
	tx_length--;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	if(tx_length >= 0)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db04      	blt.n	8001eec <_ZN10SX128x_OBJ12tx_recursionEv+0x74>
	{
		tx_activated = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001eea:	e00d      	b.n	8001f08 <_ZN10SX128x_OBJ12tx_recursionEv+0x90>
		return;
	}
	TickTime_t t;
	t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001eec:	2300      	movs	r3, #0
 8001eee:	723b      	strb	r3, [r7, #8]
	t.PeriodBaseCount = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	817b      	strh	r3, [r7, #10]
	SendPayload(tx_sprt, 8, t, 0x80);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2208      	movs	r2, #8
 8001f04:	f7ff fb6d 	bl	80015e2 <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>

}
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	6053      	str	r3, [r2, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	6053      	str	r3, [r2, #4]
 8001f46:	6093      	str	r3, [r2, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffdf 	bl	8001f0e <_ZNSt14_Function_baseC1Ev>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	6053      	str	r3, [r2, #4]
 8001f72:	6093      	str	r3, [r2, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ffc9 	bl	8001f0e <_ZNSt14_Function_baseC1Ev>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	461a      	mov	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	6053      	str	r3, [r2, #4]
 8001f9e:	6093      	str	r3, [r2, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ffb3 	bl	8001f0e <_ZNSt14_Function_baseC1Ev>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	6053      	str	r3, [r2, #4]
 8001fca:	6093      	str	r3, [r2, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff9d 	bl	8001f0e <_ZNSt14_Function_baseC1Ev>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4798      	blx	r3
    }
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE>:

#elif defined SOPHIA_V2
extern SPI_HandleTypeDef hspi2;

uint8_t SX128x_OBJ::HalGpioRead(GpioPinFunction_t func)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
	switch (func)
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	2b04      	cmp	r3, #4
 800201c:	d820      	bhi.n	8002060 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002039 	.word	0x08002039
 8002028:	08002047 	.word	0x08002047
 800202c:	08002055 	.word	0x08002055
 8002030:	08002059 	.word	0x08002059
 8002034:	0800205d 	.word	0x0800205d
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 8002038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203c:	480b      	ldr	r0, [pc, #44]	; (800206c <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 800203e:	f001 f9e3 	bl	8003408 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	e00d      	b.n	8002062 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8002046:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800204a:	4808      	ldr	r0, [pc, #32]	; (800206c <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 800204c:	f001 f9dc 	bl	8003408 <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	e006      	b.n	8002062 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO1:
			return 0;
 8002054:	2300      	movs	r3, #0
 8002056:	e004      	b.n	8002062 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO2:
			return 0;
 8002058:	2300      	movs	r3, #0
 800205a:	e002      	b.n	8002062 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO3:
			return 0;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		default:
			return 0;
 8002060:	2300      	movs	r3, #0
	}
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020400 	.word	0x40020400

08002070 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_OBJ::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	460a      	mov	r2, r1
 800207c:	70fa      	strb	r2, [r7, #3]
	switch (func)
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	2a04      	cmp	r2, #4
 8002082:	d81b      	bhi.n	80020bc <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
 8002084:	a101      	add	r1, pc, #4	; (adr r1, 800208c <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 8002086:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800208a:	bf00      	nop
 800208c:	080020a1 	.word	0x080020a1
 8002090:	080020af 	.word	0x080020af
 8002094:	080020bd 	.word	0x080020bd
 8002098:	080020bd 	.word	0x080020bd
 800209c:	080020bd 	.word	0x080020bd
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 80020a0:	461a      	mov	r2, r3
 80020a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 80020a8:	f001 f9c6 	bl	8003438 <HAL_GPIO_WritePin>
		break;
 80020ac:	e007      	b.n	80020be <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 80020ae:	461a      	mov	r2, r3
 80020b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 80020b6:	f001 f9bf 	bl	8003438 <HAL_GPIO_WritePin>
		break;
 80020ba:	e000      	b.n	80020be <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 80020bc:	bf00      	nop
	}
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020400 	.word	0x40020400

080020cc <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht>:

void SX128x_OBJ::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	480a      	ldr	r0, [pc, #40]	; (8002108 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 80020e0:	f001 f9aa 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)buffer_out, buffer_in, size, 1);
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	2201      	movs	r2, #1
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4807      	ldr	r0, [pc, #28]	; (800210c <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x40>)
 80020f0:	f002 f89f 	bl	8004232 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 80020fa:	f001 f99d 	bl	8003438 <HAL_GPIO_WritePin>
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40020800 	.word	0x40020800
 800210c:	200001f4 	.word	0x200001f4

08002110 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>:

void SX128x_OBJ::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 800211e:	2200      	movs	r2, #0
 8002120:	2140      	movs	r1, #64	; 0x40
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8002124:	f001 f988 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002128:	200a      	movs	r0, #10
 800212a:	f000 fea3 	bl	8002e74 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)buffer_out, buffer_in, size, 1);
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	2201      	movs	r2, #1
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x44>)
 800213a:	f002 f87a 	bl	8004232 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 800213e:	2201      	movs	r2, #1
 8002140:	2140      	movs	r1, #64	; 0x40
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8002144:	f001 f978 	bl	8003438 <HAL_GPIO_WritePin>
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40020800 	.word	0x40020800
 8002154:	200001f4 	.word	0x200001f4

08002158 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff3e 	bl	8001fe4 <_ZNSt14_Function_baseD1Ev>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff31 	bl	8001fe4 <_ZNSt14_Function_baseD1Ev>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff24 	bl	8001fe4 <_ZNSt14_Function_baseD1Ev>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZNSt8functionIFvbEED1Ev>:
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff17 	bl	8001fe4 <_ZNSt14_Function_baseD1Ev>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN6SX128xUt0_D1Ev>:
	struct {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3380      	adds	r3, #128	; 0x80
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ffea 	bl	80021a6 <_ZNSt8functionIFvbEED1Ev>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3370      	adds	r3, #112	; 0x70
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ffd8 	bl	800218c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3360      	adds	r3, #96	; 0x60
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ffc6 	bl	8002172 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3350      	adds	r3, #80	; 0x50
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ffb4 	bl	8002158 <_ZNSt8functionIFvvEED1Ev>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3340      	adds	r3, #64	; 0x40
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ffaf 	bl	8002158 <_ZNSt8functionIFvvEED1Ev>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3330      	adds	r3, #48	; 0x30
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ffaa 	bl	8002158 <_ZNSt8functionIFvvEED1Ev>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3320      	adds	r3, #32
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ffa5 	bl	8002158 <_ZNSt8functionIFvvEED1Ev>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3310      	adds	r3, #16
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ffa0 	bl	8002158 <_ZNSt8functionIFvvEED1Ev>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff9c 	bl	8002158 <_ZNSt8functionIFvvEED1Ev>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <_ZN6SX128xD1Ev+0x24>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3318      	adds	r3, #24
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffbe 	bl	80021c0 <_ZN6SX128xUt0_D1Ev>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	080082bc 	.word	0x080082bc

08002254 <_ZN6SX128xD0Ev>:
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ffe5 	bl	800222c <_ZN6SX128xD1Ev>
 8002262:	21d0      	movs	r1, #208	; 0xd0
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f003 f949 	bl	80054fc <_ZdlPvj>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN10SX128x_OBJD1Ev>:

#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX

class SX128x_OBJ : public SX128x
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_ZN10SX128x_OBJD1Ev+0x20>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ffd1 	bl	800222c <_ZN6SX128xD1Ev>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	08008320 	.word	0x08008320

08002298 <_ZN10SX128x_OBJD0Ev>:
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ffe7 	bl	8002274 <_ZN10SX128x_OBJD1Ev>
 80022a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f003 f926 	bl	80054fc <_ZdlPvj>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	0000      	movs	r0, r0
 80022bc:	0000      	movs	r0, r0
	...

080022c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0a6      	sub	sp, #152	; 0x98
 80022c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c6:	f000 fd63 	bl	8002d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ca:	f000 f923 	bl	8002514 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ce:	f000 fa6d 	bl	80027ac <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 80022d2:	f000 f9a1 	bl	8002618 <_ZL12MX_SPI2_Initv>
  MX_USART2_UART_Init();
 80022d6:	f000 fa3b 	bl	8002750 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80022da:	f000 f9d9 	bl	8002690 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80022de:	4886      	ldr	r0, [pc, #536]	; (80024f8 <main+0x238>)
 80022e0:	f002 fa64 	bl	80047ac <HAL_TIM_Base_Start>
  uint8_t test_packet[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 80022e4:	4a85      	ldr	r2, [pc, #532]	; (80024fc <main+0x23c>)
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rx;
  rx = sx1280.Init();
 80022f2:	4883      	ldr	r0, [pc, #524]	; (8002500 <main+0x240>)
 80022f4:	f7ff fc59 	bl	8001baa <_ZN10SX128x_OBJ4InitEv>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

  if(rx == 0)
 80022fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002302:	2b00      	cmp	r3, #0
 8002304:	d178      	bne.n	80023f8 <main+0x138>
  {
	uart_buf_len = sprintf(uart_buf, "SX1280 Initialize success\r\n");
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	497e      	ldr	r1, [pc, #504]	; (8002504 <main+0x244>)
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fee5 	bl	80060dc <siprintf>
 8002312:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002314:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002316:	b29a      	uxth	r2, r3
 8002318:	f107 0114 	add.w	r1, r7, #20
 800231c:	2364      	movs	r3, #100	; 0x64
 800231e:	487a      	ldr	r0, [pc, #488]	; (8002508 <main+0x248>)
 8002320:	f002 fd77 	bl	8004e12 <HAL_UART_Transmit>
	uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	while(1);
  }

  sx1280.TxSetting();
 8002324:	4876      	ldr	r0, [pc, #472]	; (8002500 <main+0x240>)
 8002326:	f7ff fc15 	bl	8001b54 <_ZN10SX128x_OBJ9TxSettingEv>
  rx = sx1280.PutPacket(test_packet); //1
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	4873      	ldr	r0, [pc, #460]	; (8002500 <main+0x240>)
 8002332:	f7ff fd4b 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 8002336:	4603      	mov	r3, r0
 8002338:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //2
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	486f      	ldr	r0, [pc, #444]	; (8002500 <main+0x240>)
 8002344:	f7ff fd42 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 8002348:	4603      	mov	r3, r0
 800234a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //3
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4619      	mov	r1, r3
 8002354:	486a      	ldr	r0, [pc, #424]	; (8002500 <main+0x240>)
 8002356:	f7ff fd39 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //4
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	4619      	mov	r1, r3
 8002366:	4866      	ldr	r0, [pc, #408]	; (8002500 <main+0x240>)
 8002368:	f7ff fd30 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //5
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	4861      	ldr	r0, [pc, #388]	; (8002500 <main+0x240>)
 800237a:	f7ff fd27 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //6
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	485d      	ldr	r0, [pc, #372]	; (8002500 <main+0x240>)
 800238c:	f7ff fd1e 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 8002390:	4603      	mov	r3, r0
 8002392:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //7
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	4619      	mov	r1, r3
 800239c:	4858      	ldr	r0, [pc, #352]	; (8002500 <main+0x240>)
 800239e:	f7ff fd15 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //8
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4619      	mov	r1, r3
 80023ae:	4854      	ldr	r0, [pc, #336]	; (8002500 <main+0x240>)
 80023b0:	f7ff fd0c 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = sx1280.PutPacket(test_packet); //9
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	484f      	ldr	r0, [pc, #316]	; (8002500 <main+0x240>)
 80023c2:	f7ff fd03 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t time_temp;
  uint32_t counter = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t counter_ = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t temp_counter[2] = {0};
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]

  time_temp = HAL_GetTick();
 80023e0:	f000 fd3c 	bl	8002e5c <HAL_GetTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  counter = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  counter_= 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023f6:	e00f      	b.n	8002418 <main+0x158>
	uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4943      	ldr	r1, [pc, #268]	; (800250c <main+0x24c>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fe6c 	bl	80060dc <siprintf>
 8002404:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002408:	b29a      	uxth	r2, r3
 800240a:	f107 0114 	add.w	r1, r7, #20
 800240e:	2364      	movs	r3, #100	; 0x64
 8002410:	483d      	ldr	r0, [pc, #244]	; (8002508 <main+0x248>)
 8002412:	f002 fcfe 	bl	8004e12 <HAL_UART_Transmit>
	while(1);
 8002416:	e7fe      	b.n	8002416 <main+0x156>
  while (1)
  {
	  temp_counter[0] = counter;
 8002418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800241c:	607b      	str	r3, [r7, #4]
	  while(sx1280.PutPacket((uint8_t*)temp_counter))
 800241e:	e007      	b.n	8002430 <main+0x170>
	  {
		  counter_++;
 8002420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002424:	3301      	adds	r3, #1
 8002426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
//		  for(int i = 0; i < 10000; i++);
		  HAL_Delay(1);
 800242a:	2001      	movs	r0, #1
 800242c:	f000 fd22 	bl	8002e74 <HAL_Delay>
	  while(sx1280.PutPacket((uint8_t*)temp_counter))
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4832      	ldr	r0, [pc, #200]	; (8002500 <main+0x240>)
 8002436:	f7ff fcc9 	bl	8001dcc <_ZN10SX128x_OBJ9PutPacketEPh>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ea      	bne.n	8002420 <main+0x160>
	  }
//	  times++;
	  counter ++;
 800244a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800244e:	3301      	adds	r3, #1
 8002450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  counter_++;
 8002454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002458:	3301      	adds	r3, #1
 800245a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  if (counter >= 100)
 800245e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002462:	2b63      	cmp	r3, #99	; 0x63
 8002464:	d9d8      	bls.n	8002418 <main+0x158>
	  {
		  time_temp = HAL_GetTick() - time_temp;
 8002466:	f000 fcf9 	bl	8002e5c <HAL_GetTick>
 800246a:	4603      	mov	r3, r0
 800246c:	b29a      	uxth	r2, r3
 800246e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

		  float bps = 100*8*8*1000./time_temp;
 8002478:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f871 	bl	8000564 <__aeabi_i2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	a11a      	add	r1, pc, #104	; (adr r1, 80024f0 <main+0x230>)
 8002488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800248c:	f7fe f9fe 	bl	800088c <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fbc6 	bl	8000c28 <__aeabi_d2f>
 800249c:	4603      	mov	r3, r0
 800249e:	67bb      	str	r3, [r7, #120]	; 0x78


		  uart_buf_len = sprintf(uart_buf, "Bit Rate: %15.5f bps, count: %3lu, total put count:%8lu\r\n", bps, counter, counter_);
 80024a0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80024a2:	f7fe f871 	bl	8000588 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	f107 0014 	add.w	r0, r7, #20
 80024ae:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80024b2:	9101      	str	r1, [sp, #4]
 80024b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80024b8:	9100      	str	r1, [sp, #0]
 80024ba:	4915      	ldr	r1, [pc, #84]	; (8002510 <main+0x250>)
 80024bc:	f003 fe0e 	bl	80060dc <siprintf>
 80024c0:	67f8      	str	r0, [r7, #124]	; 0x7c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80024c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f107 0114 	add.w	r1, r7, #20
 80024ca:	2364      	movs	r3, #100	; 0x64
 80024cc:	480e      	ldr	r0, [pc, #56]	; (8002508 <main+0x248>)
 80024ce:	f002 fca0 	bl	8004e12 <HAL_UART_Transmit>

		  counter = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  counter_= 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  time_temp = HAL_GetTick();
 80024de:	f000 fcbd 	bl	8002e5c <HAL_GetTick>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80024e8:	e796      	b.n	8002418 <main+0x158>
 80024ea:	bf00      	nop
 80024ec:	f3af 8000 	nop.w
 80024f0:	00000000 	.word	0x00000000
 80024f4:	41586a00 	.word	0x41586a00
 80024f8:	2000024c 	.word	0x2000024c
 80024fc:	080082ac 	.word	0x080082ac
 8002500:	200002d8 	.word	0x200002d8
 8002504:	08008238 	.word	0x08008238
 8002508:	20000294 	.word	0x20000294
 800250c:	08008254 	.word	0x08008254
 8002510:	08008270 	.word	0x08008270

08002514 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b094      	sub	sp, #80	; 0x50
 8002518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	2234      	movs	r2, #52	; 0x34
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fe3d 	bl	80061a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002528:	f107 0308 	add.w	r3, r7, #8
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <_Z18SystemClock_Configv+0xfc>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4a33      	ldr	r2, [pc, #204]	; (8002610 <_Z18SystemClock_Configv+0xfc>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6413      	str	r3, [r2, #64]	; 0x40
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <_Z18SystemClock_Configv+0xfc>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <_Z18SystemClock_Configv+0x100>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <_Z18SystemClock_Configv+0x100>)
 800255e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <_Z18SystemClock_Configv+0x100>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002570:	2301      	movs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800257a:	2302      	movs	r3, #2
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800257e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002584:	2308      	movs	r3, #8
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002588:	23b4      	movs	r3, #180	; 0xb4
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800258c:	2302      	movs	r3, #2
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002590:	2302      	movs	r3, #2
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002594:	2302      	movs	r3, #2
 8002596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4618      	mov	r0, r3
 800259e:	f001 fb21 	bl	8003be4 <HAL_RCC_OscConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80025b2:	f000 f993 	bl	80028dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025b6:	f000 ff7d 	bl	80034b4 <HAL_PWREx_EnableOverDrive>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80025ca:	f000 f987 	bl	80028dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ce:	230f      	movs	r3, #15
 80025d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d2:	2302      	movs	r3, #2
 80025d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	2105      	movs	r1, #5
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 ffb1 	bl	8003554 <HAL_RCC_ClockConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8002602:	f000 f96b 	bl	80028dc <Error_Handler>
  }
}
 8002606:	bf00      	nop
 8002608:	3750      	adds	r7, #80	; 0x50
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40007000 	.word	0x40007000

08002618 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <_ZL12MX_SPI2_Initv+0x74>)
 8002620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002648:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 800264c:	2208      	movs	r2, #8
 800264e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 8002664:	220a      	movs	r2, #10
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002668:	4807      	ldr	r0, [pc, #28]	; (8002688 <_ZL12MX_SPI2_Initv+0x70>)
 800266a:	f001 fd59 	bl	8004120 <HAL_SPI_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800267e:	f000 f92d 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200001f4 	.word	0x200001f4
 800268c:	40003800 	.word	0x40003800

08002690 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	463b      	mov	r3, r7
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026ae:	4a27      	ldr	r2, [pc, #156]	; (800274c <_ZL12MX_TIM1_Initv+0xbc>)
 80026b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026b4:	22b3      	movs	r2, #179	; 0xb3
 80026b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026d8:	481b      	ldr	r0, [pc, #108]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 80026da:	f002 f817 	bl	800470c <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 80026ee:	f000 f8f5 	bl	80028dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	4812      	ldr	r0, [pc, #72]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 8002700:	f002 f8bc 	bl	800487c <HAL_TIM_ConfigClockSource>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002714:	f000 f8e2 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <_ZL12MX_TIM1_Initv+0xb8>)
 8002726:	f002 faab 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 800273a:	f000 f8cf 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000024c 	.word	0x2000024c
 800274c:	40010000 	.word	0x40010000

08002750 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002788:	f002 faf6 	bl	8004d78 <HAL_UART_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800279c:	f000 f89e 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000294 	.word	0x20000294
 80027a8:	40004400 	.word	0x40004400

080027ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a41      	ldr	r2, [pc, #260]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <_ZL12MX_GPIO_Initv+0x124>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002832:	2201      	movs	r2, #1
 8002834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002838:	4826      	ldr	r0, [pc, #152]	; (80028d4 <_ZL12MX_GPIO_Initv+0x128>)
 800283a:	f000 fdfd 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 800283e:	2201      	movs	r2, #1
 8002840:	2140      	movs	r1, #64	; 0x40
 8002842:	4825      	ldr	r0, [pc, #148]	; (80028d8 <_ZL12MX_GPIO_Initv+0x12c>)
 8002844:	f000 fdf8 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SX1280_DIO1_Pin */
  GPIO_InitStruct.Pin = SX1280_DIO1_Pin;
 8002848:	2310      	movs	r3, #16
 800284a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800284c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_DIO1_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	481e      	ldr	r0, [pc, #120]	; (80028d8 <_ZL12MX_GPIO_Initv+0x12c>)
 800285e:	f000 fc3f 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4816      	ldr	r0, [pc, #88]	; (80028d4 <_ZL12MX_GPIO_Initv+0x128>)
 800287c:	f000 fc30 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 8002880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	480f      	ldr	r0, [pc, #60]	; (80028d4 <_ZL12MX_GPIO_Initv+0x128>)
 8002896:	f000 fc23 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289e:	2301      	movs	r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a6:	2302      	movs	r3, #2
 80028a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	4809      	ldr	r0, [pc, #36]	; (80028d8 <_ZL12MX_GPIO_Initv+0x12c>)
 80028b2:	f000 fc15 	bl	80030e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	200a      	movs	r0, #10
 80028bc:	f000 fbd9 	bl	8003072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80028c0:	200a      	movs	r0, #10
 80028c2:	f000 fbf2 	bl	80030aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d107      	bne.n	8002908 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fe:	4293      	cmp	r3, r2
 8002900:	d102      	bne.n	8002908 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_OBJ sx1280;
 8002902:	4809      	ldr	r0, [pc, #36]	; (8002928 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002904:	f7ff fa06 	bl	8001d14 <_ZN10SX128x_OBJC1Ev>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002914:	4293      	cmp	r3, r2
 8002916:	d102      	bne.n	800291e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800291a:	f7ff fcab 	bl	8002274 <_ZN10SX128x_OBJD1Ev>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200002d8 	.word	0x200002d8

0800292c <_GLOBAL__sub_I_hspi2>:
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
 8002930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff ffd7 	bl	80028e8 <_Z41__static_initialization_and_destruction_0ii>
 800293a:	bd80      	pop	{r7, pc}

0800293c <_GLOBAL__sub_D_hspi2>:
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
 8002940:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002944:	2000      	movs	r0, #0
 8002946:	f7ff ffcf 	bl	80028e8 <_Z41__static_initialization_and_destruction_0ii>
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_MspInit+0x4c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_MspInit+0x4c>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_MspInit+0x4c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_MspInit+0x4c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_MspInit+0x4c>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_MspInit+0x4c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_SPI_MspInit+0xa4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d13b      	bne.n	8002a36 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_SPI_MspInit+0xa8>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_SPI_MspInit+0xa8>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_SPI_MspInit+0xa8>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_SPI_MspInit+0xa8>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_SPI_MspInit+0xa8>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_SPI_MspInit+0xa8>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029f6:	2302      	movs	r3, #2
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002a06:	2307      	movs	r3, #7
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <HAL_SPI_MspInit+0xac>)
 8002a12:	f000 fb65 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8002a16:	2384      	movs	r3, #132	; 0x84
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a26:	2305      	movs	r3, #5
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <HAL_SPI_MspInit+0xac>)
 8002a32:	f000 fb55 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3728      	adds	r7, #40	; 0x28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40003800 	.word	0x40003800
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020800 	.word	0x40020800

08002a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_TIM_Base_MspInit+0x3c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_TIM_Base_MspInit+0x40>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_TIM_Base_MspInit+0x40>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_TIM_Base_MspInit+0x40>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <HAL_UART_MspInit+0x84>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_UART_MspInit+0x88>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_UART_MspInit+0x88>)
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_UART_MspInit+0x88>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_UART_MspInit+0x88>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_UART_MspInit+0x88>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_UART_MspInit+0x88>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aea:	230c      	movs	r3, #12
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002afa:	2307      	movs	r3, #7
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <HAL_UART_MspInit+0x8c>)
 8002b06:	f000 faeb 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	; 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6c:	f000 f962 	bl	8002e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  sx1280.tx_recursion();
 8002b78:	4803      	ldr	r0, [pc, #12]	; (8002b88 <EXTI4_IRQHandler+0x14>)
 8002b7a:	f7ff f97d 	bl	8001e78 <_ZN10SX128x_OBJ12tx_recursionEv>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_DIO1_Pin);
 8002b7e:	2010      	movs	r0, #16
 8002b80:	f000 fc74 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200002d8 	.word	0x200002d8

08002b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return 1;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_kill>:

int _kill(int pid, int sig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ba6:	f003 fba3 	bl	80062f0 <__errno>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2216      	movs	r2, #22
 8002bae:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_exit>:

void _exit (int status)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffe7 	bl	8002b9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bce:	e7fe      	b.n	8002bce <_exit+0x12>

08002bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00a      	b.n	8002bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be2:	f3af 8000 	nop.w
 8002be6:	4601      	mov	r1, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf0      	blt.n	8002be2 <_read+0x12>
  }

  return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e009      	b.n	8002c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf1      	blt.n	8002c1c <_write+0x12>
  }
  return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_close>:

int _close(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_isatty>:

int _isatty(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f003 fb08 	bl	80062f0 <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20020000 	.word	0x20020000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	20000420 	.word	0x20000420
 8002d14:	20000578 	.word	0x20000578

08002d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <SystemInit+0x20>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <SystemInit+0x20>)
 8002d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d40:	480d      	ldr	r0, [pc, #52]	; (8002d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d42:	490e      	ldr	r1, [pc, #56]	; (8002d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d48:	e002      	b.n	8002d50 <LoopCopyDataInit>

08002d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4e:	3304      	adds	r3, #4

08002d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d54:	d3f9      	bcc.n	8002d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d58:	4c0b      	ldr	r4, [pc, #44]	; (8002d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d5c:	e001      	b.n	8002d62 <LoopFillZerobss>

08002d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d60:	3204      	adds	r2, #4

08002d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d64:	d3fb      	bcc.n	8002d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d66:	f7ff ffd7 	bl	8002d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f003 fac7 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6e:	f7ff faa7 	bl	80022c0 <main>
  bx  lr    
 8002d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d80:	0800871c 	.word	0x0800871c
  ldr r2, =_sbss
 8002d84:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d88:	20000574 	.word	0x20000574

08002d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC_IRQHandler>
	...

08002d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_Init+0x40>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <HAL_Init+0x40>)
 8002d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_Init+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_Init+0x40>)
 8002da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_Init+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <HAL_Init+0x40>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db8:	2003      	movs	r0, #3
 8002dba:	f000 f94f 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dbe:	200f      	movs	r0, #15
 8002dc0:	f000 f808 	bl	8002dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc4:	f7ff fdc2 	bl	800294c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00

08002dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_InitTick+0x54>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_InitTick+0x58>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4619      	mov	r1, r3
 8002de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f967 	bl	80030c6 <HAL_SYSTICK_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00e      	b.n	8002e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b0f      	cmp	r3, #15
 8002e06:	d80a      	bhi.n	8002e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f000 f92f 	bl	8003072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_InitTick+0x5c>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000008 	.word	0x20000008
 8002e30:	20000004 	.word	0x20000004

08002e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_IncTick+0x20>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_IncTick+0x24>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_IncTick+0x24>)
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000008 	.word	0x20000008
 8002e58:	20000424 	.word	0x20000424

08002e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_GetTick+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000424 	.word	0x20000424

08002e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7ff ffee 	bl	8002e5c <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d005      	beq.n	8002e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_Delay+0x44>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e9a:	bf00      	nop
 8002e9c:	f7ff ffde 	bl	8002e5c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d8f7      	bhi.n	8002e9c <HAL_Delay+0x28>
  {
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000008 	.word	0x20000008

08002ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <__NVIC_GetPriorityGrouping+0x18>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 0307 	and.w	r3, r3, #7
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db0b      	blt.n	8002f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4907      	ldr	r1, [pc, #28]	; (8002f58 <__NVIC_EnableIRQ+0x38>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2001      	movs	r0, #1
 8002f42:	fa00 f202 	lsl.w	r2, r0, r2
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	; (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	; (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f7ff ff8e 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff29 	bl	8002ebc <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff3e 	bl	8002f04 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff31 	bl	8002f20 <__NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffa2 	bl	8003018 <SysTick_Config>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e165      	b.n	80033c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8154 	bne.w	80033c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d005      	beq.n	8003132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	2b02      	cmp	r3, #2
 8003130:	d130      	bne.n	8003194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80ae 	beq.w	80033c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_GPIO_Init+0x300>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a5c      	ldr	r2, [pc, #368]	; (80033e0 <HAL_GPIO_Init+0x300>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <HAL_GPIO_Init+0x300>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <HAL_GPIO_Init+0x304>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	; (80033e8 <HAL_GPIO_Init+0x308>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d025      	beq.n	80032fa <HAL_GPIO_Init+0x21a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	; (80033ec <HAL_GPIO_Init+0x30c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01f      	beq.n	80032f6 <HAL_GPIO_Init+0x216>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <HAL_GPIO_Init+0x310>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_Init+0x212>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	; (80033f4 <HAL_GPIO_Init+0x314>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	; (80033f8 <HAL_GPIO_Init+0x318>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_Init+0x20a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4a      	ldr	r2, [pc, #296]	; (80033fc <HAL_GPIO_Init+0x31c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x206>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a49      	ldr	r2, [pc, #292]	; (8003400 <HAL_GPIO_Init+0x320>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_Init+0x202>
 80032de:	2306      	movs	r3, #6
 80032e0:	e00c      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e00a      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032fa:	2300      	movs	r3, #0
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800330c:	4935      	ldr	r1, [pc, #212]	; (80033e4 <HAL_GPIO_Init+0x304>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331a:	4b3a      	ldr	r3, [pc, #232]	; (8003404 <HAL_GPIO_Init+0x324>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333e:	4a31      	ldr	r2, [pc, #196]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_GPIO_Init+0x324>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336e:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003392:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_GPIO_Init+0x324>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <HAL_GPIO_Init+0x324>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	f67f ae96 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40013800 	.word	0x40013800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40020c00 	.word	0x40020c00
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40021400 	.word	0x40021400
 8003400:	40021800 	.word	0x40021800
 8003404:	40013c00 	.word	0x40013c00

08003408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e001      	b.n	800342a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f806 	bl	800349c <HAL_GPIO_EXTI_Callback>
  }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_PWREx_EnableOverDrive+0x90>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_PWREx_EnableOverDrive+0x90>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_PWREx_EnableOverDrive+0x90>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_PWREx_EnableOverDrive+0x94>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e0:	f7ff fcbc 	bl	8002e5c <HAL_GetTick>
 80034e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034e6:	e009      	b.n	80034fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034e8:	f7ff fcb8 	bl	8002e5c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034f6:	d901      	bls.n	80034fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e01f      	b.n	800353c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_PWREx_EnableOverDrive+0x98>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d1ee      	bne.n	80034e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003510:	f7ff fca4 	bl	8002e5c <HAL_GetTick>
 8003514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003516:	e009      	b.n	800352c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003518:	f7ff fca0 	bl	8002e5c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003526:	d901      	bls.n	800352c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e007      	b.n	800353c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_PWREx_EnableOverDrive+0x98>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003538:	d1ee      	bne.n	8003518 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	420e0040 	.word	0x420e0040
 800354c:	40007000 	.word	0x40007000
 8003550:	420e0044 	.word	0x420e0044

08003554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0cc      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d90c      	bls.n	8003590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0b8      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	494d      	ldr	r1, [pc, #308]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d044      	beq.n	8003674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d119      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360e:	2b03      	cmp	r3, #3
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e067      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4934      	ldr	r1, [pc, #208]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003644:	f7ff fc0a 	bl	8002e5c <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7ff fc06 	bl	8002e5c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d20c      	bcs.n	800369c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e032      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4916      	ldr	r1, [pc, #88]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036da:	f000 f855 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 80036de:	4602      	mov	r2, r0
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	490a      	ldr	r1, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	5ccb      	ldrb	r3, [r1, r3]
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fb6a 	bl	8002dd4 <HAL_InitTick>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00
 8003710:	40023800 	.word	0x40023800
 8003714:	0800837c 	.word	0x0800837c
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_RCC_GetHCLKFreq+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000000 	.word	0x20000000

08003738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800373c:	f7ff fff0 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0a9b      	lsrs	r3, r3, #10
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4903      	ldr	r1, [pc, #12]	; (800375c <HAL_RCC_GetPCLK1Freq+0x24>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	0800838c 	.word	0x0800838c

08003760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003764:	f7ff ffdc 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0b5b      	lsrs	r3, r3, #13
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4903      	ldr	r1, [pc, #12]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	0800838c 	.word	0x0800838c

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800378c:	b0ae      	sub	sp, #184	; 0xb8
 800378e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ae:	4bcb      	ldr	r3, [pc, #812]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	f200 8204 	bhi.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x43c>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	08003bc5 	.word	0x08003bc5
 80037cc:	08003bc5 	.word	0x08003bc5
 80037d0:	08003bc5 	.word	0x08003bc5
 80037d4:	08003801 	.word	0x08003801
 80037d8:	08003bc5 	.word	0x08003bc5
 80037dc:	08003bc5 	.word	0x08003bc5
 80037e0:	08003bc5 	.word	0x08003bc5
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003bc5 	.word	0x08003bc5
 80037ec:	08003bc5 	.word	0x08003bc5
 80037f0:	08003bc5 	.word	0x08003bc5
 80037f4:	080039f9 	.word	0x080039f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f8:	4bb9      	ldr	r3, [pc, #740]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x358>)
 80037fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80037fe:	e1e5      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003800:	4bb7      	ldr	r3, [pc, #732]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003806:	e1e1      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003808:	4bb4      	ldr	r3, [pc, #720]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003814:	4bb1      	ldr	r3, [pc, #708]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d071      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003820:	4bae      	ldr	r3, [pc, #696]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800382c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003846:	4622      	mov	r2, r4
 8003848:	462b      	mov	r3, r5
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	0159      	lsls	r1, r3, #5
 8003854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003858:	0150      	lsls	r0, r2, #5
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4621      	mov	r1, r4
 8003860:	1a51      	subs	r1, r2, r1
 8003862:	6439      	str	r1, [r7, #64]	; 0x40
 8003864:	4629      	mov	r1, r5
 8003866:	eb63 0301 	sbc.w	r3, r3, r1
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003878:	4649      	mov	r1, r9
 800387a:	018b      	lsls	r3, r1, #6
 800387c:	4641      	mov	r1, r8
 800387e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003882:	4641      	mov	r1, r8
 8003884:	018a      	lsls	r2, r1, #6
 8003886:	4641      	mov	r1, r8
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	63b9      	str	r1, [r7, #56]	; 0x38
 800388c:	4649      	mov	r1, r9
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80038a0:	4649      	mov	r1, r9
 80038a2:	00cb      	lsls	r3, r1, #3
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038aa:	4641      	mov	r1, r8
 80038ac:	00ca      	lsls	r2, r1, #3
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	4622      	mov	r2, r4
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	462b      	mov	r3, r5
 80038bc:	460a      	mov	r2, r1
 80038be:	eb42 0303 	adc.w	r3, r2, r3
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038d0:	4629      	mov	r1, r5
 80038d2:	028b      	lsls	r3, r1, #10
 80038d4:	4621      	mov	r1, r4
 80038d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038da:	4621      	mov	r1, r4
 80038dc:	028a      	lsls	r2, r1, #10
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80038f4:	f7fd f9e8 	bl	8000cc8 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003902:	e067      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003904:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003910:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	67bb      	str	r3, [r7, #120]	; 0x78
 800391e:	2300      	movs	r3, #0
 8003920:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003922:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	f04f 0000 	mov.w	r0, #0
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003938:	0150      	lsls	r0, r2, #5
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4621      	mov	r1, r4
 8003940:	1a51      	subs	r1, r2, r1
 8003942:	62b9      	str	r1, [r7, #40]	; 0x28
 8003944:	4629      	mov	r1, r5
 8003946:	eb63 0301 	sbc.w	r3, r3, r1
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003958:	4649      	mov	r1, r9
 800395a:	018b      	lsls	r3, r1, #6
 800395c:	4641      	mov	r1, r8
 800395e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003962:	4641      	mov	r1, r8
 8003964:	018a      	lsls	r2, r1, #6
 8003966:	4641      	mov	r1, r8
 8003968:	ebb2 0a01 	subs.w	sl, r2, r1
 800396c:	4649      	mov	r1, r9
 800396e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800397e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003986:	4692      	mov	sl, r2
 8003988:	469b      	mov	fp, r3
 800398a:	4623      	mov	r3, r4
 800398c:	eb1a 0303 	adds.w	r3, sl, r3
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	462b      	mov	r3, r5
 8003994:	eb4b 0303 	adc.w	r3, fp, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039a6:	4629      	mov	r1, r5
 80039a8:	028b      	lsls	r3, r1, #10
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b0:	4621      	mov	r1, r4
 80039b2:	028a      	lsls	r2, r1, #10
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039bc:	2200      	movs	r2, #0
 80039be:	673b      	str	r3, [r7, #112]	; 0x70
 80039c0:	677a      	str	r2, [r7, #116]	; 0x74
 80039c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80039c6:	f7fd f97f 	bl	8000cc8 <__aeabi_uldivmod>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4613      	mov	r3, r2
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d4:	4b41      	ldr	r3, [pc, #260]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80039e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039f6:	e0e9      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d069      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a10:	4b32      	ldr	r3, [pc, #200]	; (8003adc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	2200      	movs	r2, #0
 8003a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	663b      	str	r3, [r7, #96]	; 0x60
 8003a24:	2300      	movs	r3, #0
 8003a26:	667b      	str	r3, [r7, #100]	; 0x64
 8003a28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	462b      	mov	r3, r5
 8003a30:	f04f 0000 	mov.w	r0, #0
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	0159      	lsls	r1, r3, #5
 8003a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3e:	0150      	lsls	r0, r2, #5
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4621      	mov	r1, r4
 8003a46:	1a51      	subs	r1, r2, r1
 8003a48:	61b9      	str	r1, [r7, #24]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a5e:	4659      	mov	r1, fp
 8003a60:	018b      	lsls	r3, r1, #6
 8003a62:	4651      	mov	r1, sl
 8003a64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a68:	4651      	mov	r1, sl
 8003a6a:	018a      	lsls	r2, r1, #6
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ebb2 0801 	subs.w	r8, r2, r1
 8003a72:	4659      	mov	r1, fp
 8003a74:	eb63 0901 	sbc.w	r9, r3, r1
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8c:	4690      	mov	r8, r2
 8003a8e:	4699      	mov	r9, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	eb18 0303 	adds.w	r3, r8, r3
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	462b      	mov	r3, r5
 8003a9a:	eb49 0303 	adc.w	r3, r9, r3
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003aac:	4629      	mov	r1, r5
 8003aae:	028b      	lsls	r3, r1, #10
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	028a      	lsls	r2, r1, #10
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ac8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003acc:	f7fd f8fc 	bl	8000cc8 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ada:	e063      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x41c>
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae4:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x454>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	2200      	movs	r2, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	4611      	mov	r1, r2
 8003af0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003af4:	653b      	str	r3, [r7, #80]	; 0x50
 8003af6:	2300      	movs	r3, #0
 8003af8:	657b      	str	r3, [r7, #84]	; 0x54
 8003afa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	0159      	lsls	r1, r3, #5
 8003b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b10:	0150      	lsls	r0, r2, #5
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4641      	mov	r1, r8
 8003b18:	1a51      	subs	r1, r2, r1
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b30:	4659      	mov	r1, fp
 8003b32:	018b      	lsls	r3, r1, #6
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	018a      	lsls	r2, r1, #6
 8003b3e:	4651      	mov	r1, sl
 8003b40:	1a54      	subs	r4, r2, r1
 8003b42:	4659      	mov	r1, fp
 8003b44:	eb63 0501 	sbc.w	r5, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	00eb      	lsls	r3, r5, #3
 8003b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b56:	00e2      	lsls	r2, r4, #3
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	18e3      	adds	r3, r4, r3
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	464b      	mov	r3, r9
 8003b64:	eb45 0303 	adc.w	r3, r5, r3
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b76:	4629      	mov	r1, r5
 8003b78:	028b      	lsls	r3, r1, #10
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b80:	4621      	mov	r1, r4
 8003b82:	028a      	lsls	r2, r1, #10
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b96:	f7fd f897 	bl	8000cc8 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x454>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0f1b      	lsrs	r3, r3, #28
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	37b8      	adds	r7, #184	; 0xb8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	00f42400 	.word	0x00f42400

08003be4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e28d      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8083 	beq.w	8003d0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c04:	4b94      	ldr	r3, [pc, #592]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d019      	beq.n	8003c44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c10:	4b91      	ldr	r3, [pc, #580]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c1c:	4b8e      	ldr	r3, [pc, #568]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c28:	d00c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c36:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	4b84      	ldr	r3, [pc, #528]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d05b      	beq.n	8003d08 <HAL_RCC_OscConfig+0x124>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d157      	bne.n	8003d08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e25a      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d106      	bne.n	8003c74 <HAL_RCC_OscConfig+0x90>
 8003c66:	4b7c      	ldr	r3, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7b      	ldr	r2, [pc, #492]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e01d      	b.n	8003cb0 <HAL_RCC_OscConfig+0xcc>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0xb4>
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a72      	ldr	r2, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0xcc>
 8003c98:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7ff f8d0 	bl	8002e5c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7ff f8cc 	bl	8002e5c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e21f      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xdc>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7ff f8bc 	bl	8002e5c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff f8b8 	bl	8002e5c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e20b      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x104>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06f      	beq.n	8003df6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d16:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d22:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d105      	bne.n	8003d3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x186>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1d3      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <HAL_RCC_OscConfig+0x278>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7ff f865 	bl	8002e5c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7ff f861 	bl	8002e5c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1b4      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4925      	ldr	r1, [pc, #148]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x278>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7ff f844 	bl	8002e5c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7ff f840 	bl	8002e5c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e193      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d036      	beq.n	8003e70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCC_OscConfig+0x27c>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7ff f824 	bl	8002e5c <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e18:	f7ff f820 	bl	8002e5c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e173      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x234>
 8003e36:	e01b      	b.n	8003e70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7ff f80d 	bl	8002e5c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e00e      	b.n	8003e64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7ff f809 	bl	8002e5c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d907      	bls.n	8003e64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e15c      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470000 	.word	0x42470000
 8003e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	4b8a      	ldr	r3, [pc, #552]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ea      	bne.n	8003e46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8097 	beq.w	8003fac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e82:	4b83      	ldr	r3, [pc, #524]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a7e      	ldr	r2, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b7c      	ldr	r3, [pc, #496]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b79      	ldr	r3, [pc, #484]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe ffc9 	bl	8002e5c <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe ffc5 	bl	8002e5c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e118      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCC_OscConfig+0x4b0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x31e>
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	e01c      	b.n	8003f3c <HAL_RCC_OscConfig+0x358>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x340>
 8003f0a:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4a60      	ldr	r2, [pc, #384]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70
 8003f16:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0x358>
 8003f24:	4b5a      	ldr	r3, [pc, #360]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a59      	ldr	r2, [pc, #356]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f30:	4b57      	ldr	r3, [pc, #348]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a56      	ldr	r2, [pc, #344]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f36:	f023 0304 	bic.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fe ff8a 	bl	8002e5c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fe ff86 	bl	8002e5c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0d7      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ee      	beq.n	8003f4c <HAL_RCC_OscConfig+0x368>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fe ff74 	bl	8002e5c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fe ff70 	bl	8002e5c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0c1      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ee      	bne.n	8003f78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80ad 	beq.w	8004110 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb6:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d060      	beq.n	8004084 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d145      	bne.n	8004056 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b33      	ldr	r3, [pc, #204]	; (8004098 <HAL_RCC_OscConfig+0x4b4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe ff44 	bl	8002e5c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fe ff40 	bl	8002e5c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e093      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	019b      	lsls	r3, r3, #6
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	3b01      	subs	r3, #1
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	491b      	ldr	r1, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x4b4>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe ff15 	bl	8002e5c <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fe ff11 	bl	8002e5c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e064      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x452>
 8004054:	e05c      	b.n	8004110 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_OscConfig+0x4b4>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe fefe 	bl	8002e5c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fe fefa 	bl	8002e5c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e04d      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_RCC_OscConfig+0x4ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x480>
 8004082:	e045      	b.n	8004110 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e040      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000
 8004098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800409c:	4b1f      	ldr	r3, [pc, #124]	; (800411c <HAL_RCC_OscConfig+0x538>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d030      	beq.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d129      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d122      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d119      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	3b01      	subs	r3, #1
 80040e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d10f      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07b      	b.n	800422a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004142:	d009      	beq.n	8004158 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	61da      	str	r2, [r3, #28]
 800414a:	e005      	b.n	8004158 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe fc12 	bl	800299c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	ea42 0103 	orr.w	r1, r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	f003 0104 	and.w	r1, r3, #4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f003 0210 	and.w	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004218:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08c      	sub	sp, #48	; 0x30
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004240:	2301      	movs	r3, #1
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x26>
 8004254:	2302      	movs	r3, #2
 8004256:	e18a      	b.n	800456e <HAL_SPI_TransmitReceive+0x33c>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004260:	f7fe fdfc 	bl	8002e5c <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800426c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800427a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800427e:	2b01      	cmp	r3, #1
 8004280:	d00f      	beq.n	80042a2 <HAL_SPI_TransmitReceive+0x70>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004288:	d107      	bne.n	800429a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_SPI_TransmitReceive+0x68>
 8004292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004296:	2b04      	cmp	r3, #4
 8004298:	d003      	beq.n	80042a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042a0:	e15b      	b.n	800455a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x82>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x82>
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042ba:	e14e      	b.n	800455a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d003      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2205      	movs	r2, #5
 80042cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	887a      	ldrh	r2, [r7, #2]
 80042e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	887a      	ldrh	r2, [r7, #2]
 80042f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d007      	beq.n	8004324 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d178      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_SPI_TransmitReceive+0x10a>
 8004336:	8b7b      	ldrh	r3, [r7, #26]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d166      	bne.n	800440a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004360:	e053      	b.n	800440a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d11b      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x176>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x176>
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d113      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	881a      	ldrh	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d119      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x1b8>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d014      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	b292      	uxth	r2, r2
 80043cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	1c9a      	adds	r2, r3, #2
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e6:	2301      	movs	r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043ea:	f7fe fd37 	bl	8002e5c <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d807      	bhi.n	800440a <HAL_SPI_TransmitReceive+0x1d8>
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d003      	beq.n	800440a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004408:	e0a7      	b.n	800455a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1a6      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x130>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1a1      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x130>
 800441e:	e07c      	b.n	800451a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_TransmitReceive+0x1fc>
 8004428:	8b7b      	ldrh	r3, [r7, #26]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d16b      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004454:	e057      	b.n	8004506 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11c      	bne.n	800449e <HAL_SPI_TransmitReceive+0x26c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d017      	beq.n	800449e <HAL_SPI_TransmitReceive+0x26c>
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d114      	bne.n	800449e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d119      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x2ae>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044dc:	2301      	movs	r3, #1
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044e0:	f7fe fcbc 	bl	8002e5c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d803      	bhi.n	80044f8 <HAL_SPI_TransmitReceive+0x2c6>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d102      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x2cc>
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004504:	e029      	b.n	800455a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1a2      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x224>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d19d      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f8b2 	bl	8004688 <SPI_EndRxTxTransaction>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004536:	e010      	b.n	800455a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	e000      	b.n	800455a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004558:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800456a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800456e:	4618      	mov	r0, r3
 8004570:	3730      	adds	r7, #48	; 0x30
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004588:	f7fe fc68 	bl	8002e5c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	4413      	add	r3, r2
 8004596:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004598:	f7fe fc60 	bl	8002e5c <HAL_GetTick>
 800459c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800459e:	4b39      	ldr	r3, [pc, #228]	; (8004684 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	015b      	lsls	r3, r3, #5
 80045a4:	0d1b      	lsrs	r3, r3, #20
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ae:	e054      	b.n	800465a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d050      	beq.n	800465a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045b8:	f7fe fc50 	bl	8002e5c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d902      	bls.n	80045ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d13d      	bne.n	800464a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e6:	d111      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x94>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	d004      	beq.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d107      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004614:	d10f      	bne.n	8004636 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e017      	b.n	800467a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3b01      	subs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	429a      	cmp	r2, r3
 8004676:	d19b      	bne.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000000 	.word	0x20000000

08004688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <SPI_EndRxTxTransaction+0x7c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <SPI_EndRxTxTransaction+0x80>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	0d5b      	lsrs	r3, r3, #21
 80046a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b2:	d112      	bne.n	80046da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff ff5a 	bl	8004578 <SPI_WaitFlagStateUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e00f      	b.n	80046fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d0f2      	beq.n	80046da <SPI_EndRxTxTransaction+0x52>
 80046f4:	e000      	b.n	80046f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80046f6:	bf00      	nop
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000000 	.word	0x20000000
 8004708:	165e9f81 	.word	0x165e9f81

0800470c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e041      	b.n	80047a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fe f98a 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 f95e 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e046      	b.n	8004852 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a23      	ldr	r2, [pc, #140]	; (8004860 <HAL_TIM_Base_Start+0xb4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d01d      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <HAL_TIM_Base_Start+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_TIM_Base_Start+0xbc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_TIM_Base_Start+0xc0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_TIM_Base_Start+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIM_Base_Start+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_TIM_Base_Start+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d111      	bne.n	8004840 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d010      	beq.n	8004850 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	e007      	b.n	8004850 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400
 8004874:	40014000 	.word	0x40014000
 8004878:	40001800 	.word	0x40001800

0800487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x1c>
 8004894:	2302      	movs	r3, #2
 8004896:	e0b4      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x186>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d0:	d03e      	beq.n	8004950 <HAL_TIM_ConfigClockSource+0xd4>
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d6:	f200 8087 	bhi.w	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048de:	f000 8086 	beq.w	80049ee <HAL_TIM_ConfigClockSource+0x172>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d87f      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b70      	cmp	r3, #112	; 0x70
 80048ea:	d01a      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0xa6>
 80048ec:	2b70      	cmp	r3, #112	; 0x70
 80048ee:	d87b      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b60      	cmp	r3, #96	; 0x60
 80048f2:	d050      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x11a>
 80048f4:	2b60      	cmp	r3, #96	; 0x60
 80048f6:	d877      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b50      	cmp	r3, #80	; 0x50
 80048fa:	d03c      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0xfa>
 80048fc:	2b50      	cmp	r3, #80	; 0x50
 80048fe:	d873      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d058      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d86f      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b30      	cmp	r3, #48	; 0x30
 800490a:	d064      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d86b      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b20      	cmp	r3, #32
 8004912:	d060      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d867      	bhi.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05c      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 800491c:	2b10      	cmp	r3, #16
 800491e:	d05a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	e062      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f000 f985 	bl	8004c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	609a      	str	r2, [r3, #8]
      break;
 800494e:	e04f      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f000 f96e 	bl	8004c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004972:	609a      	str	r2, [r3, #8]
      break;
 8004974:	e03c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 f8e2 	bl	8004b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2150      	movs	r1, #80	; 0x50
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f93b 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 8004994:	e02c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f000 f901 	bl	8004baa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2160      	movs	r1, #96	; 0x60
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f92b 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80049b4:	e01c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f000 f8c2 	bl	8004b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2140      	movs	r1, #64	; 0x40
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f91b 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f000 f912 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80049e6:	e003      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e000      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a40      	ldr	r2, [pc, #256]	; (8004b20 <TIM_Base_SetConfig+0x114>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d00f      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3d      	ldr	r2, [pc, #244]	; (8004b24 <TIM_Base_SetConfig+0x118>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a3c      	ldr	r2, [pc, #240]	; (8004b28 <TIM_Base_SetConfig+0x11c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <TIM_Base_SetConfig+0x120>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a3a      	ldr	r2, [pc, #232]	; (8004b30 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2f      	ldr	r2, [pc, #188]	; (8004b20 <TIM_Base_SetConfig+0x114>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d02b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d027      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <TIM_Base_SetConfig+0x118>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d023      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <TIM_Base_SetConfig+0x11c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01f      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <TIM_Base_SetConfig+0x120>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a29      	ldr	r2, [pc, #164]	; (8004b30 <TIM_Base_SetConfig+0x124>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d017      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <TIM_Base_SetConfig+0x128>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <TIM_Base_SetConfig+0x12c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <TIM_Base_SetConfig+0x130>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a25      	ldr	r2, [pc, #148]	; (8004b40 <TIM_Base_SetConfig+0x134>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <TIM_Base_SetConfig+0x138>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <TIM_Base_SetConfig+0x13c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <TIM_Base_SetConfig+0x114>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0xf8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <TIM_Base_SetConfig+0x124>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40010400 	.word	0x40010400
 8004b34:	40014000 	.word	0x40014000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800
 8004b40:	40001800 	.word	0x40001800
 8004b44:	40001c00 	.word	0x40001c00
 8004b48:	40002000 	.word	0x40002000

08004b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 030a 	bic.w	r3, r3, #10
 8004b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0210 	bic.w	r2, r3, #16
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	031b      	lsls	r3, r3, #12
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f043 0307 	orr.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e05a      	b.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d022      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d01d      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d018      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10c      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800

08004d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e03f      	b.n	8004e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd fe76 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f929 	bl	8005014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b08a      	sub	sp, #40	; 0x28
 8004e16:	af02      	add	r7, sp, #8
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d17c      	bne.n	8004f2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_UART_Transmit+0x2c>
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e075      	b.n	8004f2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Transmit+0x3e>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e06e      	b.n	8004f2e <HAL_UART_Transmit+0x11c>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2221      	movs	r2, #33	; 0x21
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e66:	f7fd fff9 	bl	8002e5c <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e80:	d108      	bne.n	8004e94 <HAL_UART_Transmit+0x82>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e003      	b.n	8004e9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ea4:	e02a      	b.n	8004efc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f840 	bl	8004f36 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e036      	b.n	8004f2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	3302      	adds	r3, #2
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	e007      	b.n	8004eee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1cf      	bne.n	8004ea6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2140      	movs	r1, #64	; 0x40
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f810 	bl	8004f36 <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e006      	b.n	8004f2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b090      	sub	sp, #64	; 0x40
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f46:	e050      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d04c      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f56:	f7fd ff81 	bl	8002e5c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d241      	bcs.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f86:	637a      	str	r2, [r7, #52]	; 0x34
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e5      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fba:	623a      	str	r2, [r7, #32]
 8004fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	69f9      	ldr	r1, [r7, #28]
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e00f      	b.n	800500a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d09f      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3740      	adds	r7, #64	; 0x40
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005018:	b0c0      	sub	sp, #256	; 0x100
 800501a:	af00      	add	r7, sp, #0
 800501c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	ea40 0301 	orr.w	r3, r0, r1
 800503c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	431a      	orrs	r2, r3
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	431a      	orrs	r2, r3
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800506c:	f021 010c 	bic.w	r1, r1, #12
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800507a:	430b      	orrs	r3, r1
 800507c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	6999      	ldr	r1, [r3, #24]
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	ea40 0301 	orr.w	r3, r0, r1
 800509a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b8f      	ldr	r3, [pc, #572]	; (80052e0 <UART_SetConfig+0x2cc>)
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d005      	beq.n	80050b4 <UART_SetConfig+0xa0>
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8d      	ldr	r3, [pc, #564]	; (80052e4 <UART_SetConfig+0x2d0>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d104      	bne.n	80050be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fe fb54 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 80050b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050bc:	e003      	b.n	80050c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7fe fb3b 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 80050c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	f040 810c 	bne.w	80052ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ee:	415b      	adcs	r3, r3
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050f6:	4621      	mov	r1, r4
 80050f8:	eb12 0801 	adds.w	r8, r2, r1
 80050fc:	4629      	mov	r1, r5
 80050fe:	eb43 0901 	adc.w	r9, r3, r1
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005116:	4690      	mov	r8, r2
 8005118:	4699      	mov	r9, r3
 800511a:	4623      	mov	r3, r4
 800511c:	eb18 0303 	adds.w	r3, r8, r3
 8005120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005124:	462b      	mov	r3, r5
 8005126:	eb49 0303 	adc.w	r3, r9, r3
 800512a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800513a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800513e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005142:	460b      	mov	r3, r1
 8005144:	18db      	adds	r3, r3, r3
 8005146:	653b      	str	r3, [r7, #80]	; 0x50
 8005148:	4613      	mov	r3, r2
 800514a:	eb42 0303 	adc.w	r3, r2, r3
 800514e:	657b      	str	r3, [r7, #84]	; 0x54
 8005150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005158:	f7fb fdb6 	bl	8000cc8 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4b61      	ldr	r3, [pc, #388]	; (80052e8 <UART_SetConfig+0x2d4>)
 8005162:	fba3 2302 	umull	r2, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	011c      	lsls	r4, r3, #4
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	1891      	adds	r1, r2, r2
 8005182:	64b9      	str	r1, [r7, #72]	; 0x48
 8005184:	415b      	adcs	r3, r3
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800518c:	4641      	mov	r1, r8
 800518e:	eb12 0a01 	adds.w	sl, r2, r1
 8005192:	4649      	mov	r1, r9
 8005194:	eb43 0b01 	adc.w	fp, r3, r1
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ac:	4692      	mov	sl, r2
 80051ae:	469b      	mov	fp, r3
 80051b0:	4643      	mov	r3, r8
 80051b2:	eb1a 0303 	adds.w	r3, sl, r3
 80051b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ba:	464b      	mov	r3, r9
 80051bc:	eb4b 0303 	adc.w	r3, fp, r3
 80051c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051d8:	460b      	mov	r3, r1
 80051da:	18db      	adds	r3, r3, r3
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
 80051de:	4613      	mov	r3, r2
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
 80051e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ee:	f7fb fd6b 	bl	8000cc8 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <UART_SetConfig+0x2d4>)
 80051fa:	fba3 2301 	umull	r2, r3, r3, r1
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2264      	movs	r2, #100	; 0x64
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	1acb      	subs	r3, r1, r3
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800520e:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <UART_SetConfig+0x2d4>)
 8005210:	fba3 2302 	umull	r2, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800521c:	441c      	add	r4, r3
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800522c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	1891      	adds	r1, r2, r2
 8005236:	63b9      	str	r1, [r7, #56]	; 0x38
 8005238:	415b      	adcs	r3, r3
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005240:	4641      	mov	r1, r8
 8005242:	1851      	adds	r1, r2, r1
 8005244:	6339      	str	r1, [r7, #48]	; 0x30
 8005246:	4649      	mov	r1, r9
 8005248:	414b      	adcs	r3, r1
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005258:	4659      	mov	r1, fp
 800525a:	00cb      	lsls	r3, r1, #3
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005262:	4651      	mov	r1, sl
 8005264:	00ca      	lsls	r2, r1, #3
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	4603      	mov	r3, r0
 800526c:	4642      	mov	r2, r8
 800526e:	189b      	adds	r3, r3, r2
 8005270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005274:	464b      	mov	r3, r9
 8005276:	460a      	mov	r2, r1
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800528c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005294:	460b      	mov	r3, r1
 8005296:	18db      	adds	r3, r3, r3
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
 800529a:	4613      	mov	r3, r2
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052aa:	f7fb fd0d 	bl	8000cc8 <__aeabi_uldivmod>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <UART_SetConfig+0x2d4>)
 80052b4:	fba3 1302 	umull	r1, r3, r3, r2
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	2164      	movs	r1, #100	; 0x64
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3332      	adds	r3, #50	; 0x32
 80052c6:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <UART_SetConfig+0x2d4>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	f003 0207 	and.w	r2, r3, #7
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4422      	add	r2, r4
 80052da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052dc:	e106      	b.n	80054ec <UART_SetConfig+0x4d8>
 80052de:	bf00      	nop
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052fe:	4642      	mov	r2, r8
 8005300:	464b      	mov	r3, r9
 8005302:	1891      	adds	r1, r2, r2
 8005304:	6239      	str	r1, [r7, #32]
 8005306:	415b      	adcs	r3, r3
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
 800530a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800530e:	4641      	mov	r1, r8
 8005310:	1854      	adds	r4, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb43 0501 	adc.w	r5, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005334:	464b      	mov	r3, r9
 8005336:	eb45 0303 	adc.w	r3, r5, r3
 800533a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800534a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800535a:	4629      	mov	r1, r5
 800535c:	008b      	lsls	r3, r1, #2
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005364:	4621      	mov	r1, r4
 8005366:	008a      	lsls	r2, r1, #2
 8005368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800536c:	f7fb fcac 	bl	8000cc8 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b60      	ldr	r3, [pc, #384]	; (80054f8 <UART_SetConfig+0x4e4>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	011c      	lsls	r4, r3, #4
 800537e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800538c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	61b9      	str	r1, [r7, #24]
 8005398:	415b      	adcs	r3, r3
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a0:	4641      	mov	r1, r8
 80053a2:	1851      	adds	r1, r2, r1
 80053a4:	6139      	str	r1, [r7, #16]
 80053a6:	4649      	mov	r1, r9
 80053a8:	414b      	adcs	r3, r1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b8:	4659      	mov	r1, fp
 80053ba:	00cb      	lsls	r3, r1, #3
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c2:	4651      	mov	r1, sl
 80053c4:	00ca      	lsls	r2, r1, #3
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	4642      	mov	r2, r8
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053d4:	464b      	mov	r3, r9
 80053d6:	460a      	mov	r2, r1
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053f8:	4649      	mov	r1, r9
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	4641      	mov	r1, r8
 80053fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005402:	4641      	mov	r1, r8
 8005404:	008a      	lsls	r2, r1, #2
 8005406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800540a:	f7fb fc5d 	bl	8000cc8 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4611      	mov	r1, r2
 8005414:	4b38      	ldr	r3, [pc, #224]	; (80054f8 <UART_SetConfig+0x4e4>)
 8005416:	fba3 2301 	umull	r2, r3, r3, r1
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2264      	movs	r2, #100	; 0x64
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	1acb      	subs	r3, r1, r3
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	3332      	adds	r3, #50	; 0x32
 8005428:	4a33      	ldr	r2, [pc, #204]	; (80054f8 <UART_SetConfig+0x4e4>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005434:	441c      	add	r4, r3
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	673b      	str	r3, [r7, #112]	; 0x70
 800543e:	677a      	str	r2, [r7, #116]	; 0x74
 8005440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	415b      	adcs	r3, r3
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005454:	4641      	mov	r1, r8
 8005456:	1851      	adds	r1, r2, r1
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	4649      	mov	r1, r9
 800545c:	414b      	adcs	r3, r1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800546c:	4659      	mov	r1, fp
 800546e:	00cb      	lsls	r3, r1, #3
 8005470:	4651      	mov	r1, sl
 8005472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005476:	4651      	mov	r1, sl
 8005478:	00ca      	lsls	r2, r1, #3
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	4603      	mov	r3, r0
 8005480:	4642      	mov	r2, r8
 8005482:	189b      	adds	r3, r3, r2
 8005484:	66bb      	str	r3, [r7, #104]	; 0x68
 8005486:	464b      	mov	r3, r9
 8005488:	460a      	mov	r2, r1
 800548a:	eb42 0303 	adc.w	r3, r2, r3
 800548e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	663b      	str	r3, [r7, #96]	; 0x60
 800549a:	667a      	str	r2, [r7, #100]	; 0x64
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054a8:	4649      	mov	r1, r9
 80054aa:	008b      	lsls	r3, r1, #2
 80054ac:	4641      	mov	r1, r8
 80054ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b2:	4641      	mov	r1, r8
 80054b4:	008a      	lsls	r2, r1, #2
 80054b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ba:	f7fb fc05 	bl	8000cc8 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <UART_SetConfig+0x4e4>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <UART_SetConfig+0x4e4>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4422      	add	r2, r4
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f8:	51eb851f 	.word	0x51eb851f

080054fc <_ZdlPvj>:
 80054fc:	f000 b800 	b.w	8005500 <_ZdlPv>

08005500 <_ZdlPv>:
 8005500:	f000 b810 	b.w	8005524 <free>

08005504 <abort>:
 8005504:	b508      	push	{r3, lr}
 8005506:	2006      	movs	r0, #6
 8005508:	f000 fe7c 	bl	8006204 <raise>
 800550c:	2001      	movs	r0, #1
 800550e:	f7fd fb55 	bl	8002bbc <_exit>
	...

08005514 <malloc>:
 8005514:	4b02      	ldr	r3, [pc, #8]	; (8005520 <malloc+0xc>)
 8005516:	4601      	mov	r1, r0
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	f000 b82b 	b.w	8005574 <_malloc_r>
 800551e:	bf00      	nop
 8005520:	20000064 	.word	0x20000064

08005524 <free>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <free+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f001 bd97 	b.w	800705c <_free_r>
 800552e:	bf00      	nop
 8005530:	20000064 	.word	0x20000064

08005534 <sbrk_aligned>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4e0e      	ldr	r6, [pc, #56]	; (8005570 <sbrk_aligned+0x3c>)
 8005538:	460c      	mov	r4, r1
 800553a:	6831      	ldr	r1, [r6, #0]
 800553c:	4605      	mov	r5, r0
 800553e:	b911      	cbnz	r1, 8005546 <sbrk_aligned+0x12>
 8005540:	f000 feb4 	bl	80062ac <_sbrk_r>
 8005544:	6030      	str	r0, [r6, #0]
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	f000 feaf 	bl	80062ac <_sbrk_r>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	d00a      	beq.n	8005568 <sbrk_aligned+0x34>
 8005552:	1cc4      	adds	r4, r0, #3
 8005554:	f024 0403 	bic.w	r4, r4, #3
 8005558:	42a0      	cmp	r0, r4
 800555a:	d007      	beq.n	800556c <sbrk_aligned+0x38>
 800555c:	1a21      	subs	r1, r4, r0
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fea4 	bl	80062ac <_sbrk_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d101      	bne.n	800556c <sbrk_aligned+0x38>
 8005568:	f04f 34ff 	mov.w	r4, #4294967295
 800556c:	4620      	mov	r0, r4
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	2000042c 	.word	0x2000042c

08005574 <_malloc_r>:
 8005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005578:	1ccd      	adds	r5, r1, #3
 800557a:	f025 0503 	bic.w	r5, r5, #3
 800557e:	3508      	adds	r5, #8
 8005580:	2d0c      	cmp	r5, #12
 8005582:	bf38      	it	cc
 8005584:	250c      	movcc	r5, #12
 8005586:	2d00      	cmp	r5, #0
 8005588:	4607      	mov	r7, r0
 800558a:	db01      	blt.n	8005590 <_malloc_r+0x1c>
 800558c:	42a9      	cmp	r1, r5
 800558e:	d905      	bls.n	800559c <_malloc_r+0x28>
 8005590:	230c      	movs	r3, #12
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	2600      	movs	r6, #0
 8005596:	4630      	mov	r0, r6
 8005598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005670 <_malloc_r+0xfc>
 80055a0:	f000 f868 	bl	8005674 <__malloc_lock>
 80055a4:	f8d8 3000 	ldr.w	r3, [r8]
 80055a8:	461c      	mov	r4, r3
 80055aa:	bb5c      	cbnz	r4, 8005604 <_malloc_r+0x90>
 80055ac:	4629      	mov	r1, r5
 80055ae:	4638      	mov	r0, r7
 80055b0:	f7ff ffc0 	bl	8005534 <sbrk_aligned>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	4604      	mov	r4, r0
 80055b8:	d155      	bne.n	8005666 <_malloc_r+0xf2>
 80055ba:	f8d8 4000 	ldr.w	r4, [r8]
 80055be:	4626      	mov	r6, r4
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	d145      	bne.n	8005650 <_malloc_r+0xdc>
 80055c4:	2c00      	cmp	r4, #0
 80055c6:	d048      	beq.n	800565a <_malloc_r+0xe6>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	4631      	mov	r1, r6
 80055cc:	4638      	mov	r0, r7
 80055ce:	eb04 0903 	add.w	r9, r4, r3
 80055d2:	f000 fe6b 	bl	80062ac <_sbrk_r>
 80055d6:	4581      	cmp	r9, r0
 80055d8:	d13f      	bne.n	800565a <_malloc_r+0xe6>
 80055da:	6821      	ldr	r1, [r4, #0]
 80055dc:	1a6d      	subs	r5, r5, r1
 80055de:	4629      	mov	r1, r5
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa7 	bl	8005534 <sbrk_aligned>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d037      	beq.n	800565a <_malloc_r+0xe6>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	442b      	add	r3, r5
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	f8d8 3000 	ldr.w	r3, [r8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d038      	beq.n	800566a <_malloc_r+0xf6>
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	42a2      	cmp	r2, r4
 80055fc:	d12b      	bne.n	8005656 <_malloc_r+0xe2>
 80055fe:	2200      	movs	r2, #0
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	e00f      	b.n	8005624 <_malloc_r+0xb0>
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	1b52      	subs	r2, r2, r5
 8005608:	d41f      	bmi.n	800564a <_malloc_r+0xd6>
 800560a:	2a0b      	cmp	r2, #11
 800560c:	d917      	bls.n	800563e <_malloc_r+0xca>
 800560e:	1961      	adds	r1, r4, r5
 8005610:	42a3      	cmp	r3, r4
 8005612:	6025      	str	r5, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	6059      	strne	r1, [r3, #4]
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	bf08      	it	eq
 800561c:	f8c8 1000 	streq.w	r1, [r8]
 8005620:	5162      	str	r2, [r4, r5]
 8005622:	604b      	str	r3, [r1, #4]
 8005624:	4638      	mov	r0, r7
 8005626:	f104 060b 	add.w	r6, r4, #11
 800562a:	f000 f829 	bl	8005680 <__malloc_unlock>
 800562e:	f026 0607 	bic.w	r6, r6, #7
 8005632:	1d23      	adds	r3, r4, #4
 8005634:	1af2      	subs	r2, r6, r3
 8005636:	d0ae      	beq.n	8005596 <_malloc_r+0x22>
 8005638:	1b9b      	subs	r3, r3, r6
 800563a:	50a3      	str	r3, [r4, r2]
 800563c:	e7ab      	b.n	8005596 <_malloc_r+0x22>
 800563e:	42a3      	cmp	r3, r4
 8005640:	6862      	ldr	r2, [r4, #4]
 8005642:	d1dd      	bne.n	8005600 <_malloc_r+0x8c>
 8005644:	f8c8 2000 	str.w	r2, [r8]
 8005648:	e7ec      	b.n	8005624 <_malloc_r+0xb0>
 800564a:	4623      	mov	r3, r4
 800564c:	6864      	ldr	r4, [r4, #4]
 800564e:	e7ac      	b.n	80055aa <_malloc_r+0x36>
 8005650:	4634      	mov	r4, r6
 8005652:	6876      	ldr	r6, [r6, #4]
 8005654:	e7b4      	b.n	80055c0 <_malloc_r+0x4c>
 8005656:	4613      	mov	r3, r2
 8005658:	e7cc      	b.n	80055f4 <_malloc_r+0x80>
 800565a:	230c      	movs	r3, #12
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	4638      	mov	r0, r7
 8005660:	f000 f80e 	bl	8005680 <__malloc_unlock>
 8005664:	e797      	b.n	8005596 <_malloc_r+0x22>
 8005666:	6025      	str	r5, [r4, #0]
 8005668:	e7dc      	b.n	8005624 <_malloc_r+0xb0>
 800566a:	605b      	str	r3, [r3, #4]
 800566c:	deff      	udf	#255	; 0xff
 800566e:	bf00      	nop
 8005670:	20000428 	.word	0x20000428

08005674 <__malloc_lock>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__malloc_lock+0x8>)
 8005676:	f000 be66 	b.w	8006346 <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	20000570 	.word	0x20000570

08005680 <__malloc_unlock>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__malloc_unlock+0x8>)
 8005682:	f000 be61 	b.w	8006348 <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	20000570 	.word	0x20000570

0800568c <__cvt>:
 800568c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005690:	ec55 4b10 	vmov	r4, r5, d0
 8005694:	2d00      	cmp	r5, #0
 8005696:	460e      	mov	r6, r1
 8005698:	4619      	mov	r1, r3
 800569a:	462b      	mov	r3, r5
 800569c:	bfbb      	ittet	lt
 800569e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056a2:	461d      	movlt	r5, r3
 80056a4:	2300      	movge	r3, #0
 80056a6:	232d      	movlt	r3, #45	; 0x2d
 80056a8:	700b      	strb	r3, [r1, #0]
 80056aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056b0:	4691      	mov	r9, r2
 80056b2:	f023 0820 	bic.w	r8, r3, #32
 80056b6:	bfbc      	itt	lt
 80056b8:	4622      	movlt	r2, r4
 80056ba:	4614      	movlt	r4, r2
 80056bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056c0:	d005      	beq.n	80056ce <__cvt+0x42>
 80056c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056c6:	d100      	bne.n	80056ca <__cvt+0x3e>
 80056c8:	3601      	adds	r6, #1
 80056ca:	2102      	movs	r1, #2
 80056cc:	e000      	b.n	80056d0 <__cvt+0x44>
 80056ce:	2103      	movs	r1, #3
 80056d0:	ab03      	add	r3, sp, #12
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	ab02      	add	r3, sp, #8
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	ec45 4b10 	vmov	d0, r4, r5
 80056dc:	4653      	mov	r3, sl
 80056de:	4632      	mov	r2, r6
 80056e0:	f000 feca 	bl	8006478 <_dtoa_r>
 80056e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056e8:	4607      	mov	r7, r0
 80056ea:	d102      	bne.n	80056f2 <__cvt+0x66>
 80056ec:	f019 0f01 	tst.w	r9, #1
 80056f0:	d022      	beq.n	8005738 <__cvt+0xac>
 80056f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056f6:	eb07 0906 	add.w	r9, r7, r6
 80056fa:	d110      	bne.n	800571e <__cvt+0x92>
 80056fc:	783b      	ldrb	r3, [r7, #0]
 80056fe:	2b30      	cmp	r3, #48	; 0x30
 8005700:	d10a      	bne.n	8005718 <__cvt+0x8c>
 8005702:	2200      	movs	r2, #0
 8005704:	2300      	movs	r3, #0
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fb f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800570e:	b918      	cbnz	r0, 8005718 <__cvt+0x8c>
 8005710:	f1c6 0601 	rsb	r6, r6, #1
 8005714:	f8ca 6000 	str.w	r6, [sl]
 8005718:	f8da 3000 	ldr.w	r3, [sl]
 800571c:	4499      	add	r9, r3
 800571e:	2200      	movs	r2, #0
 8005720:	2300      	movs	r3, #0
 8005722:	4620      	mov	r0, r4
 8005724:	4629      	mov	r1, r5
 8005726:	f7fb f9ef 	bl	8000b08 <__aeabi_dcmpeq>
 800572a:	b108      	cbz	r0, 8005730 <__cvt+0xa4>
 800572c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005730:	2230      	movs	r2, #48	; 0x30
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	454b      	cmp	r3, r9
 8005736:	d307      	bcc.n	8005748 <__cvt+0xbc>
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800573c:	1bdb      	subs	r3, r3, r7
 800573e:	4638      	mov	r0, r7
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	b004      	add	sp, #16
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	1c59      	adds	r1, r3, #1
 800574a:	9103      	str	r1, [sp, #12]
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e7f0      	b.n	8005732 <__cvt+0xa6>

08005750 <__exponent>:
 8005750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005752:	4603      	mov	r3, r0
 8005754:	2900      	cmp	r1, #0
 8005756:	bfb8      	it	lt
 8005758:	4249      	neglt	r1, r1
 800575a:	f803 2b02 	strb.w	r2, [r3], #2
 800575e:	bfb4      	ite	lt
 8005760:	222d      	movlt	r2, #45	; 0x2d
 8005762:	222b      	movge	r2, #43	; 0x2b
 8005764:	2909      	cmp	r1, #9
 8005766:	7042      	strb	r2, [r0, #1]
 8005768:	dd2a      	ble.n	80057c0 <__exponent+0x70>
 800576a:	f10d 0207 	add.w	r2, sp, #7
 800576e:	4617      	mov	r7, r2
 8005770:	260a      	movs	r6, #10
 8005772:	4694      	mov	ip, r2
 8005774:	fb91 f5f6 	sdiv	r5, r1, r6
 8005778:	fb06 1415 	mls	r4, r6, r5, r1
 800577c:	3430      	adds	r4, #48	; 0x30
 800577e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005782:	460c      	mov	r4, r1
 8005784:	2c63      	cmp	r4, #99	; 0x63
 8005786:	f102 32ff 	add.w	r2, r2, #4294967295
 800578a:	4629      	mov	r1, r5
 800578c:	dcf1      	bgt.n	8005772 <__exponent+0x22>
 800578e:	3130      	adds	r1, #48	; 0x30
 8005790:	f1ac 0402 	sub.w	r4, ip, #2
 8005794:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005798:	1c41      	adds	r1, r0, #1
 800579a:	4622      	mov	r2, r4
 800579c:	42ba      	cmp	r2, r7
 800579e:	d30a      	bcc.n	80057b6 <__exponent+0x66>
 80057a0:	f10d 0209 	add.w	r2, sp, #9
 80057a4:	eba2 020c 	sub.w	r2, r2, ip
 80057a8:	42bc      	cmp	r4, r7
 80057aa:	bf88      	it	hi
 80057ac:	2200      	movhi	r2, #0
 80057ae:	4413      	add	r3, r2
 80057b0:	1a18      	subs	r0, r3, r0
 80057b2:	b003      	add	sp, #12
 80057b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80057ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80057be:	e7ed      	b.n	800579c <__exponent+0x4c>
 80057c0:	2330      	movs	r3, #48	; 0x30
 80057c2:	3130      	adds	r1, #48	; 0x30
 80057c4:	7083      	strb	r3, [r0, #2]
 80057c6:	70c1      	strb	r1, [r0, #3]
 80057c8:	1d03      	adds	r3, r0, #4
 80057ca:	e7f1      	b.n	80057b0 <__exponent+0x60>

080057cc <_printf_float>:
 80057cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	ed2d 8b02 	vpush	{d8}
 80057d4:	b08d      	sub	sp, #52	; 0x34
 80057d6:	460c      	mov	r4, r1
 80057d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057dc:	4616      	mov	r6, r2
 80057de:	461f      	mov	r7, r3
 80057e0:	4605      	mov	r5, r0
 80057e2:	f000 fd17 	bl	8006214 <_localeconv_r>
 80057e6:	f8d0 a000 	ldr.w	sl, [r0]
 80057ea:	4650      	mov	r0, sl
 80057ec:	f7fa fd60 	bl	80002b0 <strlen>
 80057f0:	2300      	movs	r3, #0
 80057f2:	930a      	str	r3, [sp, #40]	; 0x28
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	f8d8 3000 	ldr.w	r3, [r8]
 80057fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005800:	3307      	adds	r3, #7
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	f103 0208 	add.w	r2, r3, #8
 800580a:	f8c8 2000 	str.w	r2, [r8]
 800580e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005812:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005816:	9307      	str	r3, [sp, #28]
 8005818:	f8cd 8018 	str.w	r8, [sp, #24]
 800581c:	ee08 0a10 	vmov	s16, r0
 8005820:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005828:	4b9e      	ldr	r3, [pc, #632]	; (8005aa4 <_printf_float+0x2d8>)
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	f7fb f99d 	bl	8000b6c <__aeabi_dcmpun>
 8005832:	bb88      	cbnz	r0, 8005898 <_printf_float+0xcc>
 8005834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005838:	4b9a      	ldr	r3, [pc, #616]	; (8005aa4 <_printf_float+0x2d8>)
 800583a:	f04f 32ff 	mov.w	r2, #4294967295
 800583e:	f7fb f977 	bl	8000b30 <__aeabi_dcmple>
 8005842:	bb48      	cbnz	r0, 8005898 <_printf_float+0xcc>
 8005844:	2200      	movs	r2, #0
 8005846:	2300      	movs	r3, #0
 8005848:	4640      	mov	r0, r8
 800584a:	4649      	mov	r1, r9
 800584c:	f7fb f966 	bl	8000b1c <__aeabi_dcmplt>
 8005850:	b110      	cbz	r0, 8005858 <_printf_float+0x8c>
 8005852:	232d      	movs	r3, #45	; 0x2d
 8005854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005858:	4a93      	ldr	r2, [pc, #588]	; (8005aa8 <_printf_float+0x2dc>)
 800585a:	4b94      	ldr	r3, [pc, #592]	; (8005aac <_printf_float+0x2e0>)
 800585c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005860:	bf94      	ite	ls
 8005862:	4690      	movls	r8, r2
 8005864:	4698      	movhi	r8, r3
 8005866:	2303      	movs	r3, #3
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	9b05      	ldr	r3, [sp, #20]
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	f04f 0900 	mov.w	r9, #0
 8005876:	9700      	str	r7, [sp, #0]
 8005878:	4633      	mov	r3, r6
 800587a:	aa0b      	add	r2, sp, #44	; 0x2c
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f9da 	bl	8005c38 <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	f040 8090 	bne.w	80059aa <_printf_float+0x1de>
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	b00d      	add	sp, #52	; 0x34
 8005890:	ecbd 8b02 	vpop	{d8}
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005898:	4642      	mov	r2, r8
 800589a:	464b      	mov	r3, r9
 800589c:	4640      	mov	r0, r8
 800589e:	4649      	mov	r1, r9
 80058a0:	f7fb f964 	bl	8000b6c <__aeabi_dcmpun>
 80058a4:	b140      	cbz	r0, 80058b8 <_printf_float+0xec>
 80058a6:	464b      	mov	r3, r9
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bfbc      	itt	lt
 80058ac:	232d      	movlt	r3, #45	; 0x2d
 80058ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058b2:	4a7f      	ldr	r2, [pc, #508]	; (8005ab0 <_printf_float+0x2e4>)
 80058b4:	4b7f      	ldr	r3, [pc, #508]	; (8005ab4 <_printf_float+0x2e8>)
 80058b6:	e7d1      	b.n	800585c <_printf_float+0x90>
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058be:	9206      	str	r2, [sp, #24]
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	d13f      	bne.n	8005944 <_printf_float+0x178>
 80058c4:	2306      	movs	r3, #6
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	9b05      	ldr	r3, [sp, #20]
 80058ca:	6861      	ldr	r1, [r4, #4]
 80058cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058d0:	2300      	movs	r3, #0
 80058d2:	9303      	str	r3, [sp, #12]
 80058d4:	ab0a      	add	r3, sp, #40	; 0x28
 80058d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058da:	ab09      	add	r3, sp, #36	; 0x24
 80058dc:	ec49 8b10 	vmov	d0, r8, r9
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6022      	str	r2, [r4, #0]
 80058e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7ff fecf 	bl	800568c <__cvt>
 80058ee:	9b06      	ldr	r3, [sp, #24]
 80058f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058f2:	2b47      	cmp	r3, #71	; 0x47
 80058f4:	4680      	mov	r8, r0
 80058f6:	d108      	bne.n	800590a <_printf_float+0x13e>
 80058f8:	1cc8      	adds	r0, r1, #3
 80058fa:	db02      	blt.n	8005902 <_printf_float+0x136>
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	4299      	cmp	r1, r3
 8005900:	dd41      	ble.n	8005986 <_printf_float+0x1ba>
 8005902:	f1ab 0302 	sub.w	r3, fp, #2
 8005906:	fa5f fb83 	uxtb.w	fp, r3
 800590a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800590e:	d820      	bhi.n	8005952 <_printf_float+0x186>
 8005910:	3901      	subs	r1, #1
 8005912:	465a      	mov	r2, fp
 8005914:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005918:	9109      	str	r1, [sp, #36]	; 0x24
 800591a:	f7ff ff19 	bl	8005750 <__exponent>
 800591e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005920:	1813      	adds	r3, r2, r0
 8005922:	2a01      	cmp	r2, #1
 8005924:	4681      	mov	r9, r0
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	dc02      	bgt.n	8005930 <_printf_float+0x164>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	07d2      	lsls	r2, r2, #31
 800592e:	d501      	bpl.n	8005934 <_printf_float+0x168>
 8005930:	3301      	adds	r3, #1
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005938:	2b00      	cmp	r3, #0
 800593a:	d09c      	beq.n	8005876 <_printf_float+0xaa>
 800593c:	232d      	movs	r3, #45	; 0x2d
 800593e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005942:	e798      	b.n	8005876 <_printf_float+0xaa>
 8005944:	9a06      	ldr	r2, [sp, #24]
 8005946:	2a47      	cmp	r2, #71	; 0x47
 8005948:	d1be      	bne.n	80058c8 <_printf_float+0xfc>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1bc      	bne.n	80058c8 <_printf_float+0xfc>
 800594e:	2301      	movs	r3, #1
 8005950:	e7b9      	b.n	80058c6 <_printf_float+0xfa>
 8005952:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005956:	d118      	bne.n	800598a <_printf_float+0x1be>
 8005958:	2900      	cmp	r1, #0
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	dd0b      	ble.n	8005976 <_printf_float+0x1aa>
 800595e:	6121      	str	r1, [r4, #16]
 8005960:	b913      	cbnz	r3, 8005968 <_printf_float+0x19c>
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	07d0      	lsls	r0, r2, #31
 8005966:	d502      	bpl.n	800596e <_printf_float+0x1a2>
 8005968:	3301      	adds	r3, #1
 800596a:	440b      	add	r3, r1
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005970:	f04f 0900 	mov.w	r9, #0
 8005974:	e7de      	b.n	8005934 <_printf_float+0x168>
 8005976:	b913      	cbnz	r3, 800597e <_printf_float+0x1b2>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	07d2      	lsls	r2, r2, #31
 800597c:	d501      	bpl.n	8005982 <_printf_float+0x1b6>
 800597e:	3302      	adds	r3, #2
 8005980:	e7f4      	b.n	800596c <_printf_float+0x1a0>
 8005982:	2301      	movs	r3, #1
 8005984:	e7f2      	b.n	800596c <_printf_float+0x1a0>
 8005986:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	4299      	cmp	r1, r3
 800598e:	db05      	blt.n	800599c <_printf_float+0x1d0>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	6121      	str	r1, [r4, #16]
 8005994:	07d8      	lsls	r0, r3, #31
 8005996:	d5ea      	bpl.n	800596e <_printf_float+0x1a2>
 8005998:	1c4b      	adds	r3, r1, #1
 800599a:	e7e7      	b.n	800596c <_printf_float+0x1a0>
 800599c:	2900      	cmp	r1, #0
 800599e:	bfd4      	ite	le
 80059a0:	f1c1 0202 	rsble	r2, r1, #2
 80059a4:	2201      	movgt	r2, #1
 80059a6:	4413      	add	r3, r2
 80059a8:	e7e0      	b.n	800596c <_printf_float+0x1a0>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	055a      	lsls	r2, r3, #21
 80059ae:	d407      	bmi.n	80059c0 <_printf_float+0x1f4>
 80059b0:	6923      	ldr	r3, [r4, #16]
 80059b2:	4642      	mov	r2, r8
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	d12c      	bne.n	8005a18 <_printf_float+0x24c>
 80059be:	e764      	b.n	800588a <_printf_float+0xbe>
 80059c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059c4:	f240 80e0 	bls.w	8005b88 <_printf_float+0x3bc>
 80059c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059cc:	2200      	movs	r2, #0
 80059ce:	2300      	movs	r3, #0
 80059d0:	f7fb f89a 	bl	8000b08 <__aeabi_dcmpeq>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d034      	beq.n	8005a42 <_printf_float+0x276>
 80059d8:	4a37      	ldr	r2, [pc, #220]	; (8005ab8 <_printf_float+0x2ec>)
 80059da:	2301      	movs	r3, #1
 80059dc:	4631      	mov	r1, r6
 80059de:	4628      	mov	r0, r5
 80059e0:	47b8      	blx	r7
 80059e2:	3001      	adds	r0, #1
 80059e4:	f43f af51 	beq.w	800588a <_printf_float+0xbe>
 80059e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ec:	429a      	cmp	r2, r3
 80059ee:	db02      	blt.n	80059f6 <_printf_float+0x22a>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07d8      	lsls	r0, r3, #31
 80059f4:	d510      	bpl.n	8005a18 <_printf_float+0x24c>
 80059f6:	ee18 3a10 	vmov	r3, s16
 80059fa:	4652      	mov	r2, sl
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af41 	beq.w	800588a <_printf_float+0xbe>
 8005a08:	f04f 0800 	mov.w	r8, #0
 8005a0c:	f104 091a 	add.w	r9, r4, #26
 8005a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a12:	3b01      	subs	r3, #1
 8005a14:	4543      	cmp	r3, r8
 8005a16:	dc09      	bgt.n	8005a2c <_printf_float+0x260>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	f100 8107 	bmi.w	8005c2e <_printf_float+0x462>
 8005a20:	68e0      	ldr	r0, [r4, #12]
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	4298      	cmp	r0, r3
 8005a26:	bfb8      	it	lt
 8005a28:	4618      	movlt	r0, r3
 8005a2a:	e730      	b.n	800588e <_printf_float+0xc2>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	464a      	mov	r2, r9
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af27 	beq.w	800588a <_printf_float+0xbe>
 8005a3c:	f108 0801 	add.w	r8, r8, #1
 8005a40:	e7e6      	b.n	8005a10 <_printf_float+0x244>
 8005a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc39      	bgt.n	8005abc <_printf_float+0x2f0>
 8005a48:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <_printf_float+0x2ec>)
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f af19 	beq.w	800588a <_printf_float+0xbe>
 8005a58:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	d102      	bne.n	8005a66 <_printf_float+0x29a>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d5d8      	bpl.n	8005a18 <_printf_float+0x24c>
 8005a66:	ee18 3a10 	vmov	r3, s16
 8005a6a:	4652      	mov	r2, sl
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f af09 	beq.w	800588a <_printf_float+0xbe>
 8005a78:	f04f 0900 	mov.w	r9, #0
 8005a7c:	f104 0a1a 	add.w	sl, r4, #26
 8005a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a82:	425b      	negs	r3, r3
 8005a84:	454b      	cmp	r3, r9
 8005a86:	dc01      	bgt.n	8005a8c <_printf_float+0x2c0>
 8005a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a8a:	e792      	b.n	80059b2 <_printf_float+0x1e6>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4652      	mov	r2, sl
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f aef7 	beq.w	800588a <_printf_float+0xbe>
 8005a9c:	f109 0901 	add.w	r9, r9, #1
 8005aa0:	e7ee      	b.n	8005a80 <_printf_float+0x2b4>
 8005aa2:	bf00      	nop
 8005aa4:	7fefffff 	.word	0x7fefffff
 8005aa8:	08008394 	.word	0x08008394
 8005aac:	08008398 	.word	0x08008398
 8005ab0:	0800839c 	.word	0x0800839c
 8005ab4:	080083a0 	.word	0x080083a0
 8005ab8:	080083a4 	.word	0x080083a4
 8005abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005abe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	bfa8      	it	ge
 8005ac4:	461a      	movge	r2, r3
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	4691      	mov	r9, r2
 8005aca:	dc37      	bgt.n	8005b3c <_printf_float+0x370>
 8005acc:	f04f 0b00 	mov.w	fp, #0
 8005ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad4:	f104 021a 	add.w	r2, r4, #26
 8005ad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ada:	9305      	str	r3, [sp, #20]
 8005adc:	eba3 0309 	sub.w	r3, r3, r9
 8005ae0:	455b      	cmp	r3, fp
 8005ae2:	dc33      	bgt.n	8005b4c <_printf_float+0x380>
 8005ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	db3b      	blt.n	8005b64 <_printf_float+0x398>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	07da      	lsls	r2, r3, #31
 8005af0:	d438      	bmi.n	8005b64 <_printf_float+0x398>
 8005af2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005af6:	eba2 0903 	sub.w	r9, r2, r3
 8005afa:	9b05      	ldr	r3, [sp, #20]
 8005afc:	1ad2      	subs	r2, r2, r3
 8005afe:	4591      	cmp	r9, r2
 8005b00:	bfa8      	it	ge
 8005b02:	4691      	movge	r9, r2
 8005b04:	f1b9 0f00 	cmp.w	r9, #0
 8005b08:	dc35      	bgt.n	8005b76 <_printf_float+0x3aa>
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b12:	f104 0a1a 	add.w	sl, r4, #26
 8005b16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	eba3 0309 	sub.w	r3, r3, r9
 8005b20:	4543      	cmp	r3, r8
 8005b22:	f77f af79 	ble.w	8005a18 <_printf_float+0x24c>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4652      	mov	r2, sl
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	f43f aeaa 	beq.w	800588a <_printf_float+0xbe>
 8005b36:	f108 0801 	add.w	r8, r8, #1
 8005b3a:	e7ec      	b.n	8005b16 <_printf_float+0x34a>
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4642      	mov	r2, r8
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	d1c0      	bne.n	8005acc <_printf_float+0x300>
 8005b4a:	e69e      	b.n	800588a <_printf_float+0xbe>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	9205      	str	r2, [sp, #20]
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f ae97 	beq.w	800588a <_printf_float+0xbe>
 8005b5c:	9a05      	ldr	r2, [sp, #20]
 8005b5e:	f10b 0b01 	add.w	fp, fp, #1
 8005b62:	e7b9      	b.n	8005ad8 <_printf_float+0x30c>
 8005b64:	ee18 3a10 	vmov	r3, s16
 8005b68:	4652      	mov	r2, sl
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	d1be      	bne.n	8005af2 <_printf_float+0x326>
 8005b74:	e689      	b.n	800588a <_printf_float+0xbe>
 8005b76:	9a05      	ldr	r2, [sp, #20]
 8005b78:	464b      	mov	r3, r9
 8005b7a:	4442      	add	r2, r8
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	d1c1      	bne.n	8005b0a <_printf_float+0x33e>
 8005b86:	e680      	b.n	800588a <_printf_float+0xbe>
 8005b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	dc01      	bgt.n	8005b92 <_printf_float+0x3c6>
 8005b8e:	07db      	lsls	r3, r3, #31
 8005b90:	d53a      	bpl.n	8005c08 <_printf_float+0x43c>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4642      	mov	r2, r8
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f ae74 	beq.w	800588a <_printf_float+0xbe>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f ae6b 	beq.w	800588a <_printf_float+0xbe>
 8005bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005bc0:	f7fa ffa2 	bl	8000b08 <__aeabi_dcmpeq>
 8005bc4:	b9d8      	cbnz	r0, 8005bfe <_printf_float+0x432>
 8005bc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005bca:	f108 0201 	add.w	r2, r8, #1
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d10e      	bne.n	8005bf6 <_printf_float+0x42a>
 8005bd8:	e657      	b.n	800588a <_printf_float+0xbe>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4652      	mov	r2, sl
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f ae50 	beq.w	800588a <_printf_float+0xbe>
 8005bea:	f108 0801 	add.w	r8, r8, #1
 8005bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	4543      	cmp	r3, r8
 8005bf4:	dcf1      	bgt.n	8005bda <_printf_float+0x40e>
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bfc:	e6da      	b.n	80059b4 <_printf_float+0x1e8>
 8005bfe:	f04f 0800 	mov.w	r8, #0
 8005c02:	f104 0a1a 	add.w	sl, r4, #26
 8005c06:	e7f2      	b.n	8005bee <_printf_float+0x422>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	4642      	mov	r2, r8
 8005c0c:	e7df      	b.n	8005bce <_printf_float+0x402>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	464a      	mov	r2, r9
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f ae36 	beq.w	800588a <_printf_float+0xbe>
 8005c1e:	f108 0801 	add.w	r8, r8, #1
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c26:	1a5b      	subs	r3, r3, r1
 8005c28:	4543      	cmp	r3, r8
 8005c2a:	dcf0      	bgt.n	8005c0e <_printf_float+0x442>
 8005c2c:	e6f8      	b.n	8005a20 <_printf_float+0x254>
 8005c2e:	f04f 0800 	mov.w	r8, #0
 8005c32:	f104 0919 	add.w	r9, r4, #25
 8005c36:	e7f4      	b.n	8005c22 <_printf_float+0x456>

08005c38 <_printf_common>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	4699      	mov	r9, r3
 8005c40:	688a      	ldr	r2, [r1, #8]
 8005c42:	690b      	ldr	r3, [r1, #16]
 8005c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	bfb8      	it	lt
 8005c4c:	4613      	movlt	r3, r2
 8005c4e:	6033      	str	r3, [r6, #0]
 8005c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c54:	4607      	mov	r7, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	b10a      	cbz	r2, 8005c5e <_printf_common+0x26>
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	0699      	lsls	r1, r3, #26
 8005c62:	bf42      	ittt	mi
 8005c64:	6833      	ldrmi	r3, [r6, #0]
 8005c66:	3302      	addmi	r3, #2
 8005c68:	6033      	strmi	r3, [r6, #0]
 8005c6a:	6825      	ldr	r5, [r4, #0]
 8005c6c:	f015 0506 	ands.w	r5, r5, #6
 8005c70:	d106      	bne.n	8005c80 <_printf_common+0x48>
 8005c72:	f104 0a19 	add.w	sl, r4, #25
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	6832      	ldr	r2, [r6, #0]
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	dc26      	bgt.n	8005cce <_printf_common+0x96>
 8005c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c84:	1e13      	subs	r3, r2, #0
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	0692      	lsls	r2, r2, #26
 8005c8e:	d42b      	bmi.n	8005ce8 <_printf_common+0xb0>
 8005c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c94:	4649      	mov	r1, r9
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d01e      	beq.n	8005cdc <_printf_common+0xa4>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	6922      	ldr	r2, [r4, #16]
 8005ca2:	f003 0306 	and.w	r3, r3, #6
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	bf02      	ittt	eq
 8005caa:	68e5      	ldreq	r5, [r4, #12]
 8005cac:	6833      	ldreq	r3, [r6, #0]
 8005cae:	1aed      	subeq	r5, r5, r3
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	bf0c      	ite	eq
 8005cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb8:	2500      	movne	r5, #0
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	bfc4      	itt	gt
 8005cbe:	1a9b      	subgt	r3, r3, r2
 8005cc0:	18ed      	addgt	r5, r5, r3
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	341a      	adds	r4, #26
 8005cc6:	42b5      	cmp	r5, r6
 8005cc8:	d11a      	bne.n	8005d00 <_printf_common+0xc8>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e008      	b.n	8005ce0 <_printf_common+0xa8>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	47c0      	blx	r8
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d103      	bne.n	8005ce4 <_printf_common+0xac>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	e7c6      	b.n	8005c76 <_printf_common+0x3e>
 8005ce8:	18e1      	adds	r1, r4, r3
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	2030      	movs	r0, #48	; 0x30
 8005cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cf2:	4422      	add	r2, r4
 8005cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	e7c7      	b.n	8005c90 <_printf_common+0x58>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4622      	mov	r2, r4
 8005d04:	4649      	mov	r1, r9
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c0      	blx	r8
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d0e6      	beq.n	8005cdc <_printf_common+0xa4>
 8005d0e:	3601      	adds	r6, #1
 8005d10:	e7d9      	b.n	8005cc6 <_printf_common+0x8e>
	...

08005d14 <_printf_i>:
 8005d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	7e0f      	ldrb	r7, [r1, #24]
 8005d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d1c:	2f78      	cmp	r7, #120	; 0x78
 8005d1e:	4691      	mov	r9, r2
 8005d20:	4680      	mov	r8, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	469a      	mov	sl, r3
 8005d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d2a:	d807      	bhi.n	8005d3c <_printf_i+0x28>
 8005d2c:	2f62      	cmp	r7, #98	; 0x62
 8005d2e:	d80a      	bhi.n	8005d46 <_printf_i+0x32>
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	f000 80d4 	beq.w	8005ede <_printf_i+0x1ca>
 8005d36:	2f58      	cmp	r7, #88	; 0x58
 8005d38:	f000 80c0 	beq.w	8005ebc <_printf_i+0x1a8>
 8005d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d44:	e03a      	b.n	8005dbc <_printf_i+0xa8>
 8005d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d4a:	2b15      	cmp	r3, #21
 8005d4c:	d8f6      	bhi.n	8005d3c <_printf_i+0x28>
 8005d4e:	a101      	add	r1, pc, #4	; (adr r1, 8005d54 <_printf_i+0x40>)
 8005d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005dc1 	.word	0x08005dc1
 8005d5c:	08005d3d 	.word	0x08005d3d
 8005d60:	08005d3d 	.word	0x08005d3d
 8005d64:	08005d3d 	.word	0x08005d3d
 8005d68:	08005d3d 	.word	0x08005d3d
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005d3d 	.word	0x08005d3d
 8005d74:	08005d3d 	.word	0x08005d3d
 8005d78:	08005d3d 	.word	0x08005d3d
 8005d7c:	08005d3d 	.word	0x08005d3d
 8005d80:	08005ec5 	.word	0x08005ec5
 8005d84:	08005ded 	.word	0x08005ded
 8005d88:	08005e7f 	.word	0x08005e7f
 8005d8c:	08005d3d 	.word	0x08005d3d
 8005d90:	08005d3d 	.word	0x08005d3d
 8005d94:	08005ee7 	.word	0x08005ee7
 8005d98:	08005d3d 	.word	0x08005d3d
 8005d9c:	08005ded 	.word	0x08005ded
 8005da0:	08005d3d 	.word	0x08005d3d
 8005da4:	08005d3d 	.word	0x08005d3d
 8005da8:	08005e87 	.word	0x08005e87
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	602a      	str	r2, [r5, #0]
 8005db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e09f      	b.n	8005f00 <_printf_i+0x1ec>
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	682b      	ldr	r3, [r5, #0]
 8005dc4:	0607      	lsls	r7, r0, #24
 8005dc6:	f103 0104 	add.w	r1, r3, #4
 8005dca:	6029      	str	r1, [r5, #0]
 8005dcc:	d501      	bpl.n	8005dd2 <_printf_i+0xbe>
 8005dce:	681e      	ldr	r6, [r3, #0]
 8005dd0:	e003      	b.n	8005dda <_printf_i+0xc6>
 8005dd2:	0646      	lsls	r6, r0, #25
 8005dd4:	d5fb      	bpl.n	8005dce <_printf_i+0xba>
 8005dd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	da03      	bge.n	8005de6 <_printf_i+0xd2>
 8005dde:	232d      	movs	r3, #45	; 0x2d
 8005de0:	4276      	negs	r6, r6
 8005de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de6:	485a      	ldr	r0, [pc, #360]	; (8005f50 <_printf_i+0x23c>)
 8005de8:	230a      	movs	r3, #10
 8005dea:	e012      	b.n	8005e12 <_printf_i+0xfe>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	1d19      	adds	r1, r3, #4
 8005df2:	6029      	str	r1, [r5, #0]
 8005df4:	0605      	lsls	r5, r0, #24
 8005df6:	d501      	bpl.n	8005dfc <_printf_i+0xe8>
 8005df8:	681e      	ldr	r6, [r3, #0]
 8005dfa:	e002      	b.n	8005e02 <_printf_i+0xee>
 8005dfc:	0641      	lsls	r1, r0, #25
 8005dfe:	d5fb      	bpl.n	8005df8 <_printf_i+0xe4>
 8005e00:	881e      	ldrh	r6, [r3, #0]
 8005e02:	4853      	ldr	r0, [pc, #332]	; (8005f50 <_printf_i+0x23c>)
 8005e04:	2f6f      	cmp	r7, #111	; 0x6f
 8005e06:	bf0c      	ite	eq
 8005e08:	2308      	moveq	r3, #8
 8005e0a:	230a      	movne	r3, #10
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e12:	6865      	ldr	r5, [r4, #4]
 8005e14:	60a5      	str	r5, [r4, #8]
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	bfa2      	ittt	ge
 8005e1a:	6821      	ldrge	r1, [r4, #0]
 8005e1c:	f021 0104 	bicge.w	r1, r1, #4
 8005e20:	6021      	strge	r1, [r4, #0]
 8005e22:	b90e      	cbnz	r6, 8005e28 <_printf_i+0x114>
 8005e24:	2d00      	cmp	r5, #0
 8005e26:	d04b      	beq.n	8005ec0 <_printf_i+0x1ac>
 8005e28:	4615      	mov	r5, r2
 8005e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e32:	5dc7      	ldrb	r7, [r0, r7]
 8005e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e38:	4637      	mov	r7, r6
 8005e3a:	42bb      	cmp	r3, r7
 8005e3c:	460e      	mov	r6, r1
 8005e3e:	d9f4      	bls.n	8005e2a <_printf_i+0x116>
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d10b      	bne.n	8005e5c <_printf_i+0x148>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	07de      	lsls	r6, r3, #31
 8005e48:	d508      	bpl.n	8005e5c <_printf_i+0x148>
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	6861      	ldr	r1, [r4, #4]
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	bfde      	ittt	le
 8005e52:	2330      	movle	r3, #48	; 0x30
 8005e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e5c:	1b52      	subs	r2, r2, r5
 8005e5e:	6122      	str	r2, [r4, #16]
 8005e60:	f8cd a000 	str.w	sl, [sp]
 8005e64:	464b      	mov	r3, r9
 8005e66:	aa03      	add	r2, sp, #12
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7ff fee4 	bl	8005c38 <_printf_common>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d14a      	bne.n	8005f0a <_printf_i+0x1f6>
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	b004      	add	sp, #16
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f043 0320 	orr.w	r3, r3, #32
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	4833      	ldr	r0, [pc, #204]	; (8005f54 <_printf_i+0x240>)
 8005e88:	2778      	movs	r7, #120	; 0x78
 8005e8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	6829      	ldr	r1, [r5, #0]
 8005e92:	061f      	lsls	r7, r3, #24
 8005e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e98:	d402      	bmi.n	8005ea0 <_printf_i+0x18c>
 8005e9a:	065f      	lsls	r7, r3, #25
 8005e9c:	bf48      	it	mi
 8005e9e:	b2b6      	uxthmi	r6, r6
 8005ea0:	07df      	lsls	r7, r3, #31
 8005ea2:	bf48      	it	mi
 8005ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea8:	6029      	str	r1, [r5, #0]
 8005eaa:	bf48      	it	mi
 8005eac:	6023      	strmi	r3, [r4, #0]
 8005eae:	b91e      	cbnz	r6, 8005eb8 <_printf_i+0x1a4>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	f023 0320 	bic.w	r3, r3, #32
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	2310      	movs	r3, #16
 8005eba:	e7a7      	b.n	8005e0c <_printf_i+0xf8>
 8005ebc:	4824      	ldr	r0, [pc, #144]	; (8005f50 <_printf_i+0x23c>)
 8005ebe:	e7e4      	b.n	8005e8a <_printf_i+0x176>
 8005ec0:	4615      	mov	r5, r2
 8005ec2:	e7bd      	b.n	8005e40 <_printf_i+0x12c>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	6826      	ldr	r6, [r4, #0]
 8005ec8:	6961      	ldr	r1, [r4, #20]
 8005eca:	1d18      	adds	r0, r3, #4
 8005ecc:	6028      	str	r0, [r5, #0]
 8005ece:	0635      	lsls	r5, r6, #24
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_i+0x1c4>
 8005ed4:	6019      	str	r1, [r3, #0]
 8005ed6:	e002      	b.n	8005ede <_printf_i+0x1ca>
 8005ed8:	0670      	lsls	r0, r6, #25
 8005eda:	d5fb      	bpl.n	8005ed4 <_printf_i+0x1c0>
 8005edc:	8019      	strh	r1, [r3, #0]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	4615      	mov	r5, r2
 8005ee4:	e7bc      	b.n	8005e60 <_printf_i+0x14c>
 8005ee6:	682b      	ldr	r3, [r5, #0]
 8005ee8:	1d1a      	adds	r2, r3, #4
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	681d      	ldr	r5, [r3, #0]
 8005eee:	6862      	ldr	r2, [r4, #4]
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f7fa f98c 	bl	8000210 <memchr>
 8005ef8:	b108      	cbz	r0, 8005efe <_printf_i+0x1ea>
 8005efa:	1b40      	subs	r0, r0, r5
 8005efc:	6060      	str	r0, [r4, #4]
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	2300      	movs	r3, #0
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f08:	e7aa      	b.n	8005e60 <_printf_i+0x14c>
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4640      	mov	r0, r8
 8005f12:	47d0      	blx	sl
 8005f14:	3001      	adds	r0, #1
 8005f16:	d0ad      	beq.n	8005e74 <_printf_i+0x160>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	079b      	lsls	r3, r3, #30
 8005f1c:	d413      	bmi.n	8005f46 <_printf_i+0x232>
 8005f1e:	68e0      	ldr	r0, [r4, #12]
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	4298      	cmp	r0, r3
 8005f24:	bfb8      	it	lt
 8005f26:	4618      	movlt	r0, r3
 8005f28:	e7a6      	b.n	8005e78 <_printf_i+0x164>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d09d      	beq.n	8005e74 <_printf_i+0x160>
 8005f38:	3501      	adds	r5, #1
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	9903      	ldr	r1, [sp, #12]
 8005f3e:	1a5b      	subs	r3, r3, r1
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dcf2      	bgt.n	8005f2a <_printf_i+0x216>
 8005f44:	e7eb      	b.n	8005f1e <_printf_i+0x20a>
 8005f46:	2500      	movs	r5, #0
 8005f48:	f104 0619 	add.w	r6, r4, #25
 8005f4c:	e7f5      	b.n	8005f3a <_printf_i+0x226>
 8005f4e:	bf00      	nop
 8005f50:	080083a6 	.word	0x080083a6
 8005f54:	080083b7 	.word	0x080083b7

08005f58 <std>:
 8005f58:	2300      	movs	r3, #0
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f66:	6083      	str	r3, [r0, #8]
 8005f68:	8181      	strh	r1, [r0, #12]
 8005f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f6c:	81c2      	strh	r2, [r0, #14]
 8005f6e:	6183      	str	r3, [r0, #24]
 8005f70:	4619      	mov	r1, r3
 8005f72:	2208      	movs	r2, #8
 8005f74:	305c      	adds	r0, #92	; 0x5c
 8005f76:	f000 f914 	bl	80061a2 <memset>
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <std+0x58>)
 8005f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <std+0x5c>)
 8005f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <std+0x60>)
 8005f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <std+0x64>)
 8005f88:	6323      	str	r3, [r4, #48]	; 0x30
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <std+0x68>)
 8005f8c:	6224      	str	r4, [r4, #32]
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	d006      	beq.n	8005fa0 <std+0x48>
 8005f92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f96:	4294      	cmp	r4, r2
 8005f98:	d002      	beq.n	8005fa0 <std+0x48>
 8005f9a:	33d0      	adds	r3, #208	; 0xd0
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d105      	bne.n	8005fac <std+0x54>
 8005fa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa8:	f000 b9cc 	b.w	8006344 <__retarget_lock_init_recursive>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop
 8005fb0:	0800611d 	.word	0x0800611d
 8005fb4:	0800613f 	.word	0x0800613f
 8005fb8:	08006177 	.word	0x08006177
 8005fbc:	0800619b 	.word	0x0800619b
 8005fc0:	20000430 	.word	0x20000430

08005fc4 <stdio_exit_handler>:
 8005fc4:	4a02      	ldr	r2, [pc, #8]	; (8005fd0 <stdio_exit_handler+0xc>)
 8005fc6:	4903      	ldr	r1, [pc, #12]	; (8005fd4 <stdio_exit_handler+0x10>)
 8005fc8:	4803      	ldr	r0, [pc, #12]	; (8005fd8 <stdio_exit_handler+0x14>)
 8005fca:	f000 b869 	b.w	80060a0 <_fwalk_sglue>
 8005fce:	bf00      	nop
 8005fd0:	2000000c 	.word	0x2000000c
 8005fd4:	08007ba9 	.word	0x08007ba9
 8005fd8:	20000018 	.word	0x20000018

08005fdc <cleanup_stdio>:
 8005fdc:	6841      	ldr	r1, [r0, #4]
 8005fde:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <cleanup_stdio+0x34>)
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	b510      	push	{r4, lr}
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	d001      	beq.n	8005fec <cleanup_stdio+0x10>
 8005fe8:	f001 fdde 	bl	8007ba8 <_fflush_r>
 8005fec:	68a1      	ldr	r1, [r4, #8]
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <cleanup_stdio+0x38>)
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d002      	beq.n	8005ffa <cleanup_stdio+0x1e>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f001 fdd7 	bl	8007ba8 <_fflush_r>
 8005ffa:	68e1      	ldr	r1, [r4, #12]
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <cleanup_stdio+0x3c>)
 8005ffe:	4299      	cmp	r1, r3
 8006000:	d004      	beq.n	800600c <cleanup_stdio+0x30>
 8006002:	4620      	mov	r0, r4
 8006004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006008:	f001 bdce 	b.w	8007ba8 <_fflush_r>
 800600c:	bd10      	pop	{r4, pc}
 800600e:	bf00      	nop
 8006010:	20000430 	.word	0x20000430
 8006014:	20000498 	.word	0x20000498
 8006018:	20000500 	.word	0x20000500

0800601c <global_stdio_init.part.0>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <global_stdio_init.part.0+0x30>)
 8006020:	4c0b      	ldr	r4, [pc, #44]	; (8006050 <global_stdio_init.part.0+0x34>)
 8006022:	4a0c      	ldr	r2, [pc, #48]	; (8006054 <global_stdio_init.part.0+0x38>)
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	4620      	mov	r0, r4
 8006028:	2200      	movs	r2, #0
 800602a:	2104      	movs	r1, #4
 800602c:	f7ff ff94 	bl	8005f58 <std>
 8006030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006034:	2201      	movs	r2, #1
 8006036:	2109      	movs	r1, #9
 8006038:	f7ff ff8e 	bl	8005f58 <std>
 800603c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006040:	2202      	movs	r2, #2
 8006042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006046:	2112      	movs	r1, #18
 8006048:	f7ff bf86 	b.w	8005f58 <std>
 800604c:	20000568 	.word	0x20000568
 8006050:	20000430 	.word	0x20000430
 8006054:	08005fc5 	.word	0x08005fc5

08006058 <__sfp_lock_acquire>:
 8006058:	4801      	ldr	r0, [pc, #4]	; (8006060 <__sfp_lock_acquire+0x8>)
 800605a:	f000 b974 	b.w	8006346 <__retarget_lock_acquire_recursive>
 800605e:	bf00      	nop
 8006060:	20000571 	.word	0x20000571

08006064 <__sfp_lock_release>:
 8006064:	4801      	ldr	r0, [pc, #4]	; (800606c <__sfp_lock_release+0x8>)
 8006066:	f000 b96f 	b.w	8006348 <__retarget_lock_release_recursive>
 800606a:	bf00      	nop
 800606c:	20000571 	.word	0x20000571

08006070 <__sinit>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	f7ff fff0 	bl	8006058 <__sfp_lock_acquire>
 8006078:	6a23      	ldr	r3, [r4, #32]
 800607a:	b11b      	cbz	r3, 8006084 <__sinit+0x14>
 800607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006080:	f7ff bff0 	b.w	8006064 <__sfp_lock_release>
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <__sinit+0x28>)
 8006086:	6223      	str	r3, [r4, #32]
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <__sinit+0x2c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f5      	bne.n	800607c <__sinit+0xc>
 8006090:	f7ff ffc4 	bl	800601c <global_stdio_init.part.0>
 8006094:	e7f2      	b.n	800607c <__sinit+0xc>
 8006096:	bf00      	nop
 8006098:	08005fdd 	.word	0x08005fdd
 800609c:	20000568 	.word	0x20000568

080060a0 <_fwalk_sglue>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	4607      	mov	r7, r0
 80060a6:	4688      	mov	r8, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	2600      	movs	r6, #0
 80060ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060b0:	f1b9 0901 	subs.w	r9, r9, #1
 80060b4:	d505      	bpl.n	80060c2 <_fwalk_sglue+0x22>
 80060b6:	6824      	ldr	r4, [r4, #0]
 80060b8:	2c00      	cmp	r4, #0
 80060ba:	d1f7      	bne.n	80060ac <_fwalk_sglue+0xc>
 80060bc:	4630      	mov	r0, r6
 80060be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d907      	bls.n	80060d8 <_fwalk_sglue+0x38>
 80060c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060cc:	3301      	adds	r3, #1
 80060ce:	d003      	beq.n	80060d8 <_fwalk_sglue+0x38>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c0      	blx	r8
 80060d6:	4306      	orrs	r6, r0
 80060d8:	3568      	adds	r5, #104	; 0x68
 80060da:	e7e9      	b.n	80060b0 <_fwalk_sglue+0x10>

080060dc <siprintf>:
 80060dc:	b40e      	push	{r1, r2, r3}
 80060de:	b500      	push	{lr}
 80060e0:	b09c      	sub	sp, #112	; 0x70
 80060e2:	ab1d      	add	r3, sp, #116	; 0x74
 80060e4:	9002      	str	r0, [sp, #8]
 80060e6:	9006      	str	r0, [sp, #24]
 80060e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060ec:	4809      	ldr	r0, [pc, #36]	; (8006114 <siprintf+0x38>)
 80060ee:	9107      	str	r1, [sp, #28]
 80060f0:	9104      	str	r1, [sp, #16]
 80060f2:	4909      	ldr	r1, [pc, #36]	; (8006118 <siprintf+0x3c>)
 80060f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f8:	9105      	str	r1, [sp, #20]
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	a902      	add	r1, sp, #8
 8006100:	f001 fbce 	bl	80078a0 <_svfiprintf_r>
 8006104:	9b02      	ldr	r3, [sp, #8]
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	b01c      	add	sp, #112	; 0x70
 800610c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006110:	b003      	add	sp, #12
 8006112:	4770      	bx	lr
 8006114:	20000064 	.word	0x20000064
 8006118:	ffff0208 	.word	0xffff0208

0800611c <__sread>:
 800611c:	b510      	push	{r4, lr}
 800611e:	460c      	mov	r4, r1
 8006120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006124:	f000 f89c 	bl	8006260 <_read_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	bfab      	itete	ge
 800612c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800612e:	89a3      	ldrhlt	r3, [r4, #12]
 8006130:	181b      	addge	r3, r3, r0
 8006132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006136:	bfac      	ite	ge
 8006138:	6563      	strge	r3, [r4, #84]	; 0x54
 800613a:	81a3      	strhlt	r3, [r4, #12]
 800613c:	bd10      	pop	{r4, pc}

0800613e <__swrite>:
 800613e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	461f      	mov	r7, r3
 8006144:	898b      	ldrh	r3, [r1, #12]
 8006146:	05db      	lsls	r3, r3, #23
 8006148:	4605      	mov	r5, r0
 800614a:	460c      	mov	r4, r1
 800614c:	4616      	mov	r6, r2
 800614e:	d505      	bpl.n	800615c <__swrite+0x1e>
 8006150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006154:	2302      	movs	r3, #2
 8006156:	2200      	movs	r2, #0
 8006158:	f000 f870 	bl	800623c <_lseek_r>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	4632      	mov	r2, r6
 800616a:	463b      	mov	r3, r7
 800616c:	4628      	mov	r0, r5
 800616e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006172:	f000 b8ab 	b.w	80062cc <_write_r>

08006176 <__sseek>:
 8006176:	b510      	push	{r4, lr}
 8006178:	460c      	mov	r4, r1
 800617a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617e:	f000 f85d 	bl	800623c <_lseek_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	bf15      	itete	ne
 8006188:	6560      	strne	r0, [r4, #84]	; 0x54
 800618a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800618e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006192:	81a3      	strheq	r3, [r4, #12]
 8006194:	bf18      	it	ne
 8006196:	81a3      	strhne	r3, [r4, #12]
 8006198:	bd10      	pop	{r4, pc}

0800619a <__sclose>:
 800619a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619e:	f000 b83d 	b.w	800621c <_close_r>

080061a2 <memset>:
 80061a2:	4402      	add	r2, r0
 80061a4:	4603      	mov	r3, r0
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d100      	bne.n	80061ac <memset+0xa>
 80061aa:	4770      	bx	lr
 80061ac:	f803 1b01 	strb.w	r1, [r3], #1
 80061b0:	e7f9      	b.n	80061a6 <memset+0x4>

080061b2 <_raise_r>:
 80061b2:	291f      	cmp	r1, #31
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4604      	mov	r4, r0
 80061b8:	460d      	mov	r5, r1
 80061ba:	d904      	bls.n	80061c6 <_raise_r+0x14>
 80061bc:	2316      	movs	r3, #22
 80061be:	6003      	str	r3, [r0, #0]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80061c8:	b112      	cbz	r2, 80061d0 <_raise_r+0x1e>
 80061ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061ce:	b94b      	cbnz	r3, 80061e4 <_raise_r+0x32>
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 f869 	bl	80062a8 <_getpid_r>
 80061d6:	462a      	mov	r2, r5
 80061d8:	4601      	mov	r1, r0
 80061da:	4620      	mov	r0, r4
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b850 	b.w	8006284 <_kill_r>
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d00a      	beq.n	80061fe <_raise_r+0x4c>
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	d103      	bne.n	80061f4 <_raise_r+0x42>
 80061ec:	2316      	movs	r3, #22
 80061ee:	6003      	str	r3, [r0, #0]
 80061f0:	2001      	movs	r0, #1
 80061f2:	e7e7      	b.n	80061c4 <_raise_r+0x12>
 80061f4:	2400      	movs	r4, #0
 80061f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061fa:	4628      	mov	r0, r5
 80061fc:	4798      	blx	r3
 80061fe:	2000      	movs	r0, #0
 8006200:	e7e0      	b.n	80061c4 <_raise_r+0x12>
	...

08006204 <raise>:
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <raise+0xc>)
 8006206:	4601      	mov	r1, r0
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	f7ff bfd2 	b.w	80061b2 <_raise_r>
 800620e:	bf00      	nop
 8006210:	20000064 	.word	0x20000064

08006214 <_localeconv_r>:
 8006214:	4800      	ldr	r0, [pc, #0]	; (8006218 <_localeconv_r+0x4>)
 8006216:	4770      	bx	lr
 8006218:	20000158 	.word	0x20000158

0800621c <_close_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d06      	ldr	r5, [pc, #24]	; (8006238 <_close_r+0x1c>)
 8006220:	2300      	movs	r3, #0
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	f7fc fd0b 	bl	8002c42 <_close>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_close_r+0x1a>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_close_r+0x1a>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	2000056c 	.word	0x2000056c

0800623c <_lseek_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d07      	ldr	r5, [pc, #28]	; (800625c <_lseek_r+0x20>)
 8006240:	4604      	mov	r4, r0
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
 8006246:	2200      	movs	r2, #0
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fc fd20 	bl	8002c90 <_lseek>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_lseek_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_lseek_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	2000056c 	.word	0x2000056c

08006260 <_read_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d07      	ldr	r5, [pc, #28]	; (8006280 <_read_r+0x20>)
 8006264:	4604      	mov	r4, r0
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	2200      	movs	r2, #0
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fc fcae 	bl	8002bd0 <_read>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_read_r+0x1e>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_read_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	2000056c 	.word	0x2000056c

08006284 <_kill_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	; (80062a4 <_kill_r+0x20>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	602b      	str	r3, [r5, #0]
 8006292:	f7fc fc83 	bl	8002b9c <_kill>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d102      	bne.n	80062a0 <_kill_r+0x1c>
 800629a:	682b      	ldr	r3, [r5, #0]
 800629c:	b103      	cbz	r3, 80062a0 <_kill_r+0x1c>
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	2000056c 	.word	0x2000056c

080062a8 <_getpid_r>:
 80062a8:	f7fc bc70 	b.w	8002b8c <_getpid>

080062ac <_sbrk_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d06      	ldr	r5, [pc, #24]	; (80062c8 <_sbrk_r+0x1c>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fc fcf8 	bl	8002cac <_sbrk>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_sbrk_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_sbrk_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	2000056c 	.word	0x2000056c

080062cc <_write_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	; (80062ec <_write_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fc fc95 	bl	8002c0a <_write>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_write_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_write_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	2000056c 	.word	0x2000056c

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000064 	.word	0x20000064

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f001 ff86 	bl	8008220 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	0800870c 	.word	0x0800870c
 8006338:	0800870c 	.word	0x0800870c
 800633c:	0800870c 	.word	0x0800870c
 8006340:	08008714 	.word	0x08008714

08006344 <__retarget_lock_init_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_acquire_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_release_recursive>:
 8006348:	4770      	bx	lr

0800634a <memcpy>:
 800634a:	440a      	add	r2, r1
 800634c:	4291      	cmp	r1, r2
 800634e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006352:	d100      	bne.n	8006356 <memcpy+0xc>
 8006354:	4770      	bx	lr
 8006356:	b510      	push	{r4, lr}
 8006358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800635c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006360:	4291      	cmp	r1, r2
 8006362:	d1f9      	bne.n	8006358 <memcpy+0xe>
 8006364:	bd10      	pop	{r4, pc}

08006366 <quorem>:
 8006366:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	6903      	ldr	r3, [r0, #16]
 800636c:	690c      	ldr	r4, [r1, #16]
 800636e:	42a3      	cmp	r3, r4
 8006370:	4607      	mov	r7, r0
 8006372:	db7e      	blt.n	8006472 <quorem+0x10c>
 8006374:	3c01      	subs	r4, #1
 8006376:	f101 0814 	add.w	r8, r1, #20
 800637a:	f100 0514 	add.w	r5, r0, #20
 800637e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800638c:	3301      	adds	r3, #1
 800638e:	429a      	cmp	r2, r3
 8006390:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006394:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006398:	fbb2 f6f3 	udiv	r6, r2, r3
 800639c:	d331      	bcc.n	8006402 <quorem+0x9c>
 800639e:	f04f 0e00 	mov.w	lr, #0
 80063a2:	4640      	mov	r0, r8
 80063a4:	46ac      	mov	ip, r5
 80063a6:	46f2      	mov	sl, lr
 80063a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80063ac:	b293      	uxth	r3, r2
 80063ae:	fb06 e303 	mla	r3, r6, r3, lr
 80063b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063b6:	0c1a      	lsrs	r2, r3, #16
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ebaa 0303 	sub.w	r3, sl, r3
 80063be:	f8dc a000 	ldr.w	sl, [ip]
 80063c2:	fa13 f38a 	uxtah	r3, r3, sl
 80063c6:	fb06 220e 	mla	r2, r6, lr, r2
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063d2:	b292      	uxth	r2, r2
 80063d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80063e0:	4581      	cmp	r9, r0
 80063e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063e6:	f84c 3b04 	str.w	r3, [ip], #4
 80063ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063ee:	d2db      	bcs.n	80063a8 <quorem+0x42>
 80063f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80063f4:	b92b      	cbnz	r3, 8006402 <quorem+0x9c>
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	3b04      	subs	r3, #4
 80063fa:	429d      	cmp	r5, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	d32c      	bcc.n	800645a <quorem+0xf4>
 8006400:	613c      	str	r4, [r7, #16]
 8006402:	4638      	mov	r0, r7
 8006404:	f001 f8f2 	bl	80075ec <__mcmp>
 8006408:	2800      	cmp	r0, #0
 800640a:	db22      	blt.n	8006452 <quorem+0xec>
 800640c:	3601      	adds	r6, #1
 800640e:	4629      	mov	r1, r5
 8006410:	2000      	movs	r0, #0
 8006412:	f858 2b04 	ldr.w	r2, [r8], #4
 8006416:	f8d1 c000 	ldr.w	ip, [r1]
 800641a:	b293      	uxth	r3, r2
 800641c:	1ac3      	subs	r3, r0, r3
 800641e:	0c12      	lsrs	r2, r2, #16
 8006420:	fa13 f38c 	uxtah	r3, r3, ip
 8006424:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800642c:	b29b      	uxth	r3, r3
 800642e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006432:	45c1      	cmp	r9, r8
 8006434:	f841 3b04 	str.w	r3, [r1], #4
 8006438:	ea4f 4022 	mov.w	r0, r2, asr #16
 800643c:	d2e9      	bcs.n	8006412 <quorem+0xac>
 800643e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006446:	b922      	cbnz	r2, 8006452 <quorem+0xec>
 8006448:	3b04      	subs	r3, #4
 800644a:	429d      	cmp	r5, r3
 800644c:	461a      	mov	r2, r3
 800644e:	d30a      	bcc.n	8006466 <quorem+0x100>
 8006450:	613c      	str	r4, [r7, #16]
 8006452:	4630      	mov	r0, r6
 8006454:	b003      	add	sp, #12
 8006456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	3b04      	subs	r3, #4
 800645e:	2a00      	cmp	r2, #0
 8006460:	d1ce      	bne.n	8006400 <quorem+0x9a>
 8006462:	3c01      	subs	r4, #1
 8006464:	e7c9      	b.n	80063fa <quorem+0x94>
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	3b04      	subs	r3, #4
 800646a:	2a00      	cmp	r2, #0
 800646c:	d1f0      	bne.n	8006450 <quorem+0xea>
 800646e:	3c01      	subs	r4, #1
 8006470:	e7eb      	b.n	800644a <quorem+0xe4>
 8006472:	2000      	movs	r0, #0
 8006474:	e7ee      	b.n	8006454 <quorem+0xee>
	...

08006478 <_dtoa_r>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	ed2d 8b04 	vpush	{d8-d9}
 8006480:	69c5      	ldr	r5, [r0, #28]
 8006482:	b093      	sub	sp, #76	; 0x4c
 8006484:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006488:	ec57 6b10 	vmov	r6, r7, d0
 800648c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006490:	9107      	str	r1, [sp, #28]
 8006492:	4604      	mov	r4, r0
 8006494:	920a      	str	r2, [sp, #40]	; 0x28
 8006496:	930d      	str	r3, [sp, #52]	; 0x34
 8006498:	b975      	cbnz	r5, 80064b8 <_dtoa_r+0x40>
 800649a:	2010      	movs	r0, #16
 800649c:	f7ff f83a 	bl	8005514 <malloc>
 80064a0:	4602      	mov	r2, r0
 80064a2:	61e0      	str	r0, [r4, #28]
 80064a4:	b920      	cbnz	r0, 80064b0 <_dtoa_r+0x38>
 80064a6:	4bae      	ldr	r3, [pc, #696]	; (8006760 <_dtoa_r+0x2e8>)
 80064a8:	21ef      	movs	r1, #239	; 0xef
 80064aa:	48ae      	ldr	r0, [pc, #696]	; (8006764 <_dtoa_r+0x2ec>)
 80064ac:	f001 fbbe 	bl	8007c2c <__assert_func>
 80064b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064b4:	6005      	str	r5, [r0, #0]
 80064b6:	60c5      	str	r5, [r0, #12]
 80064b8:	69e3      	ldr	r3, [r4, #28]
 80064ba:	6819      	ldr	r1, [r3, #0]
 80064bc:	b151      	cbz	r1, 80064d4 <_dtoa_r+0x5c>
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	604a      	str	r2, [r1, #4]
 80064c2:	2301      	movs	r3, #1
 80064c4:	4093      	lsls	r3, r2
 80064c6:	608b      	str	r3, [r1, #8]
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fe53 	bl	8007174 <_Bfree>
 80064ce:	69e3      	ldr	r3, [r4, #28]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	1e3b      	subs	r3, r7, #0
 80064d6:	bfbb      	ittet	lt
 80064d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064dc:	9303      	strlt	r3, [sp, #12]
 80064de:	2300      	movge	r3, #0
 80064e0:	2201      	movlt	r2, #1
 80064e2:	bfac      	ite	ge
 80064e4:	f8c8 3000 	strge.w	r3, [r8]
 80064e8:	f8c8 2000 	strlt.w	r2, [r8]
 80064ec:	4b9e      	ldr	r3, [pc, #632]	; (8006768 <_dtoa_r+0x2f0>)
 80064ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064f2:	ea33 0308 	bics.w	r3, r3, r8
 80064f6:	d11b      	bne.n	8006530 <_dtoa_r+0xb8>
 80064f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006504:	4333      	orrs	r3, r6
 8006506:	f000 8593 	beq.w	8007030 <_dtoa_r+0xbb8>
 800650a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800650c:	b963      	cbnz	r3, 8006528 <_dtoa_r+0xb0>
 800650e:	4b97      	ldr	r3, [pc, #604]	; (800676c <_dtoa_r+0x2f4>)
 8006510:	e027      	b.n	8006562 <_dtoa_r+0xea>
 8006512:	4b97      	ldr	r3, [pc, #604]	; (8006770 <_dtoa_r+0x2f8>)
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	9800      	ldr	r0, [sp, #0]
 800651e:	b013      	add	sp, #76	; 0x4c
 8006520:	ecbd 8b04 	vpop	{d8-d9}
 8006524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006528:	4b90      	ldr	r3, [pc, #576]	; (800676c <_dtoa_r+0x2f4>)
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	3303      	adds	r3, #3
 800652e:	e7f3      	b.n	8006518 <_dtoa_r+0xa0>
 8006530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	ec51 0b17 	vmov	r0, r1, d7
 800653a:	eeb0 8a47 	vmov.f32	s16, s14
 800653e:	eef0 8a67 	vmov.f32	s17, s15
 8006542:	2300      	movs	r3, #0
 8006544:	f7fa fae0 	bl	8000b08 <__aeabi_dcmpeq>
 8006548:	4681      	mov	r9, r0
 800654a:	b160      	cbz	r0, 8006566 <_dtoa_r+0xee>
 800654c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800654e:	2301      	movs	r3, #1
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8568 	beq.w	800702a <_dtoa_r+0xbb2>
 800655a:	4b86      	ldr	r3, [pc, #536]	; (8006774 <_dtoa_r+0x2fc>)
 800655c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	e7da      	b.n	800651c <_dtoa_r+0xa4>
 8006566:	aa10      	add	r2, sp, #64	; 0x40
 8006568:	a911      	add	r1, sp, #68	; 0x44
 800656a:	4620      	mov	r0, r4
 800656c:	eeb0 0a48 	vmov.f32	s0, s16
 8006570:	eef0 0a68 	vmov.f32	s1, s17
 8006574:	f001 f8e0 	bl	8007738 <__d2b>
 8006578:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800657c:	4682      	mov	sl, r0
 800657e:	2d00      	cmp	r5, #0
 8006580:	d07f      	beq.n	8006682 <_dtoa_r+0x20a>
 8006582:	ee18 3a90 	vmov	r3, s17
 8006586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800658a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800658e:	ec51 0b18 	vmov	r0, r1, d8
 8006592:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800659a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800659e:	4619      	mov	r1, r3
 80065a0:	2200      	movs	r2, #0
 80065a2:	4b75      	ldr	r3, [pc, #468]	; (8006778 <_dtoa_r+0x300>)
 80065a4:	f7f9 fe90 	bl	80002c8 <__aeabi_dsub>
 80065a8:	a367      	add	r3, pc, #412	; (adr r3, 8006748 <_dtoa_r+0x2d0>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7fa f843 	bl	8000638 <__aeabi_dmul>
 80065b2:	a367      	add	r3, pc, #412	; (adr r3, 8006750 <_dtoa_r+0x2d8>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7f9 fe88 	bl	80002cc <__adddf3>
 80065bc:	4606      	mov	r6, r0
 80065be:	4628      	mov	r0, r5
 80065c0:	460f      	mov	r7, r1
 80065c2:	f7f9 ffcf 	bl	8000564 <__aeabi_i2d>
 80065c6:	a364      	add	r3, pc, #400	; (adr r3, 8006758 <_dtoa_r+0x2e0>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7fa f834 	bl	8000638 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7f9 fe78 	bl	80002cc <__adddf3>
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	f7fa fada 	bl	8000b98 <__aeabi_d2iz>
 80065e4:	2200      	movs	r2, #0
 80065e6:	4683      	mov	fp, r0
 80065e8:	2300      	movs	r3, #0
 80065ea:	4630      	mov	r0, r6
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7fa fa95 	bl	8000b1c <__aeabi_dcmplt>
 80065f2:	b148      	cbz	r0, 8006608 <_dtoa_r+0x190>
 80065f4:	4658      	mov	r0, fp
 80065f6:	f7f9 ffb5 	bl	8000564 <__aeabi_i2d>
 80065fa:	4632      	mov	r2, r6
 80065fc:	463b      	mov	r3, r7
 80065fe:	f7fa fa83 	bl	8000b08 <__aeabi_dcmpeq>
 8006602:	b908      	cbnz	r0, 8006608 <_dtoa_r+0x190>
 8006604:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006608:	f1bb 0f16 	cmp.w	fp, #22
 800660c:	d857      	bhi.n	80066be <_dtoa_r+0x246>
 800660e:	4b5b      	ldr	r3, [pc, #364]	; (800677c <_dtoa_r+0x304>)
 8006610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	ec51 0b18 	vmov	r0, r1, d8
 800661c:	f7fa fa7e 	bl	8000b1c <__aeabi_dcmplt>
 8006620:	2800      	cmp	r0, #0
 8006622:	d04e      	beq.n	80066c2 <_dtoa_r+0x24a>
 8006624:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006628:	2300      	movs	r3, #0
 800662a:	930c      	str	r3, [sp, #48]	; 0x30
 800662c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800662e:	1b5b      	subs	r3, r3, r5
 8006630:	1e5a      	subs	r2, r3, #1
 8006632:	bf45      	ittet	mi
 8006634:	f1c3 0301 	rsbmi	r3, r3, #1
 8006638:	9305      	strmi	r3, [sp, #20]
 800663a:	2300      	movpl	r3, #0
 800663c:	2300      	movmi	r3, #0
 800663e:	9206      	str	r2, [sp, #24]
 8006640:	bf54      	ite	pl
 8006642:	9305      	strpl	r3, [sp, #20]
 8006644:	9306      	strmi	r3, [sp, #24]
 8006646:	f1bb 0f00 	cmp.w	fp, #0
 800664a:	db3c      	blt.n	80066c6 <_dtoa_r+0x24e>
 800664c:	9b06      	ldr	r3, [sp, #24]
 800664e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006652:	445b      	add	r3, fp
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	2300      	movs	r3, #0
 8006658:	9308      	str	r3, [sp, #32]
 800665a:	9b07      	ldr	r3, [sp, #28]
 800665c:	2b09      	cmp	r3, #9
 800665e:	d868      	bhi.n	8006732 <_dtoa_r+0x2ba>
 8006660:	2b05      	cmp	r3, #5
 8006662:	bfc4      	itt	gt
 8006664:	3b04      	subgt	r3, #4
 8006666:	9307      	strgt	r3, [sp, #28]
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	f1a3 0302 	sub.w	r3, r3, #2
 800666e:	bfcc      	ite	gt
 8006670:	2500      	movgt	r5, #0
 8006672:	2501      	movle	r5, #1
 8006674:	2b03      	cmp	r3, #3
 8006676:	f200 8085 	bhi.w	8006784 <_dtoa_r+0x30c>
 800667a:	e8df f003 	tbb	[pc, r3]
 800667e:	3b2e      	.short	0x3b2e
 8006680:	5839      	.short	0x5839
 8006682:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006686:	441d      	add	r5, r3
 8006688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800668c:	2b20      	cmp	r3, #32
 800668e:	bfc1      	itttt	gt
 8006690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006694:	fa08 f803 	lslgt.w	r8, r8, r3
 8006698:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800669c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80066a0:	bfd6      	itet	le
 80066a2:	f1c3 0320 	rsble	r3, r3, #32
 80066a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80066aa:	fa06 f003 	lslle.w	r0, r6, r3
 80066ae:	f7f9 ff49 	bl	8000544 <__aeabi_ui2d>
 80066b2:	2201      	movs	r2, #1
 80066b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066b8:	3d01      	subs	r5, #1
 80066ba:	920e      	str	r2, [sp, #56]	; 0x38
 80066bc:	e76f      	b.n	800659e <_dtoa_r+0x126>
 80066be:	2301      	movs	r3, #1
 80066c0:	e7b3      	b.n	800662a <_dtoa_r+0x1b2>
 80066c2:	900c      	str	r0, [sp, #48]	; 0x30
 80066c4:	e7b2      	b.n	800662c <_dtoa_r+0x1b4>
 80066c6:	9b05      	ldr	r3, [sp, #20]
 80066c8:	eba3 030b 	sub.w	r3, r3, fp
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	f1cb 0300 	rsb	r3, fp, #0
 80066d2:	9308      	str	r3, [sp, #32]
 80066d4:	2300      	movs	r3, #0
 80066d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066d8:	e7bf      	b.n	800665a <_dtoa_r+0x1e2>
 80066da:	2300      	movs	r3, #0
 80066dc:	9309      	str	r3, [sp, #36]	; 0x24
 80066de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	dc52      	bgt.n	800678a <_dtoa_r+0x312>
 80066e4:	2301      	movs	r3, #1
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	461a      	mov	r2, r3
 80066ec:	920a      	str	r2, [sp, #40]	; 0x28
 80066ee:	e00b      	b.n	8006708 <_dtoa_r+0x290>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7f3      	b.n	80066dc <_dtoa_r+0x264>
 80066f4:	2300      	movs	r3, #0
 80066f6:	9309      	str	r3, [sp, #36]	; 0x24
 80066f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fa:	445b      	add	r3, fp
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	3301      	adds	r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	bfb8      	it	lt
 8006706:	2301      	movlt	r3, #1
 8006708:	69e0      	ldr	r0, [r4, #28]
 800670a:	2100      	movs	r1, #0
 800670c:	2204      	movs	r2, #4
 800670e:	f102 0614 	add.w	r6, r2, #20
 8006712:	429e      	cmp	r6, r3
 8006714:	d93d      	bls.n	8006792 <_dtoa_r+0x31a>
 8006716:	6041      	str	r1, [r0, #4]
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fceb 	bl	80070f4 <_Balloc>
 800671e:	9000      	str	r0, [sp, #0]
 8006720:	2800      	cmp	r0, #0
 8006722:	d139      	bne.n	8006798 <_dtoa_r+0x320>
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <_dtoa_r+0x308>)
 8006726:	4602      	mov	r2, r0
 8006728:	f240 11af 	movw	r1, #431	; 0x1af
 800672c:	e6bd      	b.n	80064aa <_dtoa_r+0x32>
 800672e:	2301      	movs	r3, #1
 8006730:	e7e1      	b.n	80066f6 <_dtoa_r+0x27e>
 8006732:	2501      	movs	r5, #1
 8006734:	2300      	movs	r3, #0
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	9509      	str	r5, [sp, #36]	; 0x24
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	2200      	movs	r2, #0
 8006744:	2312      	movs	r3, #18
 8006746:	e7d1      	b.n	80066ec <_dtoa_r+0x274>
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	080083d5 	.word	0x080083d5
 8006764:	080083ec 	.word	0x080083ec
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	080083d1 	.word	0x080083d1
 8006770:	080083c8 	.word	0x080083c8
 8006774:	080083a5 	.word	0x080083a5
 8006778:	3ff80000 	.word	0x3ff80000
 800677c:	080084d8 	.word	0x080084d8
 8006780:	08008444 	.word	0x08008444
 8006784:	2301      	movs	r3, #1
 8006786:	9309      	str	r3, [sp, #36]	; 0x24
 8006788:	e7d7      	b.n	800673a <_dtoa_r+0x2c2>
 800678a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	9304      	str	r3, [sp, #16]
 8006790:	e7ba      	b.n	8006708 <_dtoa_r+0x290>
 8006792:	3101      	adds	r1, #1
 8006794:	0052      	lsls	r2, r2, #1
 8006796:	e7ba      	b.n	800670e <_dtoa_r+0x296>
 8006798:	69e3      	ldr	r3, [r4, #28]
 800679a:	9a00      	ldr	r2, [sp, #0]
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	2b0e      	cmp	r3, #14
 80067a2:	f200 80a8 	bhi.w	80068f6 <_dtoa_r+0x47e>
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	f000 80a5 	beq.w	80068f6 <_dtoa_r+0x47e>
 80067ac:	f1bb 0f00 	cmp.w	fp, #0
 80067b0:	dd38      	ble.n	8006824 <_dtoa_r+0x3ac>
 80067b2:	4bc0      	ldr	r3, [pc, #768]	; (8006ab4 <_dtoa_r+0x63c>)
 80067b4:	f00b 020f 	and.w	r2, fp, #15
 80067b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80067c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80067c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80067c8:	d019      	beq.n	80067fe <_dtoa_r+0x386>
 80067ca:	4bbb      	ldr	r3, [pc, #748]	; (8006ab8 <_dtoa_r+0x640>)
 80067cc:	ec51 0b18 	vmov	r0, r1, d8
 80067d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067d4:	f7fa f85a 	bl	800088c <__aeabi_ddiv>
 80067d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067dc:	f008 080f 	and.w	r8, r8, #15
 80067e0:	2503      	movs	r5, #3
 80067e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006ab8 <_dtoa_r+0x640>
 80067e6:	f1b8 0f00 	cmp.w	r8, #0
 80067ea:	d10a      	bne.n	8006802 <_dtoa_r+0x38a>
 80067ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f0:	4632      	mov	r2, r6
 80067f2:	463b      	mov	r3, r7
 80067f4:	f7fa f84a 	bl	800088c <__aeabi_ddiv>
 80067f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067fc:	e02b      	b.n	8006856 <_dtoa_r+0x3de>
 80067fe:	2502      	movs	r5, #2
 8006800:	e7ef      	b.n	80067e2 <_dtoa_r+0x36a>
 8006802:	f018 0f01 	tst.w	r8, #1
 8006806:	d008      	beq.n	800681a <_dtoa_r+0x3a2>
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006810:	f7f9 ff12 	bl	8000638 <__aeabi_dmul>
 8006814:	3501      	adds	r5, #1
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800681e:	f109 0908 	add.w	r9, r9, #8
 8006822:	e7e0      	b.n	80067e6 <_dtoa_r+0x36e>
 8006824:	f000 809f 	beq.w	8006966 <_dtoa_r+0x4ee>
 8006828:	f1cb 0600 	rsb	r6, fp, #0
 800682c:	4ba1      	ldr	r3, [pc, #644]	; (8006ab4 <_dtoa_r+0x63c>)
 800682e:	4fa2      	ldr	r7, [pc, #648]	; (8006ab8 <_dtoa_r+0x640>)
 8006830:	f006 020f 	and.w	r2, r6, #15
 8006834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	ec51 0b18 	vmov	r0, r1, d8
 8006840:	f7f9 fefa 	bl	8000638 <__aeabi_dmul>
 8006844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006848:	1136      	asrs	r6, r6, #4
 800684a:	2300      	movs	r3, #0
 800684c:	2502      	movs	r5, #2
 800684e:	2e00      	cmp	r6, #0
 8006850:	d17e      	bne.n	8006950 <_dtoa_r+0x4d8>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1d0      	bne.n	80067f8 <_dtoa_r+0x380>
 8006856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006858:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8084 	beq.w	800696a <_dtoa_r+0x4f2>
 8006862:	4b96      	ldr	r3, [pc, #600]	; (8006abc <_dtoa_r+0x644>)
 8006864:	2200      	movs	r2, #0
 8006866:	4640      	mov	r0, r8
 8006868:	4649      	mov	r1, r9
 800686a:	f7fa f957 	bl	8000b1c <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	d07b      	beq.n	800696a <_dtoa_r+0x4f2>
 8006872:	9b04      	ldr	r3, [sp, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d078      	beq.n	800696a <_dtoa_r+0x4f2>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	dd39      	ble.n	80068f2 <_dtoa_r+0x47a>
 800687e:	4b90      	ldr	r3, [pc, #576]	; (8006ac0 <_dtoa_r+0x648>)
 8006880:	2200      	movs	r2, #0
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 fed7 	bl	8000638 <__aeabi_dmul>
 800688a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800688e:	9e01      	ldr	r6, [sp, #4]
 8006890:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006894:	3501      	adds	r5, #1
 8006896:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800689a:	4628      	mov	r0, r5
 800689c:	f7f9 fe62 	bl	8000564 <__aeabi_i2d>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	f7f9 fec8 	bl	8000638 <__aeabi_dmul>
 80068a8:	4b86      	ldr	r3, [pc, #536]	; (8006ac4 <_dtoa_r+0x64c>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	f7f9 fd0e 	bl	80002cc <__adddf3>
 80068b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b8:	9303      	str	r3, [sp, #12]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	d158      	bne.n	8006970 <_dtoa_r+0x4f8>
 80068be:	4b82      	ldr	r3, [pc, #520]	; (8006ac8 <_dtoa_r+0x650>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	4640      	mov	r0, r8
 80068c4:	4649      	mov	r1, r9
 80068c6:	f7f9 fcff 	bl	80002c8 <__aeabi_dsub>
 80068ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ce:	4680      	mov	r8, r0
 80068d0:	4689      	mov	r9, r1
 80068d2:	f7fa f941 	bl	8000b58 <__aeabi_dcmpgt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8296 	bne.w	8006e08 <_dtoa_r+0x990>
 80068dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80068e0:	4640      	mov	r0, r8
 80068e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068e6:	4649      	mov	r1, r9
 80068e8:	f7fa f918 	bl	8000b1c <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f040 8289 	bne.w	8006e04 <_dtoa_r+0x98c>
 80068f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80068f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f2c0 814e 	blt.w	8006b9a <_dtoa_r+0x722>
 80068fe:	f1bb 0f0e 	cmp.w	fp, #14
 8006902:	f300 814a 	bgt.w	8006b9a <_dtoa_r+0x722>
 8006906:	4b6b      	ldr	r3, [pc, #428]	; (8006ab4 <_dtoa_r+0x63c>)
 8006908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800690c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	f280 80dc 	bge.w	8006ad0 <_dtoa_r+0x658>
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f300 80d8 	bgt.w	8006ad0 <_dtoa_r+0x658>
 8006920:	f040 826f 	bne.w	8006e02 <_dtoa_r+0x98a>
 8006924:	4b68      	ldr	r3, [pc, #416]	; (8006ac8 <_dtoa_r+0x650>)
 8006926:	2200      	movs	r2, #0
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7f9 fe84 	bl	8000638 <__aeabi_dmul>
 8006930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006934:	f7fa f906 	bl	8000b44 <__aeabi_dcmpge>
 8006938:	9e04      	ldr	r6, [sp, #16]
 800693a:	4637      	mov	r7, r6
 800693c:	2800      	cmp	r0, #0
 800693e:	f040 8245 	bne.w	8006dcc <_dtoa_r+0x954>
 8006942:	9d00      	ldr	r5, [sp, #0]
 8006944:	2331      	movs	r3, #49	; 0x31
 8006946:	f805 3b01 	strb.w	r3, [r5], #1
 800694a:	f10b 0b01 	add.w	fp, fp, #1
 800694e:	e241      	b.n	8006dd4 <_dtoa_r+0x95c>
 8006950:	07f2      	lsls	r2, r6, #31
 8006952:	d505      	bpl.n	8006960 <_dtoa_r+0x4e8>
 8006954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006958:	f7f9 fe6e 	bl	8000638 <__aeabi_dmul>
 800695c:	3501      	adds	r5, #1
 800695e:	2301      	movs	r3, #1
 8006960:	1076      	asrs	r6, r6, #1
 8006962:	3708      	adds	r7, #8
 8006964:	e773      	b.n	800684e <_dtoa_r+0x3d6>
 8006966:	2502      	movs	r5, #2
 8006968:	e775      	b.n	8006856 <_dtoa_r+0x3de>
 800696a:	9e04      	ldr	r6, [sp, #16]
 800696c:	465f      	mov	r7, fp
 800696e:	e792      	b.n	8006896 <_dtoa_r+0x41e>
 8006970:	9900      	ldr	r1, [sp, #0]
 8006972:	4b50      	ldr	r3, [pc, #320]	; (8006ab4 <_dtoa_r+0x63c>)
 8006974:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006978:	4431      	add	r1, r6
 800697a:	9102      	str	r1, [sp, #8]
 800697c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800697e:	eeb0 9a47 	vmov.f32	s18, s14
 8006982:	eef0 9a67 	vmov.f32	s19, s15
 8006986:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800698a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800698e:	2900      	cmp	r1, #0
 8006990:	d044      	beq.n	8006a1c <_dtoa_r+0x5a4>
 8006992:	494e      	ldr	r1, [pc, #312]	; (8006acc <_dtoa_r+0x654>)
 8006994:	2000      	movs	r0, #0
 8006996:	f7f9 ff79 	bl	800088c <__aeabi_ddiv>
 800699a:	ec53 2b19 	vmov	r2, r3, d9
 800699e:	f7f9 fc93 	bl	80002c8 <__aeabi_dsub>
 80069a2:	9d00      	ldr	r5, [sp, #0]
 80069a4:	ec41 0b19 	vmov	d9, r0, r1
 80069a8:	4649      	mov	r1, r9
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7fa f8f4 	bl	8000b98 <__aeabi_d2iz>
 80069b0:	4606      	mov	r6, r0
 80069b2:	f7f9 fdd7 	bl	8000564 <__aeabi_i2d>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fc83 	bl	80002c8 <__aeabi_dsub>
 80069c2:	3630      	adds	r6, #48	; 0x30
 80069c4:	f805 6b01 	strb.w	r6, [r5], #1
 80069c8:	ec53 2b19 	vmov	r2, r3, d9
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	f7fa f8a4 	bl	8000b1c <__aeabi_dcmplt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d164      	bne.n	8006aa2 <_dtoa_r+0x62a>
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	4937      	ldr	r1, [pc, #220]	; (8006abc <_dtoa_r+0x644>)
 80069de:	2000      	movs	r0, #0
 80069e0:	f7f9 fc72 	bl	80002c8 <__aeabi_dsub>
 80069e4:	ec53 2b19 	vmov	r2, r3, d9
 80069e8:	f7fa f898 	bl	8000b1c <__aeabi_dcmplt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 80b6 	bne.w	8006b5e <_dtoa_r+0x6e6>
 80069f2:	9b02      	ldr	r3, [sp, #8]
 80069f4:	429d      	cmp	r5, r3
 80069f6:	f43f af7c 	beq.w	80068f2 <_dtoa_r+0x47a>
 80069fa:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <_dtoa_r+0x648>)
 80069fc:	ec51 0b19 	vmov	r0, r1, d9
 8006a00:	2200      	movs	r2, #0
 8006a02:	f7f9 fe19 	bl	8000638 <__aeabi_dmul>
 8006a06:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <_dtoa_r+0x648>)
 8006a08:	ec41 0b19 	vmov	d9, r0, r1
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7f9 fe11 	bl	8000638 <__aeabi_dmul>
 8006a16:	4680      	mov	r8, r0
 8006a18:	4689      	mov	r9, r1
 8006a1a:	e7c5      	b.n	80069a8 <_dtoa_r+0x530>
 8006a1c:	ec51 0b17 	vmov	r0, r1, d7
 8006a20:	f7f9 fe0a 	bl	8000638 <__aeabi_dmul>
 8006a24:	9b02      	ldr	r3, [sp, #8]
 8006a26:	9d00      	ldr	r5, [sp, #0]
 8006a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a2a:	ec41 0b19 	vmov	d9, r0, r1
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4640      	mov	r0, r8
 8006a32:	f7fa f8b1 	bl	8000b98 <__aeabi_d2iz>
 8006a36:	4606      	mov	r6, r0
 8006a38:	f7f9 fd94 	bl	8000564 <__aeabi_i2d>
 8006a3c:	3630      	adds	r6, #48	; 0x30
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4640      	mov	r0, r8
 8006a44:	4649      	mov	r1, r9
 8006a46:	f7f9 fc3f 	bl	80002c8 <__aeabi_dsub>
 8006a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8006a4e:	9b02      	ldr	r3, [sp, #8]
 8006a50:	429d      	cmp	r5, r3
 8006a52:	4680      	mov	r8, r0
 8006a54:	4689      	mov	r9, r1
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	d124      	bne.n	8006aa6 <_dtoa_r+0x62e>
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <_dtoa_r+0x654>)
 8006a5e:	ec51 0b19 	vmov	r0, r1, d9
 8006a62:	f7f9 fc33 	bl	80002cc <__adddf3>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	f7fa f873 	bl	8000b58 <__aeabi_dcmpgt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d173      	bne.n	8006b5e <_dtoa_r+0x6e6>
 8006a76:	ec53 2b19 	vmov	r2, r3, d9
 8006a7a:	4914      	ldr	r1, [pc, #80]	; (8006acc <_dtoa_r+0x654>)
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f7f9 fc23 	bl	80002c8 <__aeabi_dsub>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4640      	mov	r0, r8
 8006a88:	4649      	mov	r1, r9
 8006a8a:	f7fa f847 	bl	8000b1c <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f43f af2f 	beq.w	80068f2 <_dtoa_r+0x47a>
 8006a94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a96:	1e6b      	subs	r3, r5, #1
 8006a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a9e:	2b30      	cmp	r3, #48	; 0x30
 8006aa0:	d0f8      	beq.n	8006a94 <_dtoa_r+0x61c>
 8006aa2:	46bb      	mov	fp, r7
 8006aa4:	e04a      	b.n	8006b3c <_dtoa_r+0x6c4>
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <_dtoa_r+0x648>)
 8006aa8:	f7f9 fdc6 	bl	8000638 <__aeabi_dmul>
 8006aac:	4680      	mov	r8, r0
 8006aae:	4689      	mov	r9, r1
 8006ab0:	e7bd      	b.n	8006a2e <_dtoa_r+0x5b6>
 8006ab2:	bf00      	nop
 8006ab4:	080084d8 	.word	0x080084d8
 8006ab8:	080084b0 	.word	0x080084b0
 8006abc:	3ff00000 	.word	0x3ff00000
 8006ac0:	40240000 	.word	0x40240000
 8006ac4:	401c0000 	.word	0x401c0000
 8006ac8:	40140000 	.word	0x40140000
 8006acc:	3fe00000 	.word	0x3fe00000
 8006ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ad4:	9d00      	ldr	r5, [sp, #0]
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	464b      	mov	r3, r9
 8006ada:	4630      	mov	r0, r6
 8006adc:	4639      	mov	r1, r7
 8006ade:	f7f9 fed5 	bl	800088c <__aeabi_ddiv>
 8006ae2:	f7fa f859 	bl	8000b98 <__aeabi_d2iz>
 8006ae6:	9001      	str	r0, [sp, #4]
 8006ae8:	f7f9 fd3c 	bl	8000564 <__aeabi_i2d>
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	f7f9 fda2 	bl	8000638 <__aeabi_dmul>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7f9 fbe4 	bl	80002c8 <__aeabi_dsub>
 8006b00:	9e01      	ldr	r6, [sp, #4]
 8006b02:	9f04      	ldr	r7, [sp, #16]
 8006b04:	3630      	adds	r6, #48	; 0x30
 8006b06:	f805 6b01 	strb.w	r6, [r5], #1
 8006b0a:	9e00      	ldr	r6, [sp, #0]
 8006b0c:	1bae      	subs	r6, r5, r6
 8006b0e:	42b7      	cmp	r7, r6
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	d134      	bne.n	8006b80 <_dtoa_r+0x708>
 8006b16:	f7f9 fbd9 	bl	80002cc <__adddf3>
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	f7fa f819 	bl	8000b58 <__aeabi_dcmpgt>
 8006b26:	b9c8      	cbnz	r0, 8006b5c <_dtoa_r+0x6e4>
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	4639      	mov	r1, r7
 8006b30:	f7f9 ffea 	bl	8000b08 <__aeabi_dcmpeq>
 8006b34:	b110      	cbz	r0, 8006b3c <_dtoa_r+0x6c4>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	07db      	lsls	r3, r3, #31
 8006b3a:	d40f      	bmi.n	8006b5c <_dtoa_r+0x6e4>
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 fb18 	bl	8007174 <_Bfree>
 8006b44:	2300      	movs	r3, #0
 8006b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b48:	702b      	strb	r3, [r5, #0]
 8006b4a:	f10b 0301 	add.w	r3, fp, #1
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f43f ace2 	beq.w	800651c <_dtoa_r+0xa4>
 8006b58:	601d      	str	r5, [r3, #0]
 8006b5a:	e4df      	b.n	800651c <_dtoa_r+0xa4>
 8006b5c:	465f      	mov	r7, fp
 8006b5e:	462b      	mov	r3, r5
 8006b60:	461d      	mov	r5, r3
 8006b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b66:	2a39      	cmp	r2, #57	; 0x39
 8006b68:	d106      	bne.n	8006b78 <_dtoa_r+0x700>
 8006b6a:	9a00      	ldr	r2, [sp, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d1f7      	bne.n	8006b60 <_dtoa_r+0x6e8>
 8006b70:	9900      	ldr	r1, [sp, #0]
 8006b72:	2230      	movs	r2, #48	; 0x30
 8006b74:	3701      	adds	r7, #1
 8006b76:	700a      	strb	r2, [r1, #0]
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	3201      	adds	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e790      	b.n	8006aa2 <_dtoa_r+0x62a>
 8006b80:	4ba3      	ldr	r3, [pc, #652]	; (8006e10 <_dtoa_r+0x998>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	f7f9 fd58 	bl	8000638 <__aeabi_dmul>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	f7f9 ffba 	bl	8000b08 <__aeabi_dcmpeq>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d09e      	beq.n	8006ad6 <_dtoa_r+0x65e>
 8006b98:	e7d0      	b.n	8006b3c <_dtoa_r+0x6c4>
 8006b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	f000 80ca 	beq.w	8006d36 <_dtoa_r+0x8be>
 8006ba2:	9a07      	ldr	r2, [sp, #28]
 8006ba4:	2a01      	cmp	r2, #1
 8006ba6:	f300 80ad 	bgt.w	8006d04 <_dtoa_r+0x88c>
 8006baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	f000 80a5 	beq.w	8006cfc <_dtoa_r+0x884>
 8006bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bb6:	9e08      	ldr	r6, [sp, #32]
 8006bb8:	9d05      	ldr	r5, [sp, #20]
 8006bba:	9a05      	ldr	r2, [sp, #20]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	9205      	str	r2, [sp, #20]
 8006bc0:	9a06      	ldr	r2, [sp, #24]
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	441a      	add	r2, r3
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	9206      	str	r2, [sp, #24]
 8006bca:	f000 fb89 	bl	80072e0 <__i2b>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	b165      	cbz	r5, 8006bec <_dtoa_r+0x774>
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd09      	ble.n	8006bec <_dtoa_r+0x774>
 8006bd8:	42ab      	cmp	r3, r5
 8006bda:	9a05      	ldr	r2, [sp, #20]
 8006bdc:	bfa8      	it	ge
 8006bde:	462b      	movge	r3, r5
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	9205      	str	r2, [sp, #20]
 8006be4:	9a06      	ldr	r2, [sp, #24]
 8006be6:	1aed      	subs	r5, r5, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	9306      	str	r3, [sp, #24]
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	b1f3      	cbz	r3, 8006c2e <_dtoa_r+0x7b6>
 8006bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80a3 	beq.w	8006d3e <_dtoa_r+0x8c6>
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	dd10      	ble.n	8006c1e <_dtoa_r+0x7a6>
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4632      	mov	r2, r6
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fc2d 	bl	8007460 <__pow5mult>
 8006c06:	4652      	mov	r2, sl
 8006c08:	4601      	mov	r1, r0
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fb7d 	bl	800730c <__multiply>
 8006c12:	4651      	mov	r1, sl
 8006c14:	4680      	mov	r8, r0
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 faac 	bl	8007174 <_Bfree>
 8006c1c:	46c2      	mov	sl, r8
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	1b9a      	subs	r2, r3, r6
 8006c22:	d004      	beq.n	8006c2e <_dtoa_r+0x7b6>
 8006c24:	4651      	mov	r1, sl
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fc1a 	bl	8007460 <__pow5mult>
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	2101      	movs	r1, #1
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fb55 	bl	80072e0 <__i2b>
 8006c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	f340 8081 	ble.w	8006d42 <_dtoa_r+0x8ca>
 8006c40:	461a      	mov	r2, r3
 8006c42:	4601      	mov	r1, r0
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fc0b 	bl	8007460 <__pow5mult>
 8006c4a:	9b07      	ldr	r3, [sp, #28]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	4606      	mov	r6, r0
 8006c50:	dd7a      	ble.n	8006d48 <_dtoa_r+0x8d0>
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	6933      	ldr	r3, [r6, #16]
 8006c58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c5c:	6918      	ldr	r0, [r3, #16]
 8006c5e:	f000 faf1 	bl	8007244 <__hi0bits>
 8006c62:	f1c0 0020 	rsb	r0, r0, #32
 8006c66:	9b06      	ldr	r3, [sp, #24]
 8006c68:	4418      	add	r0, r3
 8006c6a:	f010 001f 	ands.w	r0, r0, #31
 8006c6e:	f000 8094 	beq.w	8006d9a <_dtoa_r+0x922>
 8006c72:	f1c0 0320 	rsb	r3, r0, #32
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	f340 8085 	ble.w	8006d86 <_dtoa_r+0x90e>
 8006c7c:	9b05      	ldr	r3, [sp, #20]
 8006c7e:	f1c0 001c 	rsb	r0, r0, #28
 8006c82:	4403      	add	r3, r0
 8006c84:	9305      	str	r3, [sp, #20]
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	4403      	add	r3, r0
 8006c8a:	4405      	add	r5, r0
 8006c8c:	9306      	str	r3, [sp, #24]
 8006c8e:	9b05      	ldr	r3, [sp, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd05      	ble.n	8006ca0 <_dtoa_r+0x828>
 8006c94:	4651      	mov	r1, sl
 8006c96:	461a      	mov	r2, r3
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fc3b 	bl	8007514 <__lshift>
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	9b06      	ldr	r3, [sp, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dd05      	ble.n	8006cb2 <_dtoa_r+0x83a>
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fc32 	bl	8007514 <__lshift>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d072      	beq.n	8006d9e <_dtoa_r+0x926>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4650      	mov	r0, sl
 8006cbc:	f000 fc96 	bl	80075ec <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	da6c      	bge.n	8006d9e <_dtoa_r+0x926>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fa74 	bl	80071b8 <__multadd>
 8006cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 81b0 	beq.w	800703e <_dtoa_r+0xbc6>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	220a      	movs	r2, #10
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 fa67 	bl	80071b8 <__multadd>
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	4607      	mov	r7, r0
 8006cf0:	f300 8096 	bgt.w	8006e20 <_dtoa_r+0x9a8>
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	dc59      	bgt.n	8006dae <_dtoa_r+0x936>
 8006cfa:	e091      	b.n	8006e20 <_dtoa_r+0x9a8>
 8006cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d02:	e758      	b.n	8006bb6 <_dtoa_r+0x73e>
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	1e5e      	subs	r6, r3, #1
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	42b3      	cmp	r3, r6
 8006d0c:	bfbf      	itttt	lt
 8006d0e:	9b08      	ldrlt	r3, [sp, #32]
 8006d10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006d12:	9608      	strlt	r6, [sp, #32]
 8006d14:	1af3      	sublt	r3, r6, r3
 8006d16:	bfb4      	ite	lt
 8006d18:	18d2      	addlt	r2, r2, r3
 8006d1a:	1b9e      	subge	r6, r3, r6
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	bfbc      	itt	lt
 8006d20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006d22:	2600      	movlt	r6, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfb7      	itett	lt
 8006d28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006d2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006d30:	1a9d      	sublt	r5, r3, r2
 8006d32:	2300      	movlt	r3, #0
 8006d34:	e741      	b.n	8006bba <_dtoa_r+0x742>
 8006d36:	9e08      	ldr	r6, [sp, #32]
 8006d38:	9d05      	ldr	r5, [sp, #20]
 8006d3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d3c:	e748      	b.n	8006bd0 <_dtoa_r+0x758>
 8006d3e:	9a08      	ldr	r2, [sp, #32]
 8006d40:	e770      	b.n	8006c24 <_dtoa_r+0x7ac>
 8006d42:	9b07      	ldr	r3, [sp, #28]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	dc19      	bgt.n	8006d7c <_dtoa_r+0x904>
 8006d48:	9b02      	ldr	r3, [sp, #8]
 8006d4a:	b9bb      	cbnz	r3, 8006d7c <_dtoa_r+0x904>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d52:	b99b      	cbnz	r3, 8006d7c <_dtoa_r+0x904>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d5a:	0d1b      	lsrs	r3, r3, #20
 8006d5c:	051b      	lsls	r3, r3, #20
 8006d5e:	b183      	cbz	r3, 8006d82 <_dtoa_r+0x90a>
 8006d60:	9b05      	ldr	r3, [sp, #20]
 8006d62:	3301      	adds	r3, #1
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	9b06      	ldr	r3, [sp, #24]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	9306      	str	r3, [sp, #24]
 8006d6c:	f04f 0801 	mov.w	r8, #1
 8006d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f47f af6f 	bne.w	8006c56 <_dtoa_r+0x7de>
 8006d78:	2001      	movs	r0, #1
 8006d7a:	e774      	b.n	8006c66 <_dtoa_r+0x7ee>
 8006d7c:	f04f 0800 	mov.w	r8, #0
 8006d80:	e7f6      	b.n	8006d70 <_dtoa_r+0x8f8>
 8006d82:	4698      	mov	r8, r3
 8006d84:	e7f4      	b.n	8006d70 <_dtoa_r+0x8f8>
 8006d86:	d082      	beq.n	8006c8e <_dtoa_r+0x816>
 8006d88:	9a05      	ldr	r2, [sp, #20]
 8006d8a:	331c      	adds	r3, #28
 8006d8c:	441a      	add	r2, r3
 8006d8e:	9205      	str	r2, [sp, #20]
 8006d90:	9a06      	ldr	r2, [sp, #24]
 8006d92:	441a      	add	r2, r3
 8006d94:	441d      	add	r5, r3
 8006d96:	9206      	str	r2, [sp, #24]
 8006d98:	e779      	b.n	8006c8e <_dtoa_r+0x816>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	e7f4      	b.n	8006d88 <_dtoa_r+0x910>
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc37      	bgt.n	8006e14 <_dtoa_r+0x99c>
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dd34      	ble.n	8006e14 <_dtoa_r+0x99c>
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	b963      	cbnz	r3, 8006dcc <_dtoa_r+0x954>
 8006db2:	4631      	mov	r1, r6
 8006db4:	2205      	movs	r2, #5
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f9fe 	bl	80071b8 <__multadd>
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	f000 fc13 	bl	80075ec <__mcmp>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f73f adbb 	bgt.w	8006942 <_dtoa_r+0x4ca>
 8006dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dce:	9d00      	ldr	r5, [sp, #0]
 8006dd0:	ea6f 0b03 	mvn.w	fp, r3
 8006dd4:	f04f 0800 	mov.w	r8, #0
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f9ca 	bl	8007174 <_Bfree>
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	f43f aeab 	beq.w	8006b3c <_dtoa_r+0x6c4>
 8006de6:	f1b8 0f00 	cmp.w	r8, #0
 8006dea:	d005      	beq.n	8006df8 <_dtoa_r+0x980>
 8006dec:	45b8      	cmp	r8, r7
 8006dee:	d003      	beq.n	8006df8 <_dtoa_r+0x980>
 8006df0:	4641      	mov	r1, r8
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f9be 	bl	8007174 <_Bfree>
 8006df8:	4639      	mov	r1, r7
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 f9ba 	bl	8007174 <_Bfree>
 8006e00:	e69c      	b.n	8006b3c <_dtoa_r+0x6c4>
 8006e02:	2600      	movs	r6, #0
 8006e04:	4637      	mov	r7, r6
 8006e06:	e7e1      	b.n	8006dcc <_dtoa_r+0x954>
 8006e08:	46bb      	mov	fp, r7
 8006e0a:	4637      	mov	r7, r6
 8006e0c:	e599      	b.n	8006942 <_dtoa_r+0x4ca>
 8006e0e:	bf00      	nop
 8006e10:	40240000 	.word	0x40240000
 8006e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80c8 	beq.w	8006fac <_dtoa_r+0xb34>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	dd05      	ble.n	8006e30 <_dtoa_r+0x9b8>
 8006e24:	4639      	mov	r1, r7
 8006e26:	462a      	mov	r2, r5
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fb73 	bl	8007514 <__lshift>
 8006e2e:	4607      	mov	r7, r0
 8006e30:	f1b8 0f00 	cmp.w	r8, #0
 8006e34:	d05b      	beq.n	8006eee <_dtoa_r+0xa76>
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f95b 	bl	80070f4 <_Balloc>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b928      	cbnz	r0, 8006e4e <_dtoa_r+0x9d6>
 8006e42:	4b83      	ldr	r3, [pc, #524]	; (8007050 <_dtoa_r+0xbd8>)
 8006e44:	4602      	mov	r2, r0
 8006e46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e4a:	f7ff bb2e 	b.w	80064aa <_dtoa_r+0x32>
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	3202      	adds	r2, #2
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	f107 010c 	add.w	r1, r7, #12
 8006e58:	300c      	adds	r0, #12
 8006e5a:	f7ff fa76 	bl	800634a <memcpy>
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4629      	mov	r1, r5
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fb56 	bl	8007514 <__lshift>
 8006e68:	9b00      	ldr	r3, [sp, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e72:	4413      	add	r3, r2
 8006e74:	9308      	str	r3, [sp, #32]
 8006e76:	9b02      	ldr	r3, [sp, #8]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	46b8      	mov	r8, r7
 8006e7e:	9306      	str	r3, [sp, #24]
 8006e80:	4607      	mov	r7, r0
 8006e82:	9b04      	ldr	r3, [sp, #16]
 8006e84:	4631      	mov	r1, r6
 8006e86:	3b01      	subs	r3, #1
 8006e88:	4650      	mov	r0, sl
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	f7ff fa6b 	bl	8006366 <quorem>
 8006e90:	4641      	mov	r1, r8
 8006e92:	9002      	str	r0, [sp, #8]
 8006e94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e98:	4650      	mov	r0, sl
 8006e9a:	f000 fba7 	bl	80075ec <__mcmp>
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	9005      	str	r0, [sp, #20]
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 fbbd 	bl	8007624 <__mdiff>
 8006eaa:	68c2      	ldr	r2, [r0, #12]
 8006eac:	4605      	mov	r5, r0
 8006eae:	bb02      	cbnz	r2, 8006ef2 <_dtoa_r+0xa7a>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4650      	mov	r0, sl
 8006eb4:	f000 fb9a 	bl	80075ec <__mcmp>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec0:	f000 f958 	bl	8007174 <_Bfree>
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec8:	9d04      	ldr	r5, [sp, #16]
 8006eca:	ea43 0102 	orr.w	r1, r3, r2
 8006ece:	9b06      	ldr	r3, [sp, #24]
 8006ed0:	4319      	orrs	r1, r3
 8006ed2:	d110      	bne.n	8006ef6 <_dtoa_r+0xa7e>
 8006ed4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ed8:	d029      	beq.n	8006f2e <_dtoa_r+0xab6>
 8006eda:	9b05      	ldr	r3, [sp, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd02      	ble.n	8006ee6 <_dtoa_r+0xa6e>
 8006ee0:	9b02      	ldr	r3, [sp, #8]
 8006ee2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	f883 9000 	strb.w	r9, [r3]
 8006eec:	e774      	b.n	8006dd8 <_dtoa_r+0x960>
 8006eee:	4638      	mov	r0, r7
 8006ef0:	e7ba      	b.n	8006e68 <_dtoa_r+0x9f0>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	e7e1      	b.n	8006eba <_dtoa_r+0xa42>
 8006ef6:	9b05      	ldr	r3, [sp, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db04      	blt.n	8006f06 <_dtoa_r+0xa8e>
 8006efc:	9907      	ldr	r1, [sp, #28]
 8006efe:	430b      	orrs	r3, r1
 8006f00:	9906      	ldr	r1, [sp, #24]
 8006f02:	430b      	orrs	r3, r1
 8006f04:	d120      	bne.n	8006f48 <_dtoa_r+0xad0>
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	dded      	ble.n	8006ee6 <_dtoa_r+0xa6e>
 8006f0a:	4651      	mov	r1, sl
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fb00 	bl	8007514 <__lshift>
 8006f14:	4631      	mov	r1, r6
 8006f16:	4682      	mov	sl, r0
 8006f18:	f000 fb68 	bl	80075ec <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	dc03      	bgt.n	8006f28 <_dtoa_r+0xab0>
 8006f20:	d1e1      	bne.n	8006ee6 <_dtoa_r+0xa6e>
 8006f22:	f019 0f01 	tst.w	r9, #1
 8006f26:	d0de      	beq.n	8006ee6 <_dtoa_r+0xa6e>
 8006f28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f2c:	d1d8      	bne.n	8006ee0 <_dtoa_r+0xa68>
 8006f2e:	9a01      	ldr	r2, [sp, #4]
 8006f30:	2339      	movs	r3, #57	; 0x39
 8006f32:	7013      	strb	r3, [r2, #0]
 8006f34:	462b      	mov	r3, r5
 8006f36:	461d      	mov	r5, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f3e:	2a39      	cmp	r2, #57	; 0x39
 8006f40:	d06c      	beq.n	800701c <_dtoa_r+0xba4>
 8006f42:	3201      	adds	r2, #1
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e747      	b.n	8006dd8 <_dtoa_r+0x960>
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	dd07      	ble.n	8006f5c <_dtoa_r+0xae4>
 8006f4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f50:	d0ed      	beq.n	8006f2e <_dtoa_r+0xab6>
 8006f52:	9a01      	ldr	r2, [sp, #4]
 8006f54:	f109 0301 	add.w	r3, r9, #1
 8006f58:	7013      	strb	r3, [r2, #0]
 8006f5a:	e73d      	b.n	8006dd8 <_dtoa_r+0x960>
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	9a08      	ldr	r2, [sp, #32]
 8006f60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d043      	beq.n	8006ff0 <_dtoa_r+0xb78>
 8006f68:	4651      	mov	r1, sl
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	220a      	movs	r2, #10
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f922 	bl	80071b8 <__multadd>
 8006f74:	45b8      	cmp	r8, r7
 8006f76:	4682      	mov	sl, r0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	f04f 020a 	mov.w	r2, #10
 8006f80:	4641      	mov	r1, r8
 8006f82:	4620      	mov	r0, r4
 8006f84:	d107      	bne.n	8006f96 <_dtoa_r+0xb1e>
 8006f86:	f000 f917 	bl	80071b8 <__multadd>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	e775      	b.n	8006e82 <_dtoa_r+0xa0a>
 8006f96:	f000 f90f 	bl	80071b8 <__multadd>
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 f908 	bl	80071b8 <__multadd>
 8006fa8:	4607      	mov	r7, r0
 8006faa:	e7f0      	b.n	8006f8e <_dtoa_r+0xb16>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	9d00      	ldr	r5, [sp, #0]
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	f7ff f9d6 	bl	8006366 <quorem>
 8006fba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	f805 9b01 	strb.w	r9, [r5], #1
 8006fc4:	1aea      	subs	r2, r5, r3
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	dd07      	ble.n	8006fdc <_dtoa_r+0xb64>
 8006fcc:	4651      	mov	r1, sl
 8006fce:	2300      	movs	r3, #0
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 f8f0 	bl	80071b8 <__multadd>
 8006fd8:	4682      	mov	sl, r0
 8006fda:	e7ea      	b.n	8006fb2 <_dtoa_r+0xb3a>
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bfc8      	it	gt
 8006fe2:	461d      	movgt	r5, r3
 8006fe4:	9b00      	ldr	r3, [sp, #0]
 8006fe6:	bfd8      	it	le
 8006fe8:	2501      	movle	r5, #1
 8006fea:	441d      	add	r5, r3
 8006fec:	f04f 0800 	mov.w	r8, #0
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fa8d 	bl	8007514 <__lshift>
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	f000 faf5 	bl	80075ec <__mcmp>
 8007002:	2800      	cmp	r0, #0
 8007004:	dc96      	bgt.n	8006f34 <_dtoa_r+0xabc>
 8007006:	d102      	bne.n	800700e <_dtoa_r+0xb96>
 8007008:	f019 0f01 	tst.w	r9, #1
 800700c:	d192      	bne.n	8006f34 <_dtoa_r+0xabc>
 800700e:	462b      	mov	r3, r5
 8007010:	461d      	mov	r5, r3
 8007012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007016:	2a30      	cmp	r2, #48	; 0x30
 8007018:	d0fa      	beq.n	8007010 <_dtoa_r+0xb98>
 800701a:	e6dd      	b.n	8006dd8 <_dtoa_r+0x960>
 800701c:	9a00      	ldr	r2, [sp, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d189      	bne.n	8006f36 <_dtoa_r+0xabe>
 8007022:	f10b 0b01 	add.w	fp, fp, #1
 8007026:	2331      	movs	r3, #49	; 0x31
 8007028:	e796      	b.n	8006f58 <_dtoa_r+0xae0>
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <_dtoa_r+0xbdc>)
 800702c:	f7ff ba99 	b.w	8006562 <_dtoa_r+0xea>
 8007030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007032:	2b00      	cmp	r3, #0
 8007034:	f47f aa6d 	bne.w	8006512 <_dtoa_r+0x9a>
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <_dtoa_r+0xbe0>)
 800703a:	f7ff ba92 	b.w	8006562 <_dtoa_r+0xea>
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	dcb5      	bgt.n	8006fb0 <_dtoa_r+0xb38>
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	2b02      	cmp	r3, #2
 8007048:	f73f aeb1 	bgt.w	8006dae <_dtoa_r+0x936>
 800704c:	e7b0      	b.n	8006fb0 <_dtoa_r+0xb38>
 800704e:	bf00      	nop
 8007050:	08008444 	.word	0x08008444
 8007054:	080083a4 	.word	0x080083a4
 8007058:	080083c8 	.word	0x080083c8

0800705c <_free_r>:
 800705c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800705e:	2900      	cmp	r1, #0
 8007060:	d044      	beq.n	80070ec <_free_r+0x90>
 8007062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007066:	9001      	str	r0, [sp, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f1a1 0404 	sub.w	r4, r1, #4
 800706e:	bfb8      	it	lt
 8007070:	18e4      	addlt	r4, r4, r3
 8007072:	f7fe faff 	bl	8005674 <__malloc_lock>
 8007076:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <_free_r+0x94>)
 8007078:	9801      	ldr	r0, [sp, #4]
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	b933      	cbnz	r3, 800708c <_free_r+0x30>
 800707e:	6063      	str	r3, [r4, #4]
 8007080:	6014      	str	r4, [r2, #0]
 8007082:	b003      	add	sp, #12
 8007084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007088:	f7fe bafa 	b.w	8005680 <__malloc_unlock>
 800708c:	42a3      	cmp	r3, r4
 800708e:	d908      	bls.n	80070a2 <_free_r+0x46>
 8007090:	6825      	ldr	r5, [r4, #0]
 8007092:	1961      	adds	r1, r4, r5
 8007094:	428b      	cmp	r3, r1
 8007096:	bf01      	itttt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	1949      	addeq	r1, r1, r5
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	e7ed      	b.n	800707e <_free_r+0x22>
 80070a2:	461a      	mov	r2, r3
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	b10b      	cbz	r3, 80070ac <_free_r+0x50>
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d9fa      	bls.n	80070a2 <_free_r+0x46>
 80070ac:	6811      	ldr	r1, [r2, #0]
 80070ae:	1855      	adds	r5, r2, r1
 80070b0:	42a5      	cmp	r5, r4
 80070b2:	d10b      	bne.n	80070cc <_free_r+0x70>
 80070b4:	6824      	ldr	r4, [r4, #0]
 80070b6:	4421      	add	r1, r4
 80070b8:	1854      	adds	r4, r2, r1
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	6011      	str	r1, [r2, #0]
 80070be:	d1e0      	bne.n	8007082 <_free_r+0x26>
 80070c0:	681c      	ldr	r4, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	6053      	str	r3, [r2, #4]
 80070c6:	440c      	add	r4, r1
 80070c8:	6014      	str	r4, [r2, #0]
 80070ca:	e7da      	b.n	8007082 <_free_r+0x26>
 80070cc:	d902      	bls.n	80070d4 <_free_r+0x78>
 80070ce:	230c      	movs	r3, #12
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	e7d6      	b.n	8007082 <_free_r+0x26>
 80070d4:	6825      	ldr	r5, [r4, #0]
 80070d6:	1961      	adds	r1, r4, r5
 80070d8:	428b      	cmp	r3, r1
 80070da:	bf04      	itt	eq
 80070dc:	6819      	ldreq	r1, [r3, #0]
 80070de:	685b      	ldreq	r3, [r3, #4]
 80070e0:	6063      	str	r3, [r4, #4]
 80070e2:	bf04      	itt	eq
 80070e4:	1949      	addeq	r1, r1, r5
 80070e6:	6021      	streq	r1, [r4, #0]
 80070e8:	6054      	str	r4, [r2, #4]
 80070ea:	e7ca      	b.n	8007082 <_free_r+0x26>
 80070ec:	b003      	add	sp, #12
 80070ee:	bd30      	pop	{r4, r5, pc}
 80070f0:	20000428 	.word	0x20000428

080070f4 <_Balloc>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	69c6      	ldr	r6, [r0, #28]
 80070f8:	4604      	mov	r4, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	b976      	cbnz	r6, 800711c <_Balloc+0x28>
 80070fe:	2010      	movs	r0, #16
 8007100:	f7fe fa08 	bl	8005514 <malloc>
 8007104:	4602      	mov	r2, r0
 8007106:	61e0      	str	r0, [r4, #28]
 8007108:	b920      	cbnz	r0, 8007114 <_Balloc+0x20>
 800710a:	4b18      	ldr	r3, [pc, #96]	; (800716c <_Balloc+0x78>)
 800710c:	4818      	ldr	r0, [pc, #96]	; (8007170 <_Balloc+0x7c>)
 800710e:	216b      	movs	r1, #107	; 0x6b
 8007110:	f000 fd8c 	bl	8007c2c <__assert_func>
 8007114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007118:	6006      	str	r6, [r0, #0]
 800711a:	60c6      	str	r6, [r0, #12]
 800711c:	69e6      	ldr	r6, [r4, #28]
 800711e:	68f3      	ldr	r3, [r6, #12]
 8007120:	b183      	cbz	r3, 8007144 <_Balloc+0x50>
 8007122:	69e3      	ldr	r3, [r4, #28]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800712a:	b9b8      	cbnz	r0, 800715c <_Balloc+0x68>
 800712c:	2101      	movs	r1, #1
 800712e:	fa01 f605 	lsl.w	r6, r1, r5
 8007132:	1d72      	adds	r2, r6, #5
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fd96 	bl	8007c68 <_calloc_r>
 800713c:	b160      	cbz	r0, 8007158 <_Balloc+0x64>
 800713e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007142:	e00e      	b.n	8007162 <_Balloc+0x6e>
 8007144:	2221      	movs	r2, #33	; 0x21
 8007146:	2104      	movs	r1, #4
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fd8d 	bl	8007c68 <_calloc_r>
 800714e:	69e3      	ldr	r3, [r4, #28]
 8007150:	60f0      	str	r0, [r6, #12]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e4      	bne.n	8007122 <_Balloc+0x2e>
 8007158:	2000      	movs	r0, #0
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	6802      	ldr	r2, [r0, #0]
 800715e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007162:	2300      	movs	r3, #0
 8007164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007168:	e7f7      	b.n	800715a <_Balloc+0x66>
 800716a:	bf00      	nop
 800716c:	080083d5 	.word	0x080083d5
 8007170:	08008455 	.word	0x08008455

08007174 <_Bfree>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	69c6      	ldr	r6, [r0, #28]
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b976      	cbnz	r6, 800719c <_Bfree+0x28>
 800717e:	2010      	movs	r0, #16
 8007180:	f7fe f9c8 	bl	8005514 <malloc>
 8007184:	4602      	mov	r2, r0
 8007186:	61e8      	str	r0, [r5, #28]
 8007188:	b920      	cbnz	r0, 8007194 <_Bfree+0x20>
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <_Bfree+0x3c>)
 800718c:	4809      	ldr	r0, [pc, #36]	; (80071b4 <_Bfree+0x40>)
 800718e:	218f      	movs	r1, #143	; 0x8f
 8007190:	f000 fd4c 	bl	8007c2c <__assert_func>
 8007194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007198:	6006      	str	r6, [r0, #0]
 800719a:	60c6      	str	r6, [r0, #12]
 800719c:	b13c      	cbz	r4, 80071ae <_Bfree+0x3a>
 800719e:	69eb      	ldr	r3, [r5, #28]
 80071a0:	6862      	ldr	r2, [r4, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a8:	6021      	str	r1, [r4, #0]
 80071aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	080083d5 	.word	0x080083d5
 80071b4:	08008455 	.word	0x08008455

080071b8 <__multadd>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	690d      	ldr	r5, [r1, #16]
 80071be:	4607      	mov	r7, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	461e      	mov	r6, r3
 80071c4:	f101 0c14 	add.w	ip, r1, #20
 80071c8:	2000      	movs	r0, #0
 80071ca:	f8dc 3000 	ldr.w	r3, [ip]
 80071ce:	b299      	uxth	r1, r3
 80071d0:	fb02 6101 	mla	r1, r2, r1, r6
 80071d4:	0c1e      	lsrs	r6, r3, #16
 80071d6:	0c0b      	lsrs	r3, r1, #16
 80071d8:	fb02 3306 	mla	r3, r2, r6, r3
 80071dc:	b289      	uxth	r1, r1
 80071de:	3001      	adds	r0, #1
 80071e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071e4:	4285      	cmp	r5, r0
 80071e6:	f84c 1b04 	str.w	r1, [ip], #4
 80071ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071ee:	dcec      	bgt.n	80071ca <__multadd+0x12>
 80071f0:	b30e      	cbz	r6, 8007236 <__multadd+0x7e>
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	dc19      	bgt.n	800722c <__multadd+0x74>
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4638      	mov	r0, r7
 80071fc:	3101      	adds	r1, #1
 80071fe:	f7ff ff79 	bl	80070f4 <_Balloc>
 8007202:	4680      	mov	r8, r0
 8007204:	b928      	cbnz	r0, 8007212 <__multadd+0x5a>
 8007206:	4602      	mov	r2, r0
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <__multadd+0x84>)
 800720a:	480d      	ldr	r0, [pc, #52]	; (8007240 <__multadd+0x88>)
 800720c:	21ba      	movs	r1, #186	; 0xba
 800720e:	f000 fd0d 	bl	8007c2c <__assert_func>
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	3202      	adds	r2, #2
 8007216:	f104 010c 	add.w	r1, r4, #12
 800721a:	0092      	lsls	r2, r2, #2
 800721c:	300c      	adds	r0, #12
 800721e:	f7ff f894 	bl	800634a <memcpy>
 8007222:	4621      	mov	r1, r4
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff ffa5 	bl	8007174 <_Bfree>
 800722a:	4644      	mov	r4, r8
 800722c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007230:	3501      	adds	r5, #1
 8007232:	615e      	str	r6, [r3, #20]
 8007234:	6125      	str	r5, [r4, #16]
 8007236:	4620      	mov	r0, r4
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	08008444 	.word	0x08008444
 8007240:	08008455 	.word	0x08008455

08007244 <__hi0bits>:
 8007244:	0c03      	lsrs	r3, r0, #16
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	b9d3      	cbnz	r3, 8007280 <__hi0bits+0x3c>
 800724a:	0400      	lsls	r0, r0, #16
 800724c:	2310      	movs	r3, #16
 800724e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007252:	bf04      	itt	eq
 8007254:	0200      	lsleq	r0, r0, #8
 8007256:	3308      	addeq	r3, #8
 8007258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800725c:	bf04      	itt	eq
 800725e:	0100      	lsleq	r0, r0, #4
 8007260:	3304      	addeq	r3, #4
 8007262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007266:	bf04      	itt	eq
 8007268:	0080      	lsleq	r0, r0, #2
 800726a:	3302      	addeq	r3, #2
 800726c:	2800      	cmp	r0, #0
 800726e:	db05      	blt.n	800727c <__hi0bits+0x38>
 8007270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007274:	f103 0301 	add.w	r3, r3, #1
 8007278:	bf08      	it	eq
 800727a:	2320      	moveq	r3, #32
 800727c:	4618      	mov	r0, r3
 800727e:	4770      	bx	lr
 8007280:	2300      	movs	r3, #0
 8007282:	e7e4      	b.n	800724e <__hi0bits+0xa>

08007284 <__lo0bits>:
 8007284:	6803      	ldr	r3, [r0, #0]
 8007286:	f013 0207 	ands.w	r2, r3, #7
 800728a:	d00c      	beq.n	80072a6 <__lo0bits+0x22>
 800728c:	07d9      	lsls	r1, r3, #31
 800728e:	d422      	bmi.n	80072d6 <__lo0bits+0x52>
 8007290:	079a      	lsls	r2, r3, #30
 8007292:	bf49      	itett	mi
 8007294:	085b      	lsrmi	r3, r3, #1
 8007296:	089b      	lsrpl	r3, r3, #2
 8007298:	6003      	strmi	r3, [r0, #0]
 800729a:	2201      	movmi	r2, #1
 800729c:	bf5c      	itt	pl
 800729e:	6003      	strpl	r3, [r0, #0]
 80072a0:	2202      	movpl	r2, #2
 80072a2:	4610      	mov	r0, r2
 80072a4:	4770      	bx	lr
 80072a6:	b299      	uxth	r1, r3
 80072a8:	b909      	cbnz	r1, 80072ae <__lo0bits+0x2a>
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	2210      	movs	r2, #16
 80072ae:	b2d9      	uxtb	r1, r3
 80072b0:	b909      	cbnz	r1, 80072b6 <__lo0bits+0x32>
 80072b2:	3208      	adds	r2, #8
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	0719      	lsls	r1, r3, #28
 80072b8:	bf04      	itt	eq
 80072ba:	091b      	lsreq	r3, r3, #4
 80072bc:	3204      	addeq	r2, #4
 80072be:	0799      	lsls	r1, r3, #30
 80072c0:	bf04      	itt	eq
 80072c2:	089b      	lsreq	r3, r3, #2
 80072c4:	3202      	addeq	r2, #2
 80072c6:	07d9      	lsls	r1, r3, #31
 80072c8:	d403      	bmi.n	80072d2 <__lo0bits+0x4e>
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	f102 0201 	add.w	r2, r2, #1
 80072d0:	d003      	beq.n	80072da <__lo0bits+0x56>
 80072d2:	6003      	str	r3, [r0, #0]
 80072d4:	e7e5      	b.n	80072a2 <__lo0bits+0x1e>
 80072d6:	2200      	movs	r2, #0
 80072d8:	e7e3      	b.n	80072a2 <__lo0bits+0x1e>
 80072da:	2220      	movs	r2, #32
 80072dc:	e7e1      	b.n	80072a2 <__lo0bits+0x1e>
	...

080072e0 <__i2b>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	460c      	mov	r4, r1
 80072e4:	2101      	movs	r1, #1
 80072e6:	f7ff ff05 	bl	80070f4 <_Balloc>
 80072ea:	4602      	mov	r2, r0
 80072ec:	b928      	cbnz	r0, 80072fa <__i2b+0x1a>
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <__i2b+0x24>)
 80072f0:	4805      	ldr	r0, [pc, #20]	; (8007308 <__i2b+0x28>)
 80072f2:	f240 1145 	movw	r1, #325	; 0x145
 80072f6:	f000 fc99 	bl	8007c2c <__assert_func>
 80072fa:	2301      	movs	r3, #1
 80072fc:	6144      	str	r4, [r0, #20]
 80072fe:	6103      	str	r3, [r0, #16]
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	08008444 	.word	0x08008444
 8007308:	08008455 	.word	0x08008455

0800730c <__multiply>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	4691      	mov	r9, r2
 8007312:	690a      	ldr	r2, [r1, #16]
 8007314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	bfb8      	it	lt
 800731c:	460b      	movlt	r3, r1
 800731e:	460c      	mov	r4, r1
 8007320:	bfbc      	itt	lt
 8007322:	464c      	movlt	r4, r9
 8007324:	4699      	movlt	r9, r3
 8007326:	6927      	ldr	r7, [r4, #16]
 8007328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	6861      	ldr	r1, [r4, #4]
 8007330:	eb07 060a 	add.w	r6, r7, sl
 8007334:	42b3      	cmp	r3, r6
 8007336:	b085      	sub	sp, #20
 8007338:	bfb8      	it	lt
 800733a:	3101      	addlt	r1, #1
 800733c:	f7ff feda 	bl	80070f4 <_Balloc>
 8007340:	b930      	cbnz	r0, 8007350 <__multiply+0x44>
 8007342:	4602      	mov	r2, r0
 8007344:	4b44      	ldr	r3, [pc, #272]	; (8007458 <__multiply+0x14c>)
 8007346:	4845      	ldr	r0, [pc, #276]	; (800745c <__multiply+0x150>)
 8007348:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800734c:	f000 fc6e 	bl	8007c2c <__assert_func>
 8007350:	f100 0514 	add.w	r5, r0, #20
 8007354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007358:	462b      	mov	r3, r5
 800735a:	2200      	movs	r2, #0
 800735c:	4543      	cmp	r3, r8
 800735e:	d321      	bcc.n	80073a4 <__multiply+0x98>
 8007360:	f104 0314 	add.w	r3, r4, #20
 8007364:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007368:	f109 0314 	add.w	r3, r9, #20
 800736c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007370:	9202      	str	r2, [sp, #8]
 8007372:	1b3a      	subs	r2, r7, r4
 8007374:	3a15      	subs	r2, #21
 8007376:	f022 0203 	bic.w	r2, r2, #3
 800737a:	3204      	adds	r2, #4
 800737c:	f104 0115 	add.w	r1, r4, #21
 8007380:	428f      	cmp	r7, r1
 8007382:	bf38      	it	cc
 8007384:	2204      	movcc	r2, #4
 8007386:	9201      	str	r2, [sp, #4]
 8007388:	9a02      	ldr	r2, [sp, #8]
 800738a:	9303      	str	r3, [sp, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d80c      	bhi.n	80073aa <__multiply+0x9e>
 8007390:	2e00      	cmp	r6, #0
 8007392:	dd03      	ble.n	800739c <__multiply+0x90>
 8007394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007398:	2b00      	cmp	r3, #0
 800739a:	d05b      	beq.n	8007454 <__multiply+0x148>
 800739c:	6106      	str	r6, [r0, #16]
 800739e:	b005      	add	sp, #20
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a4:	f843 2b04 	str.w	r2, [r3], #4
 80073a8:	e7d8      	b.n	800735c <__multiply+0x50>
 80073aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80073ae:	f1ba 0f00 	cmp.w	sl, #0
 80073b2:	d024      	beq.n	80073fe <__multiply+0xf2>
 80073b4:	f104 0e14 	add.w	lr, r4, #20
 80073b8:	46a9      	mov	r9, r5
 80073ba:	f04f 0c00 	mov.w	ip, #0
 80073be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073c2:	f8d9 1000 	ldr.w	r1, [r9]
 80073c6:	fa1f fb82 	uxth.w	fp, r2
 80073ca:	b289      	uxth	r1, r1
 80073cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80073d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073d4:	f8d9 2000 	ldr.w	r2, [r9]
 80073d8:	4461      	add	r1, ip
 80073da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073de:	fb0a c20b 	mla	r2, sl, fp, ip
 80073e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073e6:	b289      	uxth	r1, r1
 80073e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073ec:	4577      	cmp	r7, lr
 80073ee:	f849 1b04 	str.w	r1, [r9], #4
 80073f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073f6:	d8e2      	bhi.n	80073be <__multiply+0xb2>
 80073f8:	9a01      	ldr	r2, [sp, #4]
 80073fa:	f845 c002 	str.w	ip, [r5, r2]
 80073fe:	9a03      	ldr	r2, [sp, #12]
 8007400:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007404:	3304      	adds	r3, #4
 8007406:	f1b9 0f00 	cmp.w	r9, #0
 800740a:	d021      	beq.n	8007450 <__multiply+0x144>
 800740c:	6829      	ldr	r1, [r5, #0]
 800740e:	f104 0c14 	add.w	ip, r4, #20
 8007412:	46ae      	mov	lr, r5
 8007414:	f04f 0a00 	mov.w	sl, #0
 8007418:	f8bc b000 	ldrh.w	fp, [ip]
 800741c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007420:	fb09 220b 	mla	r2, r9, fp, r2
 8007424:	4452      	add	r2, sl
 8007426:	b289      	uxth	r1, r1
 8007428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800742c:	f84e 1b04 	str.w	r1, [lr], #4
 8007430:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007438:	f8be 1000 	ldrh.w	r1, [lr]
 800743c:	fb09 110a 	mla	r1, r9, sl, r1
 8007440:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007444:	4567      	cmp	r7, ip
 8007446:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800744a:	d8e5      	bhi.n	8007418 <__multiply+0x10c>
 800744c:	9a01      	ldr	r2, [sp, #4]
 800744e:	50a9      	str	r1, [r5, r2]
 8007450:	3504      	adds	r5, #4
 8007452:	e799      	b.n	8007388 <__multiply+0x7c>
 8007454:	3e01      	subs	r6, #1
 8007456:	e79b      	b.n	8007390 <__multiply+0x84>
 8007458:	08008444 	.word	0x08008444
 800745c:	08008455 	.word	0x08008455

08007460 <__pow5mult>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	4615      	mov	r5, r2
 8007466:	f012 0203 	ands.w	r2, r2, #3
 800746a:	4606      	mov	r6, r0
 800746c:	460f      	mov	r7, r1
 800746e:	d007      	beq.n	8007480 <__pow5mult+0x20>
 8007470:	4c25      	ldr	r4, [pc, #148]	; (8007508 <__pow5mult+0xa8>)
 8007472:	3a01      	subs	r2, #1
 8007474:	2300      	movs	r3, #0
 8007476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800747a:	f7ff fe9d 	bl	80071b8 <__multadd>
 800747e:	4607      	mov	r7, r0
 8007480:	10ad      	asrs	r5, r5, #2
 8007482:	d03d      	beq.n	8007500 <__pow5mult+0xa0>
 8007484:	69f4      	ldr	r4, [r6, #28]
 8007486:	b97c      	cbnz	r4, 80074a8 <__pow5mult+0x48>
 8007488:	2010      	movs	r0, #16
 800748a:	f7fe f843 	bl	8005514 <malloc>
 800748e:	4602      	mov	r2, r0
 8007490:	61f0      	str	r0, [r6, #28]
 8007492:	b928      	cbnz	r0, 80074a0 <__pow5mult+0x40>
 8007494:	4b1d      	ldr	r3, [pc, #116]	; (800750c <__pow5mult+0xac>)
 8007496:	481e      	ldr	r0, [pc, #120]	; (8007510 <__pow5mult+0xb0>)
 8007498:	f240 11b3 	movw	r1, #435	; 0x1b3
 800749c:	f000 fbc6 	bl	8007c2c <__assert_func>
 80074a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074a4:	6004      	str	r4, [r0, #0]
 80074a6:	60c4      	str	r4, [r0, #12]
 80074a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074b0:	b94c      	cbnz	r4, 80074c6 <__pow5mult+0x66>
 80074b2:	f240 2171 	movw	r1, #625	; 0x271
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff ff12 	bl	80072e0 <__i2b>
 80074bc:	2300      	movs	r3, #0
 80074be:	f8c8 0008 	str.w	r0, [r8, #8]
 80074c2:	4604      	mov	r4, r0
 80074c4:	6003      	str	r3, [r0, #0]
 80074c6:	f04f 0900 	mov.w	r9, #0
 80074ca:	07eb      	lsls	r3, r5, #31
 80074cc:	d50a      	bpl.n	80074e4 <__pow5mult+0x84>
 80074ce:	4639      	mov	r1, r7
 80074d0:	4622      	mov	r2, r4
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ff1a 	bl	800730c <__multiply>
 80074d8:	4639      	mov	r1, r7
 80074da:	4680      	mov	r8, r0
 80074dc:	4630      	mov	r0, r6
 80074de:	f7ff fe49 	bl	8007174 <_Bfree>
 80074e2:	4647      	mov	r7, r8
 80074e4:	106d      	asrs	r5, r5, #1
 80074e6:	d00b      	beq.n	8007500 <__pow5mult+0xa0>
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	b938      	cbnz	r0, 80074fc <__pow5mult+0x9c>
 80074ec:	4622      	mov	r2, r4
 80074ee:	4621      	mov	r1, r4
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff ff0b 	bl	800730c <__multiply>
 80074f6:	6020      	str	r0, [r4, #0]
 80074f8:	f8c0 9000 	str.w	r9, [r0]
 80074fc:	4604      	mov	r4, r0
 80074fe:	e7e4      	b.n	80074ca <__pow5mult+0x6a>
 8007500:	4638      	mov	r0, r7
 8007502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007506:	bf00      	nop
 8007508:	080085a0 	.word	0x080085a0
 800750c:	080083d5 	.word	0x080083d5
 8007510:	08008455 	.word	0x08008455

08007514 <__lshift>:
 8007514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007518:	460c      	mov	r4, r1
 800751a:	6849      	ldr	r1, [r1, #4]
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	4607      	mov	r7, r0
 8007526:	4691      	mov	r9, r2
 8007528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800752c:	f108 0601 	add.w	r6, r8, #1
 8007530:	42b3      	cmp	r3, r6
 8007532:	db0b      	blt.n	800754c <__lshift+0x38>
 8007534:	4638      	mov	r0, r7
 8007536:	f7ff fddd 	bl	80070f4 <_Balloc>
 800753a:	4605      	mov	r5, r0
 800753c:	b948      	cbnz	r0, 8007552 <__lshift+0x3e>
 800753e:	4602      	mov	r2, r0
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <__lshift+0xd0>)
 8007542:	4829      	ldr	r0, [pc, #164]	; (80075e8 <__lshift+0xd4>)
 8007544:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007548:	f000 fb70 	bl	8007c2c <__assert_func>
 800754c:	3101      	adds	r1, #1
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	e7ee      	b.n	8007530 <__lshift+0x1c>
 8007552:	2300      	movs	r3, #0
 8007554:	f100 0114 	add.w	r1, r0, #20
 8007558:	f100 0210 	add.w	r2, r0, #16
 800755c:	4618      	mov	r0, r3
 800755e:	4553      	cmp	r3, sl
 8007560:	db33      	blt.n	80075ca <__lshift+0xb6>
 8007562:	6920      	ldr	r0, [r4, #16]
 8007564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007568:	f104 0314 	add.w	r3, r4, #20
 800756c:	f019 091f 	ands.w	r9, r9, #31
 8007570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007578:	d02b      	beq.n	80075d2 <__lshift+0xbe>
 800757a:	f1c9 0e20 	rsb	lr, r9, #32
 800757e:	468a      	mov	sl, r1
 8007580:	2200      	movs	r2, #0
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	fa00 f009 	lsl.w	r0, r0, r9
 8007588:	4310      	orrs	r0, r2
 800758a:	f84a 0b04 	str.w	r0, [sl], #4
 800758e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007592:	459c      	cmp	ip, r3
 8007594:	fa22 f20e 	lsr.w	r2, r2, lr
 8007598:	d8f3      	bhi.n	8007582 <__lshift+0x6e>
 800759a:	ebac 0304 	sub.w	r3, ip, r4
 800759e:	3b15      	subs	r3, #21
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	3304      	adds	r3, #4
 80075a6:	f104 0015 	add.w	r0, r4, #21
 80075aa:	4584      	cmp	ip, r0
 80075ac:	bf38      	it	cc
 80075ae:	2304      	movcc	r3, #4
 80075b0:	50ca      	str	r2, [r1, r3]
 80075b2:	b10a      	cbz	r2, 80075b8 <__lshift+0xa4>
 80075b4:	f108 0602 	add.w	r6, r8, #2
 80075b8:	3e01      	subs	r6, #1
 80075ba:	4638      	mov	r0, r7
 80075bc:	612e      	str	r6, [r5, #16]
 80075be:	4621      	mov	r1, r4
 80075c0:	f7ff fdd8 	bl	8007174 <_Bfree>
 80075c4:	4628      	mov	r0, r5
 80075c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80075ce:	3301      	adds	r3, #1
 80075d0:	e7c5      	b.n	800755e <__lshift+0x4a>
 80075d2:	3904      	subs	r1, #4
 80075d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075dc:	459c      	cmp	ip, r3
 80075de:	d8f9      	bhi.n	80075d4 <__lshift+0xc0>
 80075e0:	e7ea      	b.n	80075b8 <__lshift+0xa4>
 80075e2:	bf00      	nop
 80075e4:	08008444 	.word	0x08008444
 80075e8:	08008455 	.word	0x08008455

080075ec <__mcmp>:
 80075ec:	b530      	push	{r4, r5, lr}
 80075ee:	6902      	ldr	r2, [r0, #16]
 80075f0:	690c      	ldr	r4, [r1, #16]
 80075f2:	1b12      	subs	r2, r2, r4
 80075f4:	d10e      	bne.n	8007614 <__mcmp+0x28>
 80075f6:	f100 0314 	add.w	r3, r0, #20
 80075fa:	3114      	adds	r1, #20
 80075fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007600:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007604:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007608:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800760c:	42a5      	cmp	r5, r4
 800760e:	d003      	beq.n	8007618 <__mcmp+0x2c>
 8007610:	d305      	bcc.n	800761e <__mcmp+0x32>
 8007612:	2201      	movs	r2, #1
 8007614:	4610      	mov	r0, r2
 8007616:	bd30      	pop	{r4, r5, pc}
 8007618:	4283      	cmp	r3, r0
 800761a:	d3f3      	bcc.n	8007604 <__mcmp+0x18>
 800761c:	e7fa      	b.n	8007614 <__mcmp+0x28>
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	e7f7      	b.n	8007614 <__mcmp+0x28>

08007624 <__mdiff>:
 8007624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	460c      	mov	r4, r1
 800762a:	4606      	mov	r6, r0
 800762c:	4611      	mov	r1, r2
 800762e:	4620      	mov	r0, r4
 8007630:	4690      	mov	r8, r2
 8007632:	f7ff ffdb 	bl	80075ec <__mcmp>
 8007636:	1e05      	subs	r5, r0, #0
 8007638:	d110      	bne.n	800765c <__mdiff+0x38>
 800763a:	4629      	mov	r1, r5
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff fd59 	bl	80070f4 <_Balloc>
 8007642:	b930      	cbnz	r0, 8007652 <__mdiff+0x2e>
 8007644:	4b3a      	ldr	r3, [pc, #232]	; (8007730 <__mdiff+0x10c>)
 8007646:	4602      	mov	r2, r0
 8007648:	f240 2137 	movw	r1, #567	; 0x237
 800764c:	4839      	ldr	r0, [pc, #228]	; (8007734 <__mdiff+0x110>)
 800764e:	f000 faed 	bl	8007c2c <__assert_func>
 8007652:	2301      	movs	r3, #1
 8007654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765c:	bfa4      	itt	ge
 800765e:	4643      	movge	r3, r8
 8007660:	46a0      	movge	r8, r4
 8007662:	4630      	mov	r0, r6
 8007664:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007668:	bfa6      	itte	ge
 800766a:	461c      	movge	r4, r3
 800766c:	2500      	movge	r5, #0
 800766e:	2501      	movlt	r5, #1
 8007670:	f7ff fd40 	bl	80070f4 <_Balloc>
 8007674:	b920      	cbnz	r0, 8007680 <__mdiff+0x5c>
 8007676:	4b2e      	ldr	r3, [pc, #184]	; (8007730 <__mdiff+0x10c>)
 8007678:	4602      	mov	r2, r0
 800767a:	f240 2145 	movw	r1, #581	; 0x245
 800767e:	e7e5      	b.n	800764c <__mdiff+0x28>
 8007680:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007684:	6926      	ldr	r6, [r4, #16]
 8007686:	60c5      	str	r5, [r0, #12]
 8007688:	f104 0914 	add.w	r9, r4, #20
 800768c:	f108 0514 	add.w	r5, r8, #20
 8007690:	f100 0e14 	add.w	lr, r0, #20
 8007694:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007698:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800769c:	f108 0210 	add.w	r2, r8, #16
 80076a0:	46f2      	mov	sl, lr
 80076a2:	2100      	movs	r1, #0
 80076a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80076a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076ac:	fa11 f88b 	uxtah	r8, r1, fp
 80076b0:	b299      	uxth	r1, r3
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	eba8 0801 	sub.w	r8, r8, r1
 80076b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076c0:	fa1f f888 	uxth.w	r8, r8
 80076c4:	1419      	asrs	r1, r3, #16
 80076c6:	454e      	cmp	r6, r9
 80076c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076cc:	f84a 3b04 	str.w	r3, [sl], #4
 80076d0:	d8e8      	bhi.n	80076a4 <__mdiff+0x80>
 80076d2:	1b33      	subs	r3, r6, r4
 80076d4:	3b15      	subs	r3, #21
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	3304      	adds	r3, #4
 80076dc:	3415      	adds	r4, #21
 80076de:	42a6      	cmp	r6, r4
 80076e0:	bf38      	it	cc
 80076e2:	2304      	movcc	r3, #4
 80076e4:	441d      	add	r5, r3
 80076e6:	4473      	add	r3, lr
 80076e8:	469e      	mov	lr, r3
 80076ea:	462e      	mov	r6, r5
 80076ec:	4566      	cmp	r6, ip
 80076ee:	d30e      	bcc.n	800770e <__mdiff+0xea>
 80076f0:	f10c 0203 	add.w	r2, ip, #3
 80076f4:	1b52      	subs	r2, r2, r5
 80076f6:	f022 0203 	bic.w	r2, r2, #3
 80076fa:	3d03      	subs	r5, #3
 80076fc:	45ac      	cmp	ip, r5
 80076fe:	bf38      	it	cc
 8007700:	2200      	movcc	r2, #0
 8007702:	4413      	add	r3, r2
 8007704:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007708:	b17a      	cbz	r2, 800772a <__mdiff+0x106>
 800770a:	6107      	str	r7, [r0, #16]
 800770c:	e7a4      	b.n	8007658 <__mdiff+0x34>
 800770e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007712:	fa11 f288 	uxtah	r2, r1, r8
 8007716:	1414      	asrs	r4, r2, #16
 8007718:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800771c:	b292      	uxth	r2, r2
 800771e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007722:	f84e 2b04 	str.w	r2, [lr], #4
 8007726:	1421      	asrs	r1, r4, #16
 8007728:	e7e0      	b.n	80076ec <__mdiff+0xc8>
 800772a:	3f01      	subs	r7, #1
 800772c:	e7ea      	b.n	8007704 <__mdiff+0xe0>
 800772e:	bf00      	nop
 8007730:	08008444 	.word	0x08008444
 8007734:	08008455 	.word	0x08008455

08007738 <__d2b>:
 8007738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800773c:	460f      	mov	r7, r1
 800773e:	2101      	movs	r1, #1
 8007740:	ec59 8b10 	vmov	r8, r9, d0
 8007744:	4616      	mov	r6, r2
 8007746:	f7ff fcd5 	bl	80070f4 <_Balloc>
 800774a:	4604      	mov	r4, r0
 800774c:	b930      	cbnz	r0, 800775c <__d2b+0x24>
 800774e:	4602      	mov	r2, r0
 8007750:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <__d2b+0xac>)
 8007752:	4825      	ldr	r0, [pc, #148]	; (80077e8 <__d2b+0xb0>)
 8007754:	f240 310f 	movw	r1, #783	; 0x30f
 8007758:	f000 fa68 	bl	8007c2c <__assert_func>
 800775c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007764:	bb2d      	cbnz	r5, 80077b2 <__d2b+0x7a>
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	f1b8 0300 	subs.w	r3, r8, #0
 800776c:	d026      	beq.n	80077bc <__d2b+0x84>
 800776e:	4668      	mov	r0, sp
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	f7ff fd87 	bl	8007284 <__lo0bits>
 8007776:	e9dd 1200 	ldrd	r1, r2, [sp]
 800777a:	b1e8      	cbz	r0, 80077b8 <__d2b+0x80>
 800777c:	f1c0 0320 	rsb	r3, r0, #32
 8007780:	fa02 f303 	lsl.w	r3, r2, r3
 8007784:	430b      	orrs	r3, r1
 8007786:	40c2      	lsrs	r2, r0
 8007788:	6163      	str	r3, [r4, #20]
 800778a:	9201      	str	r2, [sp, #4]
 800778c:	9b01      	ldr	r3, [sp, #4]
 800778e:	61a3      	str	r3, [r4, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	bf14      	ite	ne
 8007794:	2202      	movne	r2, #2
 8007796:	2201      	moveq	r2, #1
 8007798:	6122      	str	r2, [r4, #16]
 800779a:	b1bd      	cbz	r5, 80077cc <__d2b+0x94>
 800779c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077a0:	4405      	add	r5, r0
 80077a2:	603d      	str	r5, [r7, #0]
 80077a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077a8:	6030      	str	r0, [r6, #0]
 80077aa:	4620      	mov	r0, r4
 80077ac:	b003      	add	sp, #12
 80077ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077b6:	e7d6      	b.n	8007766 <__d2b+0x2e>
 80077b8:	6161      	str	r1, [r4, #20]
 80077ba:	e7e7      	b.n	800778c <__d2b+0x54>
 80077bc:	a801      	add	r0, sp, #4
 80077be:	f7ff fd61 	bl	8007284 <__lo0bits>
 80077c2:	9b01      	ldr	r3, [sp, #4]
 80077c4:	6163      	str	r3, [r4, #20]
 80077c6:	3020      	adds	r0, #32
 80077c8:	2201      	movs	r2, #1
 80077ca:	e7e5      	b.n	8007798 <__d2b+0x60>
 80077cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077d4:	6038      	str	r0, [r7, #0]
 80077d6:	6918      	ldr	r0, [r3, #16]
 80077d8:	f7ff fd34 	bl	8007244 <__hi0bits>
 80077dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077e0:	e7e2      	b.n	80077a8 <__d2b+0x70>
 80077e2:	bf00      	nop
 80077e4:	08008444 	.word	0x08008444
 80077e8:	08008455 	.word	0x08008455

080077ec <__ssputs_r>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	688e      	ldr	r6, [r1, #8]
 80077f2:	461f      	mov	r7, r3
 80077f4:	42be      	cmp	r6, r7
 80077f6:	680b      	ldr	r3, [r1, #0]
 80077f8:	4682      	mov	sl, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4690      	mov	r8, r2
 80077fe:	d82c      	bhi.n	800785a <__ssputs_r+0x6e>
 8007800:	898a      	ldrh	r2, [r1, #12]
 8007802:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007806:	d026      	beq.n	8007856 <__ssputs_r+0x6a>
 8007808:	6965      	ldr	r5, [r4, #20]
 800780a:	6909      	ldr	r1, [r1, #16]
 800780c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007810:	eba3 0901 	sub.w	r9, r3, r1
 8007814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007818:	1c7b      	adds	r3, r7, #1
 800781a:	444b      	add	r3, r9
 800781c:	106d      	asrs	r5, r5, #1
 800781e:	429d      	cmp	r5, r3
 8007820:	bf38      	it	cc
 8007822:	461d      	movcc	r5, r3
 8007824:	0553      	lsls	r3, r2, #21
 8007826:	d527      	bpl.n	8007878 <__ssputs_r+0x8c>
 8007828:	4629      	mov	r1, r5
 800782a:	f7fd fea3 	bl	8005574 <_malloc_r>
 800782e:	4606      	mov	r6, r0
 8007830:	b360      	cbz	r0, 800788c <__ssputs_r+0xa0>
 8007832:	6921      	ldr	r1, [r4, #16]
 8007834:	464a      	mov	r2, r9
 8007836:	f7fe fd88 	bl	800634a <memcpy>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007844:	81a3      	strh	r3, [r4, #12]
 8007846:	6126      	str	r6, [r4, #16]
 8007848:	6165      	str	r5, [r4, #20]
 800784a:	444e      	add	r6, r9
 800784c:	eba5 0509 	sub.w	r5, r5, r9
 8007850:	6026      	str	r6, [r4, #0]
 8007852:	60a5      	str	r5, [r4, #8]
 8007854:	463e      	mov	r6, r7
 8007856:	42be      	cmp	r6, r7
 8007858:	d900      	bls.n	800785c <__ssputs_r+0x70>
 800785a:	463e      	mov	r6, r7
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4632      	mov	r2, r6
 8007860:	4641      	mov	r1, r8
 8007862:	f000 f9c9 	bl	8007bf8 <memmove>
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	1b9b      	subs	r3, r3, r6
 800786a:	60a3      	str	r3, [r4, #8]
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	4433      	add	r3, r6
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	2000      	movs	r0, #0
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	462a      	mov	r2, r5
 800787a:	f000 fa1d 	bl	8007cb8 <_realloc_r>
 800787e:	4606      	mov	r6, r0
 8007880:	2800      	cmp	r0, #0
 8007882:	d1e0      	bne.n	8007846 <__ssputs_r+0x5a>
 8007884:	6921      	ldr	r1, [r4, #16]
 8007886:	4650      	mov	r0, sl
 8007888:	f7ff fbe8 	bl	800705c <_free_r>
 800788c:	230c      	movs	r3, #12
 800788e:	f8ca 3000 	str.w	r3, [sl]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	e7e9      	b.n	8007874 <__ssputs_r+0x88>

080078a0 <_svfiprintf_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	4698      	mov	r8, r3
 80078a6:	898b      	ldrh	r3, [r1, #12]
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	b09d      	sub	sp, #116	; 0x74
 80078ac:	4607      	mov	r7, r0
 80078ae:	460d      	mov	r5, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	d50e      	bpl.n	80078d2 <_svfiprintf_r+0x32>
 80078b4:	690b      	ldr	r3, [r1, #16]
 80078b6:	b963      	cbnz	r3, 80078d2 <_svfiprintf_r+0x32>
 80078b8:	2140      	movs	r1, #64	; 0x40
 80078ba:	f7fd fe5b 	bl	8005574 <_malloc_r>
 80078be:	6028      	str	r0, [r5, #0]
 80078c0:	6128      	str	r0, [r5, #16]
 80078c2:	b920      	cbnz	r0, 80078ce <_svfiprintf_r+0x2e>
 80078c4:	230c      	movs	r3, #12
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	e0d0      	b.n	8007a70 <_svfiprintf_r+0x1d0>
 80078ce:	2340      	movs	r3, #64	; 0x40
 80078d0:	616b      	str	r3, [r5, #20]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9309      	str	r3, [sp, #36]	; 0x24
 80078d6:	2320      	movs	r3, #32
 80078d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80078e0:	2330      	movs	r3, #48	; 0x30
 80078e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a88 <_svfiprintf_r+0x1e8>
 80078e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ea:	f04f 0901 	mov.w	r9, #1
 80078ee:	4623      	mov	r3, r4
 80078f0:	469a      	mov	sl, r3
 80078f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f6:	b10a      	cbz	r2, 80078fc <_svfiprintf_r+0x5c>
 80078f8:	2a25      	cmp	r2, #37	; 0x25
 80078fa:	d1f9      	bne.n	80078f0 <_svfiprintf_r+0x50>
 80078fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007900:	d00b      	beq.n	800791a <_svfiprintf_r+0x7a>
 8007902:	465b      	mov	r3, fp
 8007904:	4622      	mov	r2, r4
 8007906:	4629      	mov	r1, r5
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff ff6f 	bl	80077ec <__ssputs_r>
 800790e:	3001      	adds	r0, #1
 8007910:	f000 80a9 	beq.w	8007a66 <_svfiprintf_r+0x1c6>
 8007914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007916:	445a      	add	r2, fp
 8007918:	9209      	str	r2, [sp, #36]	; 0x24
 800791a:	f89a 3000 	ldrb.w	r3, [sl]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80a1 	beq.w	8007a66 <_svfiprintf_r+0x1c6>
 8007924:	2300      	movs	r3, #0
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800792e:	f10a 0a01 	add.w	sl, sl, #1
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	9307      	str	r3, [sp, #28]
 8007936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800793a:	931a      	str	r3, [sp, #104]	; 0x68
 800793c:	4654      	mov	r4, sl
 800793e:	2205      	movs	r2, #5
 8007940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007944:	4850      	ldr	r0, [pc, #320]	; (8007a88 <_svfiprintf_r+0x1e8>)
 8007946:	f7f8 fc63 	bl	8000210 <memchr>
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	b9d8      	cbnz	r0, 8007986 <_svfiprintf_r+0xe6>
 800794e:	06d0      	lsls	r0, r2, #27
 8007950:	bf44      	itt	mi
 8007952:	2320      	movmi	r3, #32
 8007954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007958:	0711      	lsls	r1, r2, #28
 800795a:	bf44      	itt	mi
 800795c:	232b      	movmi	r3, #43	; 0x2b
 800795e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007962:	f89a 3000 	ldrb.w	r3, [sl]
 8007966:	2b2a      	cmp	r3, #42	; 0x2a
 8007968:	d015      	beq.n	8007996 <_svfiprintf_r+0xf6>
 800796a:	9a07      	ldr	r2, [sp, #28]
 800796c:	4654      	mov	r4, sl
 800796e:	2000      	movs	r0, #0
 8007970:	f04f 0c0a 	mov.w	ip, #10
 8007974:	4621      	mov	r1, r4
 8007976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800797a:	3b30      	subs	r3, #48	; 0x30
 800797c:	2b09      	cmp	r3, #9
 800797e:	d94d      	bls.n	8007a1c <_svfiprintf_r+0x17c>
 8007980:	b1b0      	cbz	r0, 80079b0 <_svfiprintf_r+0x110>
 8007982:	9207      	str	r2, [sp, #28]
 8007984:	e014      	b.n	80079b0 <_svfiprintf_r+0x110>
 8007986:	eba0 0308 	sub.w	r3, r0, r8
 800798a:	fa09 f303 	lsl.w	r3, r9, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	46a2      	mov	sl, r4
 8007994:	e7d2      	b.n	800793c <_svfiprintf_r+0x9c>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	1d19      	adds	r1, r3, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bfbb      	ittet	lt
 80079a2:	425b      	neglt	r3, r3
 80079a4:	f042 0202 	orrlt.w	r2, r2, #2
 80079a8:	9307      	strge	r3, [sp, #28]
 80079aa:	9307      	strlt	r3, [sp, #28]
 80079ac:	bfb8      	it	lt
 80079ae:	9204      	strlt	r2, [sp, #16]
 80079b0:	7823      	ldrb	r3, [r4, #0]
 80079b2:	2b2e      	cmp	r3, #46	; 0x2e
 80079b4:	d10c      	bne.n	80079d0 <_svfiprintf_r+0x130>
 80079b6:	7863      	ldrb	r3, [r4, #1]
 80079b8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ba:	d134      	bne.n	8007a26 <_svfiprintf_r+0x186>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	9203      	str	r2, [sp, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfb8      	it	lt
 80079c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079cc:	3402      	adds	r4, #2
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a98 <_svfiprintf_r+0x1f8>
 80079d4:	7821      	ldrb	r1, [r4, #0]
 80079d6:	2203      	movs	r2, #3
 80079d8:	4650      	mov	r0, sl
 80079da:	f7f8 fc19 	bl	8000210 <memchr>
 80079de:	b138      	cbz	r0, 80079f0 <_svfiprintf_r+0x150>
 80079e0:	9b04      	ldr	r3, [sp, #16]
 80079e2:	eba0 000a 	sub.w	r0, r0, sl
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	4082      	lsls	r2, r0
 80079ea:	4313      	orrs	r3, r2
 80079ec:	3401      	adds	r4, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	4825      	ldr	r0, [pc, #148]	; (8007a8c <_svfiprintf_r+0x1ec>)
 80079f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079fa:	2206      	movs	r2, #6
 80079fc:	f7f8 fc08 	bl	8000210 <memchr>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d038      	beq.n	8007a76 <_svfiprintf_r+0x1d6>
 8007a04:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <_svfiprintf_r+0x1f0>)
 8007a06:	bb1b      	cbnz	r3, 8007a50 <_svfiprintf_r+0x1b0>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	3308      	adds	r3, #8
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	4433      	add	r3, r6
 8007a18:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1a:	e768      	b.n	80078ee <_svfiprintf_r+0x4e>
 8007a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a20:	460c      	mov	r4, r1
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7a6      	b.n	8007974 <_svfiprintf_r+0xd4>
 8007a26:	2300      	movs	r3, #0
 8007a28:	3401      	adds	r4, #1
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f04f 0c0a 	mov.w	ip, #10
 8007a32:	4620      	mov	r0, r4
 8007a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a38:	3a30      	subs	r2, #48	; 0x30
 8007a3a:	2a09      	cmp	r2, #9
 8007a3c:	d903      	bls.n	8007a46 <_svfiprintf_r+0x1a6>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0c6      	beq.n	80079d0 <_svfiprintf_r+0x130>
 8007a42:	9105      	str	r1, [sp, #20]
 8007a44:	e7c4      	b.n	80079d0 <_svfiprintf_r+0x130>
 8007a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7f0      	b.n	8007a32 <_svfiprintf_r+0x192>
 8007a50:	ab03      	add	r3, sp, #12
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <_svfiprintf_r+0x1f4>)
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f7fd feb6 	bl	80057cc <_printf_float>
 8007a60:	1c42      	adds	r2, r0, #1
 8007a62:	4606      	mov	r6, r0
 8007a64:	d1d6      	bne.n	8007a14 <_svfiprintf_r+0x174>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	f53f af2d 	bmi.w	80078c8 <_svfiprintf_r+0x28>
 8007a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a70:	b01d      	add	sp, #116	; 0x74
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	ab03      	add	r3, sp, #12
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <_svfiprintf_r+0x1f4>)
 8007a7e:	a904      	add	r1, sp, #16
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7fe f947 	bl	8005d14 <_printf_i>
 8007a86:	e7eb      	b.n	8007a60 <_svfiprintf_r+0x1c0>
 8007a88:	080085ac 	.word	0x080085ac
 8007a8c:	080085b6 	.word	0x080085b6
 8007a90:	080057cd 	.word	0x080057cd
 8007a94:	080077ed 	.word	0x080077ed
 8007a98:	080085b2 	.word	0x080085b2

08007a9c <__sflush_r>:
 8007a9c:	898a      	ldrh	r2, [r1, #12]
 8007a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	0710      	lsls	r0, r2, #28
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	d458      	bmi.n	8007b5c <__sflush_r+0xc0>
 8007aaa:	684b      	ldr	r3, [r1, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc05      	bgt.n	8007abc <__sflush_r+0x20>
 8007ab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dc02      	bgt.n	8007abc <__sflush_r+0x20>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	d0f9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ac8:	682f      	ldr	r7, [r5, #0]
 8007aca:	6a21      	ldr	r1, [r4, #32]
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	d032      	beq.n	8007b36 <__sflush_r+0x9a>
 8007ad0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	075a      	lsls	r2, r3, #29
 8007ad6:	d505      	bpl.n	8007ae4 <__sflush_r+0x48>
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	1ac0      	subs	r0, r0, r3
 8007adc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ade:	b10b      	cbz	r3, 8007ae4 <__sflush_r+0x48>
 8007ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ae2:	1ac0      	subs	r0, r0, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aea:	6a21      	ldr	r1, [r4, #32]
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b0      	blx	r6
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	d106      	bne.n	8007b04 <__sflush_r+0x68>
 8007af6:	6829      	ldr	r1, [r5, #0]
 8007af8:	291d      	cmp	r1, #29
 8007afa:	d82b      	bhi.n	8007b54 <__sflush_r+0xb8>
 8007afc:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <__sflush_r+0x108>)
 8007afe:	410a      	asrs	r2, r1
 8007b00:	07d6      	lsls	r6, r2, #31
 8007b02:	d427      	bmi.n	8007b54 <__sflush_r+0xb8>
 8007b04:	2200      	movs	r2, #0
 8007b06:	6062      	str	r2, [r4, #4]
 8007b08:	04d9      	lsls	r1, r3, #19
 8007b0a:	6922      	ldr	r2, [r4, #16]
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	d504      	bpl.n	8007b1a <__sflush_r+0x7e>
 8007b10:	1c42      	adds	r2, r0, #1
 8007b12:	d101      	bne.n	8007b18 <__sflush_r+0x7c>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b903      	cbnz	r3, 8007b1a <__sflush_r+0x7e>
 8007b18:	6560      	str	r0, [r4, #84]	; 0x54
 8007b1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1c:	602f      	str	r7, [r5, #0]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d0c9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b26:	4299      	cmp	r1, r3
 8007b28:	d002      	beq.n	8007b30 <__sflush_r+0x94>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7ff fa96 	bl	800705c <_free_r>
 8007b30:	2000      	movs	r0, #0
 8007b32:	6360      	str	r0, [r4, #52]	; 0x34
 8007b34:	e7c0      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b0      	blx	r6
 8007b3c:	1c41      	adds	r1, r0, #1
 8007b3e:	d1c8      	bne.n	8007ad2 <__sflush_r+0x36>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0c5      	beq.n	8007ad2 <__sflush_r+0x36>
 8007b46:	2b1d      	cmp	r3, #29
 8007b48:	d001      	beq.n	8007b4e <__sflush_r+0xb2>
 8007b4a:	2b16      	cmp	r3, #22
 8007b4c:	d101      	bne.n	8007b52 <__sflush_r+0xb6>
 8007b4e:	602f      	str	r7, [r5, #0]
 8007b50:	e7b1      	b.n	8007ab6 <__sflush_r+0x1a>
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7ad      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b5c:	690f      	ldr	r7, [r1, #16]
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	d0a9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007b62:	0793      	lsls	r3, r2, #30
 8007b64:	680e      	ldr	r6, [r1, #0]
 8007b66:	bf08      	it	eq
 8007b68:	694b      	ldreq	r3, [r1, #20]
 8007b6a:	600f      	str	r7, [r1, #0]
 8007b6c:	bf18      	it	ne
 8007b6e:	2300      	movne	r3, #0
 8007b70:	eba6 0807 	sub.w	r8, r6, r7
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	f1b8 0f00 	cmp.w	r8, #0
 8007b7a:	dd9c      	ble.n	8007ab6 <__sflush_r+0x1a>
 8007b7c:	6a21      	ldr	r1, [r4, #32]
 8007b7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b80:	4643      	mov	r3, r8
 8007b82:	463a      	mov	r2, r7
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b0      	blx	r6
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dc06      	bgt.n	8007b9a <__sflush_r+0xfe>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e78e      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b9a:	4407      	add	r7, r0
 8007b9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ba0:	e7e9      	b.n	8007b76 <__sflush_r+0xda>
 8007ba2:	bf00      	nop
 8007ba4:	dfbffffe 	.word	0xdfbffffe

08007ba8 <_fflush_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	690b      	ldr	r3, [r1, #16]
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	b913      	cbnz	r3, 8007bb8 <_fflush_r+0x10>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	b118      	cbz	r0, 8007bc2 <_fflush_r+0x1a>
 8007bba:	6a03      	ldr	r3, [r0, #32]
 8007bbc:	b90b      	cbnz	r3, 8007bc2 <_fflush_r+0x1a>
 8007bbe:	f7fe fa57 	bl	8006070 <__sinit>
 8007bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f3      	beq.n	8007bb2 <_fflush_r+0xa>
 8007bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bcc:	07d0      	lsls	r0, r2, #31
 8007bce:	d404      	bmi.n	8007bda <_fflush_r+0x32>
 8007bd0:	0599      	lsls	r1, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_fflush_r+0x32>
 8007bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd6:	f7fe fbb6 	bl	8006346 <__retarget_lock_acquire_recursive>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	4621      	mov	r1, r4
 8007bde:	f7ff ff5d 	bl	8007a9c <__sflush_r>
 8007be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be4:	07da      	lsls	r2, r3, #31
 8007be6:	4605      	mov	r5, r0
 8007be8:	d4e4      	bmi.n	8007bb4 <_fflush_r+0xc>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	059b      	lsls	r3, r3, #22
 8007bee:	d4e1      	bmi.n	8007bb4 <_fflush_r+0xc>
 8007bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf2:	f7fe fba9 	bl	8006348 <__retarget_lock_release_recursive>
 8007bf6:	e7dd      	b.n	8007bb4 <_fflush_r+0xc>

08007bf8 <memmove>:
 8007bf8:	4288      	cmp	r0, r1
 8007bfa:	b510      	push	{r4, lr}
 8007bfc:	eb01 0402 	add.w	r4, r1, r2
 8007c00:	d902      	bls.n	8007c08 <memmove+0x10>
 8007c02:	4284      	cmp	r4, r0
 8007c04:	4623      	mov	r3, r4
 8007c06:	d807      	bhi.n	8007c18 <memmove+0x20>
 8007c08:	1e43      	subs	r3, r0, #1
 8007c0a:	42a1      	cmp	r1, r4
 8007c0c:	d008      	beq.n	8007c20 <memmove+0x28>
 8007c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c16:	e7f8      	b.n	8007c0a <memmove+0x12>
 8007c18:	4402      	add	r2, r0
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	428a      	cmp	r2, r1
 8007c1e:	d100      	bne.n	8007c22 <memmove+0x2a>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2a:	e7f7      	b.n	8007c1c <memmove+0x24>

08007c2c <__assert_func>:
 8007c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c2e:	4614      	mov	r4, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <__assert_func+0x2c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4605      	mov	r5, r0
 8007c38:	68d8      	ldr	r0, [r3, #12]
 8007c3a:	b14c      	cbz	r4, 8007c50 <__assert_func+0x24>
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <__assert_func+0x30>)
 8007c3e:	9100      	str	r1, [sp, #0]
 8007c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c44:	4906      	ldr	r1, [pc, #24]	; (8007c60 <__assert_func+0x34>)
 8007c46:	462b      	mov	r3, r5
 8007c48:	f000 f872 	bl	8007d30 <fiprintf>
 8007c4c:	f7fd fc5a 	bl	8005504 <abort>
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <__assert_func+0x38>)
 8007c52:	461c      	mov	r4, r3
 8007c54:	e7f3      	b.n	8007c3e <__assert_func+0x12>
 8007c56:	bf00      	nop
 8007c58:	20000064 	.word	0x20000064
 8007c5c:	080085c7 	.word	0x080085c7
 8007c60:	080085d4 	.word	0x080085d4
 8007c64:	08008602 	.word	0x08008602

08007c68 <_calloc_r>:
 8007c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c6a:	fba1 2402 	umull	r2, r4, r1, r2
 8007c6e:	b94c      	cbnz	r4, 8007c84 <_calloc_r+0x1c>
 8007c70:	4611      	mov	r1, r2
 8007c72:	9201      	str	r2, [sp, #4]
 8007c74:	f7fd fc7e 	bl	8005574 <_malloc_r>
 8007c78:	9a01      	ldr	r2, [sp, #4]
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	b930      	cbnz	r0, 8007c8c <_calloc_r+0x24>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	b003      	add	sp, #12
 8007c82:	bd30      	pop	{r4, r5, pc}
 8007c84:	220c      	movs	r2, #12
 8007c86:	6002      	str	r2, [r0, #0]
 8007c88:	2500      	movs	r5, #0
 8007c8a:	e7f8      	b.n	8007c7e <_calloc_r+0x16>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	f7fe fa88 	bl	80061a2 <memset>
 8007c92:	e7f4      	b.n	8007c7e <_calloc_r+0x16>

08007c94 <__ascii_mbtowc>:
 8007c94:	b082      	sub	sp, #8
 8007c96:	b901      	cbnz	r1, 8007c9a <__ascii_mbtowc+0x6>
 8007c98:	a901      	add	r1, sp, #4
 8007c9a:	b142      	cbz	r2, 8007cae <__ascii_mbtowc+0x1a>
 8007c9c:	b14b      	cbz	r3, 8007cb2 <__ascii_mbtowc+0x1e>
 8007c9e:	7813      	ldrb	r3, [r2, #0]
 8007ca0:	600b      	str	r3, [r1, #0]
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	1e10      	subs	r0, r2, #0
 8007ca6:	bf18      	it	ne
 8007ca8:	2001      	movne	r0, #1
 8007caa:	b002      	add	sp, #8
 8007cac:	4770      	bx	lr
 8007cae:	4610      	mov	r0, r2
 8007cb0:	e7fb      	b.n	8007caa <__ascii_mbtowc+0x16>
 8007cb2:	f06f 0001 	mvn.w	r0, #1
 8007cb6:	e7f8      	b.n	8007caa <__ascii_mbtowc+0x16>

08007cb8 <_realloc_r>:
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4614      	mov	r4, r2
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	b921      	cbnz	r1, 8007cce <_realloc_r+0x16>
 8007cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc8:	4611      	mov	r1, r2
 8007cca:	f7fd bc53 	b.w	8005574 <_malloc_r>
 8007cce:	b92a      	cbnz	r2, 8007cdc <_realloc_r+0x24>
 8007cd0:	f7ff f9c4 	bl	800705c <_free_r>
 8007cd4:	4625      	mov	r5, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cdc:	f000 f83a 	bl	8007d54 <_malloc_usable_size_r>
 8007ce0:	4284      	cmp	r4, r0
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	d802      	bhi.n	8007cec <_realloc_r+0x34>
 8007ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cea:	d812      	bhi.n	8007d12 <_realloc_r+0x5a>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7fd fc40 	bl	8005574 <_malloc_r>
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d0ed      	beq.n	8007cd6 <_realloc_r+0x1e>
 8007cfa:	42bc      	cmp	r4, r7
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4631      	mov	r1, r6
 8007d00:	bf28      	it	cs
 8007d02:	463a      	movcs	r2, r7
 8007d04:	f7fe fb21 	bl	800634a <memcpy>
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	f7ff f9a6 	bl	800705c <_free_r>
 8007d10:	e7e1      	b.n	8007cd6 <_realloc_r+0x1e>
 8007d12:	4635      	mov	r5, r6
 8007d14:	e7df      	b.n	8007cd6 <_realloc_r+0x1e>

08007d16 <__ascii_wctomb>:
 8007d16:	b149      	cbz	r1, 8007d2c <__ascii_wctomb+0x16>
 8007d18:	2aff      	cmp	r2, #255	; 0xff
 8007d1a:	bf85      	ittet	hi
 8007d1c:	238a      	movhi	r3, #138	; 0x8a
 8007d1e:	6003      	strhi	r3, [r0, #0]
 8007d20:	700a      	strbls	r2, [r1, #0]
 8007d22:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d26:	bf98      	it	ls
 8007d28:	2001      	movls	r0, #1
 8007d2a:	4770      	bx	lr
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	4770      	bx	lr

08007d30 <fiprintf>:
 8007d30:	b40e      	push	{r1, r2, r3}
 8007d32:	b503      	push	{r0, r1, lr}
 8007d34:	4601      	mov	r1, r0
 8007d36:	ab03      	add	r3, sp, #12
 8007d38:	4805      	ldr	r0, [pc, #20]	; (8007d50 <fiprintf+0x20>)
 8007d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	f000 f839 	bl	8007db8 <_vfiprintf_r>
 8007d46:	b002      	add	sp, #8
 8007d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d4c:	b003      	add	sp, #12
 8007d4e:	4770      	bx	lr
 8007d50:	20000064 	.word	0x20000064

08007d54 <_malloc_usable_size_r>:
 8007d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d58:	1f18      	subs	r0, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfbc      	itt	lt
 8007d5e:	580b      	ldrlt	r3, [r1, r0]
 8007d60:	18c0      	addlt	r0, r0, r3
 8007d62:	4770      	bx	lr

08007d64 <__sfputc_r>:
 8007d64:	6893      	ldr	r3, [r2, #8]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	b410      	push	{r4}
 8007d6c:	6093      	str	r3, [r2, #8]
 8007d6e:	da08      	bge.n	8007d82 <__sfputc_r+0x1e>
 8007d70:	6994      	ldr	r4, [r2, #24]
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	db01      	blt.n	8007d7a <__sfputc_r+0x16>
 8007d76:	290a      	cmp	r1, #10
 8007d78:	d103      	bne.n	8007d82 <__sfputc_r+0x1e>
 8007d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d7e:	f000 b935 	b.w	8007fec <__swbuf_r>
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	1c58      	adds	r0, r3, #1
 8007d86:	6010      	str	r0, [r2, #0]
 8007d88:	7019      	strb	r1, [r3, #0]
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <__sfputs_r>:
 8007d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d94:	4606      	mov	r6, r0
 8007d96:	460f      	mov	r7, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	18d5      	adds	r5, r2, r3
 8007d9c:	42ac      	cmp	r4, r5
 8007d9e:	d101      	bne.n	8007da4 <__sfputs_r+0x12>
 8007da0:	2000      	movs	r0, #0
 8007da2:	e007      	b.n	8007db4 <__sfputs_r+0x22>
 8007da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da8:	463a      	mov	r2, r7
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ffda 	bl	8007d64 <__sfputc_r>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d1f3      	bne.n	8007d9c <__sfputs_r+0xa>
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007db8 <_vfiprintf_r>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	b09d      	sub	sp, #116	; 0x74
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	4698      	mov	r8, r3
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	b118      	cbz	r0, 8007dd0 <_vfiprintf_r+0x18>
 8007dc8:	6a03      	ldr	r3, [r0, #32]
 8007dca:	b90b      	cbnz	r3, 8007dd0 <_vfiprintf_r+0x18>
 8007dcc:	f7fe f950 	bl	8006070 <__sinit>
 8007dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd2:	07d9      	lsls	r1, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_vfiprintf_r+0x2a>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	059a      	lsls	r2, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_vfiprintf_r+0x2a>
 8007ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dde:	f7fe fab2 	bl	8006346 <__retarget_lock_acquire_recursive>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	071b      	lsls	r3, r3, #28
 8007de6:	d501      	bpl.n	8007dec <_vfiprintf_r+0x34>
 8007de8:	692b      	ldr	r3, [r5, #16]
 8007dea:	b99b      	cbnz	r3, 8007e14 <_vfiprintf_r+0x5c>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 f93a 	bl	8008068 <__swsetup_r>
 8007df4:	b170      	cbz	r0, 8007e14 <_vfiprintf_r+0x5c>
 8007df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df8:	07dc      	lsls	r4, r3, #31
 8007dfa:	d504      	bpl.n	8007e06 <_vfiprintf_r+0x4e>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b01d      	add	sp, #116	; 0x74
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	0598      	lsls	r0, r3, #22
 8007e0a:	d4f7      	bmi.n	8007dfc <_vfiprintf_r+0x44>
 8007e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0e:	f7fe fa9b 	bl	8006348 <__retarget_lock_release_recursive>
 8007e12:	e7f3      	b.n	8007dfc <_vfiprintf_r+0x44>
 8007e14:	2300      	movs	r3, #0
 8007e16:	9309      	str	r3, [sp, #36]	; 0x24
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e22:	2330      	movs	r3, #48	; 0x30
 8007e24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007fd8 <_vfiprintf_r+0x220>
 8007e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e2c:	f04f 0901 	mov.w	r9, #1
 8007e30:	4623      	mov	r3, r4
 8007e32:	469a      	mov	sl, r3
 8007e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e38:	b10a      	cbz	r2, 8007e3e <_vfiprintf_r+0x86>
 8007e3a:	2a25      	cmp	r2, #37	; 0x25
 8007e3c:	d1f9      	bne.n	8007e32 <_vfiprintf_r+0x7a>
 8007e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e42:	d00b      	beq.n	8007e5c <_vfiprintf_r+0xa4>
 8007e44:	465b      	mov	r3, fp
 8007e46:	4622      	mov	r2, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ffa1 	bl	8007d92 <__sfputs_r>
 8007e50:	3001      	adds	r0, #1
 8007e52:	f000 80a9 	beq.w	8007fa8 <_vfiprintf_r+0x1f0>
 8007e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e58:	445a      	add	r2, fp
 8007e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80a1 	beq.w	8007fa8 <_vfiprintf_r+0x1f0>
 8007e66:	2300      	movs	r3, #0
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e70:	f10a 0a01 	add.w	sl, sl, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	9307      	str	r3, [sp, #28]
 8007e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e7e:	4654      	mov	r4, sl
 8007e80:	2205      	movs	r2, #5
 8007e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e86:	4854      	ldr	r0, [pc, #336]	; (8007fd8 <_vfiprintf_r+0x220>)
 8007e88:	f7f8 f9c2 	bl	8000210 <memchr>
 8007e8c:	9a04      	ldr	r2, [sp, #16]
 8007e8e:	b9d8      	cbnz	r0, 8007ec8 <_vfiprintf_r+0x110>
 8007e90:	06d1      	lsls	r1, r2, #27
 8007e92:	bf44      	itt	mi
 8007e94:	2320      	movmi	r3, #32
 8007e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e9a:	0713      	lsls	r3, r2, #28
 8007e9c:	bf44      	itt	mi
 8007e9e:	232b      	movmi	r3, #43	; 0x2b
 8007ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eaa:	d015      	beq.n	8007ed8 <_vfiprintf_r+0x120>
 8007eac:	9a07      	ldr	r2, [sp, #28]
 8007eae:	4654      	mov	r4, sl
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f04f 0c0a 	mov.w	ip, #10
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ebc:	3b30      	subs	r3, #48	; 0x30
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d94d      	bls.n	8007f5e <_vfiprintf_r+0x1a6>
 8007ec2:	b1b0      	cbz	r0, 8007ef2 <_vfiprintf_r+0x13a>
 8007ec4:	9207      	str	r2, [sp, #28]
 8007ec6:	e014      	b.n	8007ef2 <_vfiprintf_r+0x13a>
 8007ec8:	eba0 0308 	sub.w	r3, r0, r8
 8007ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	46a2      	mov	sl, r4
 8007ed6:	e7d2      	b.n	8007e7e <_vfiprintf_r+0xc6>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	1d19      	adds	r1, r3, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	9103      	str	r1, [sp, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bfbb      	ittet	lt
 8007ee4:	425b      	neglt	r3, r3
 8007ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eea:	9307      	strge	r3, [sp, #28]
 8007eec:	9307      	strlt	r3, [sp, #28]
 8007eee:	bfb8      	it	lt
 8007ef0:	9204      	strlt	r2, [sp, #16]
 8007ef2:	7823      	ldrb	r3, [r4, #0]
 8007ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ef6:	d10c      	bne.n	8007f12 <_vfiprintf_r+0x15a>
 8007ef8:	7863      	ldrb	r3, [r4, #1]
 8007efa:	2b2a      	cmp	r3, #42	; 0x2a
 8007efc:	d134      	bne.n	8007f68 <_vfiprintf_r+0x1b0>
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	9203      	str	r2, [sp, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bfb8      	it	lt
 8007f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f0e:	3402      	adds	r4, #2
 8007f10:	9305      	str	r3, [sp, #20]
 8007f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fe8 <_vfiprintf_r+0x230>
 8007f16:	7821      	ldrb	r1, [r4, #0]
 8007f18:	2203      	movs	r2, #3
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	f7f8 f978 	bl	8000210 <memchr>
 8007f20:	b138      	cbz	r0, 8007f32 <_vfiprintf_r+0x17a>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	eba0 000a 	sub.w	r0, r0, sl
 8007f28:	2240      	movs	r2, #64	; 0x40
 8007f2a:	4082      	lsls	r2, r0
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	3401      	adds	r4, #1
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f36:	4829      	ldr	r0, [pc, #164]	; (8007fdc <_vfiprintf_r+0x224>)
 8007f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f3c:	2206      	movs	r2, #6
 8007f3e:	f7f8 f967 	bl	8000210 <memchr>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d03f      	beq.n	8007fc6 <_vfiprintf_r+0x20e>
 8007f46:	4b26      	ldr	r3, [pc, #152]	; (8007fe0 <_vfiprintf_r+0x228>)
 8007f48:	bb1b      	cbnz	r3, 8007f92 <_vfiprintf_r+0x1da>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	3307      	adds	r3, #7
 8007f4e:	f023 0307 	bic.w	r3, r3, #7
 8007f52:	3308      	adds	r3, #8
 8007f54:	9303      	str	r3, [sp, #12]
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	443b      	add	r3, r7
 8007f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5c:	e768      	b.n	8007e30 <_vfiprintf_r+0x78>
 8007f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f62:	460c      	mov	r4, r1
 8007f64:	2001      	movs	r0, #1
 8007f66:	e7a6      	b.n	8007eb6 <_vfiprintf_r+0xfe>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	3401      	adds	r4, #1
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	f04f 0c0a 	mov.w	ip, #10
 8007f74:	4620      	mov	r0, r4
 8007f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f7a:	3a30      	subs	r2, #48	; 0x30
 8007f7c:	2a09      	cmp	r2, #9
 8007f7e:	d903      	bls.n	8007f88 <_vfiprintf_r+0x1d0>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0c6      	beq.n	8007f12 <_vfiprintf_r+0x15a>
 8007f84:	9105      	str	r1, [sp, #20]
 8007f86:	e7c4      	b.n	8007f12 <_vfiprintf_r+0x15a>
 8007f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e7f0      	b.n	8007f74 <_vfiprintf_r+0x1bc>
 8007f92:	ab03      	add	r3, sp, #12
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	462a      	mov	r2, r5
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <_vfiprintf_r+0x22c>)
 8007f9a:	a904      	add	r1, sp, #16
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7fd fc15 	bl	80057cc <_printf_float>
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	1c78      	adds	r0, r7, #1
 8007fa6:	d1d6      	bne.n	8007f56 <_vfiprintf_r+0x19e>
 8007fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007faa:	07d9      	lsls	r1, r3, #31
 8007fac:	d405      	bmi.n	8007fba <_vfiprintf_r+0x202>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	059a      	lsls	r2, r3, #22
 8007fb2:	d402      	bmi.n	8007fba <_vfiprintf_r+0x202>
 8007fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb6:	f7fe f9c7 	bl	8006348 <__retarget_lock_release_recursive>
 8007fba:	89ab      	ldrh	r3, [r5, #12]
 8007fbc:	065b      	lsls	r3, r3, #25
 8007fbe:	f53f af1d 	bmi.w	8007dfc <_vfiprintf_r+0x44>
 8007fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc4:	e71c      	b.n	8007e00 <_vfiprintf_r+0x48>
 8007fc6:	ab03      	add	r3, sp, #12
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <_vfiprintf_r+0x22c>)
 8007fce:	a904      	add	r1, sp, #16
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7fd fe9f 	bl	8005d14 <_printf_i>
 8007fd6:	e7e4      	b.n	8007fa2 <_vfiprintf_r+0x1ea>
 8007fd8:	080085ac 	.word	0x080085ac
 8007fdc:	080085b6 	.word	0x080085b6
 8007fe0:	080057cd 	.word	0x080057cd
 8007fe4:	08007d93 	.word	0x08007d93
 8007fe8:	080085b2 	.word	0x080085b2

08007fec <__swbuf_r>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	460e      	mov	r6, r1
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	b118      	cbz	r0, 8007ffe <__swbuf_r+0x12>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <__swbuf_r+0x12>
 8007ffa:	f7fe f839 	bl	8006070 <__sinit>
 8007ffe:	69a3      	ldr	r3, [r4, #24]
 8008000:	60a3      	str	r3, [r4, #8]
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	071a      	lsls	r2, r3, #28
 8008006:	d525      	bpl.n	8008054 <__swbuf_r+0x68>
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	b31b      	cbz	r3, 8008054 <__swbuf_r+0x68>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	1a98      	subs	r0, r3, r2
 8008012:	6963      	ldr	r3, [r4, #20]
 8008014:	b2f6      	uxtb	r6, r6
 8008016:	4283      	cmp	r3, r0
 8008018:	4637      	mov	r7, r6
 800801a:	dc04      	bgt.n	8008026 <__swbuf_r+0x3a>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f7ff fdc2 	bl	8007ba8 <_fflush_r>
 8008024:	b9e0      	cbnz	r0, 8008060 <__swbuf_r+0x74>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	3b01      	subs	r3, #1
 800802a:	60a3      	str	r3, [r4, #8]
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	6022      	str	r2, [r4, #0]
 8008032:	701e      	strb	r6, [r3, #0]
 8008034:	6962      	ldr	r2, [r4, #20]
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	429a      	cmp	r2, r3
 800803a:	d004      	beq.n	8008046 <__swbuf_r+0x5a>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	07db      	lsls	r3, r3, #31
 8008040:	d506      	bpl.n	8008050 <__swbuf_r+0x64>
 8008042:	2e0a      	cmp	r6, #10
 8008044:	d104      	bne.n	8008050 <__swbuf_r+0x64>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fdad 	bl	8007ba8 <_fflush_r>
 800804e:	b938      	cbnz	r0, 8008060 <__swbuf_r+0x74>
 8008050:	4638      	mov	r0, r7
 8008052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 f806 	bl	8008068 <__swsetup_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	d0d5      	beq.n	800800c <__swbuf_r+0x20>
 8008060:	f04f 37ff 	mov.w	r7, #4294967295
 8008064:	e7f4      	b.n	8008050 <__swbuf_r+0x64>
	...

08008068 <__swsetup_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4b2a      	ldr	r3, [pc, #168]	; (8008114 <__swsetup_r+0xac>)
 800806c:	4605      	mov	r5, r0
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	460c      	mov	r4, r1
 8008072:	b118      	cbz	r0, 800807c <__swsetup_r+0x14>
 8008074:	6a03      	ldr	r3, [r0, #32]
 8008076:	b90b      	cbnz	r3, 800807c <__swsetup_r+0x14>
 8008078:	f7fd fffa 	bl	8006070 <__sinit>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008082:	0718      	lsls	r0, r3, #28
 8008084:	d422      	bmi.n	80080cc <__swsetup_r+0x64>
 8008086:	06d9      	lsls	r1, r3, #27
 8008088:	d407      	bmi.n	800809a <__swsetup_r+0x32>
 800808a:	2309      	movs	r3, #9
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e034      	b.n	8008104 <__swsetup_r+0x9c>
 800809a:	0758      	lsls	r0, r3, #29
 800809c:	d512      	bpl.n	80080c4 <__swsetup_r+0x5c>
 800809e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a0:	b141      	cbz	r1, 80080b4 <__swsetup_r+0x4c>
 80080a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a6:	4299      	cmp	r1, r3
 80080a8:	d002      	beq.n	80080b0 <__swsetup_r+0x48>
 80080aa:	4628      	mov	r0, r5
 80080ac:	f7fe ffd6 	bl	800705c <_free_r>
 80080b0:	2300      	movs	r3, #0
 80080b2:	6363      	str	r3, [r4, #52]	; 0x34
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	2300      	movs	r3, #0
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f043 0308 	orr.w	r3, r3, #8
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	b94b      	cbnz	r3, 80080e4 <__swsetup_r+0x7c>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080da:	d003      	beq.n	80080e4 <__swsetup_r+0x7c>
 80080dc:	4621      	mov	r1, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 f840 	bl	8008164 <__smakebuf_r>
 80080e4:	89a0      	ldrh	r0, [r4, #12]
 80080e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ea:	f010 0301 	ands.w	r3, r0, #1
 80080ee:	d00a      	beq.n	8008106 <__swsetup_r+0x9e>
 80080f0:	2300      	movs	r3, #0
 80080f2:	60a3      	str	r3, [r4, #8]
 80080f4:	6963      	ldr	r3, [r4, #20]
 80080f6:	425b      	negs	r3, r3
 80080f8:	61a3      	str	r3, [r4, #24]
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	b943      	cbnz	r3, 8008110 <__swsetup_r+0xa8>
 80080fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008102:	d1c4      	bne.n	800808e <__swsetup_r+0x26>
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	0781      	lsls	r1, r0, #30
 8008108:	bf58      	it	pl
 800810a:	6963      	ldrpl	r3, [r4, #20]
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	e7f4      	b.n	80080fa <__swsetup_r+0x92>
 8008110:	2000      	movs	r0, #0
 8008112:	e7f7      	b.n	8008104 <__swsetup_r+0x9c>
 8008114:	20000064 	.word	0x20000064

08008118 <__swhatbuf_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008120:	2900      	cmp	r1, #0
 8008122:	b096      	sub	sp, #88	; 0x58
 8008124:	4615      	mov	r5, r2
 8008126:	461e      	mov	r6, r3
 8008128:	da0d      	bge.n	8008146 <__swhatbuf_r+0x2e>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	bf0c      	ite	eq
 8008136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800813a:	2340      	movne	r3, #64	; 0x40
 800813c:	2000      	movs	r0, #0
 800813e:	6031      	str	r1, [r6, #0]
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	b016      	add	sp, #88	; 0x58
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	466a      	mov	r2, sp
 8008148:	f000 f848 	bl	80081dc <_fstat_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	dbec      	blt.n	800812a <__swhatbuf_r+0x12>
 8008150:	9901      	ldr	r1, [sp, #4]
 8008152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800815a:	4259      	negs	r1, r3
 800815c:	4159      	adcs	r1, r3
 800815e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008162:	e7eb      	b.n	800813c <__swhatbuf_r+0x24>

08008164 <__smakebuf_r>:
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008168:	079d      	lsls	r5, r3, #30
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	d507      	bpl.n	8008180 <__smakebuf_r+0x1c>
 8008170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2301      	movs	r3, #1
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	b002      	add	sp, #8
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	ab01      	add	r3, sp, #4
 8008182:	466a      	mov	r2, sp
 8008184:	f7ff ffc8 	bl	8008118 <__swhatbuf_r>
 8008188:	9900      	ldr	r1, [sp, #0]
 800818a:	4605      	mov	r5, r0
 800818c:	4630      	mov	r0, r6
 800818e:	f7fd f9f1 	bl	8005574 <_malloc_r>
 8008192:	b948      	cbnz	r0, 80081a8 <__smakebuf_r+0x44>
 8008194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008198:	059a      	lsls	r2, r3, #22
 800819a:	d4ef      	bmi.n	800817c <__smakebuf_r+0x18>
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	e7e3      	b.n	8008170 <__smakebuf_r+0xc>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	6020      	str	r0, [r4, #0]
 80081ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	6163      	str	r3, [r4, #20]
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	6120      	str	r0, [r4, #16]
 80081ba:	b15b      	cbz	r3, 80081d4 <__smakebuf_r+0x70>
 80081bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f81d 	bl	8008200 <_isatty_r>
 80081c6:	b128      	cbz	r0, 80081d4 <__smakebuf_r+0x70>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	f043 0301 	orr.w	r3, r3, #1
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	431d      	orrs	r5, r3
 80081d8:	81a5      	strh	r5, [r4, #12]
 80081da:	e7cf      	b.n	800817c <__smakebuf_r+0x18>

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_fstat_r+0x20>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7fa fd36 	bl	8002c5a <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	2000056c 	.word	0x2000056c

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	; (800821c <_isatty_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa fd35 	bl	8002c7a <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	2000056c 	.word	0x2000056c

08008220 <_init>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr

0800822c <_fini>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	bf00      	nop
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr
