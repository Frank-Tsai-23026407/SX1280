
OBJ_F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080083a0  080083a0  000183a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800887c  0800887c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008884  08008884  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001d8  08008a68  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08008a68  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021544  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000414f  00000000  00000000  0004178b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  000458e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eed  00000000  00000000  00046c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285d1  00000000  00000000  00047af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001813b  00000000  00000000  000700c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df20e  00000000  00000000  00088201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006428  00000000  00000000  00167410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008388 	.word	0x08008388

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008388 	.word	0x08008388

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
		return 0;
 800101c:	2300      	movs	r3, #0
	}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3344      	adds	r3, #68	; 0x44
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f240 1153 	movw	r1, #339	; 0x153
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
 8001042:	4603      	mov	r3, r0
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21c      	sxth	r4, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3344      	adds	r3, #68	; 0x44
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
 800105a:	b21b      	sxth	r3, r3
 800105c:	4323      	orrs	r3, r4
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}

0800106a <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 800106a:	b590      	push	{r4, r7, lr}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3334      	adds	r3, #52	; 0x34
 800107c:	681c      	ldr	r4, [r3, #0]
 800107e:	f107 020f 	add.w	r2, r7, #15
 8001082:	2301      	movs	r3, #1
 8001084:	21c0      	movs	r1, #192	; 0xc0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	47a0      	blx	r4
	status.Value = stat;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	733b      	strb	r3, [r7, #12]
	return( status );
 800108e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}

08001098 <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 80010b2:	b590      	push	{r4, r7, lr}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3330      	adds	r3, #48	; 0x30
 80010c4:	681c      	ldr	r4, [r3, #0]
 80010c6:	1cfa      	adds	r2, r7, #3
 80010c8:	2301      	movs	r3, #1
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d104      	bne.n	80010e0 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2202      	movs	r2, #2
 80010da:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 80010de:	e003      	b.n	80010e8 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <_ZN6SX128x5SetRxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_TX, buf, 3 );
	OperatingMode = MODE_TX;
}

void SX128x::SetRx(TickTime_t timeout )
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 80010fa:	783b      	ldrb	r3, [r7, #0]
 80010fc:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73bb      	strb	r3, [r7, #14]
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
//	}

	HalPostTx();
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3314      	adds	r3, #20
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
	HalPreRx();
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3310      	adds	r3, #16
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
	WriteCommand( RADIO_SET_RX, buf, 3 );
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3330      	adds	r3, #48	; 0x30
 800112c:	681c      	ldr	r4, [r3, #0]
 800112e:	f107 020c 	add.w	r2, r7, #12
 8001132:	2303      	movs	r3, #3
 8001134:	2182      	movs	r1, #130	; 0x82
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	47a0      	blx	r4
	OperatingMode = MODE_RX;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}

0800114a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3330      	adds	r3, #48	; 0x30
 8001164:	681c      	ldr	r4, [r3, #0]
 8001166:	1cfa      	adds	r2, r7, #3
 8001168:	2301      	movs	r3, #1
 800116a:	218a      	movs	r1, #138	; 0x8a
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	47a0      	blx	r4
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <_ZN6SX128x13GetPacketTypeEb>:

SX128x::RadioPacketTypes_t SX128x::GetPacketType(bool returnLocalCopy )
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001184:	230f      	movs	r3, #15
 8001186:	73fb      	strb	r3, [r7, #15]
	if (returnLocalCopy == false )
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d114      	bne.n	80011b8 <_ZN6SX128x13GetPacketTypeEb+0x40>
	{
		ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3334      	adds	r3, #52	; 0x34
 8001194:	681c      	ldr	r4, [r3, #0]
 8001196:	f107 020f 	add.w	r2, r7, #15
 800119a:	2301      	movs	r3, #1
 800119c:	2103      	movs	r1, #3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	47a0      	blx	r4
		if (this->PacketType != packetType )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d008      	beq.n	80011c0 <_ZN6SX128x13GetPacketTypeEb+0x48>
		{
			this->PacketType = packetType;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80011b6:	e003      	b.n	80011c0 <_ZN6SX128x13GetPacketTypeEb+0x48>
		}
	}
	else
	{
		packetType = this->PacketType;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80011be:	73fb      	strb	r3, [r7, #15]
	}
	return packetType;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}

080011ca <_ZN6SX128x14SetRfFrequencyEm>:

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff f9b3 	bl	8000544 <__aeabi_ui2d>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011e4:	f7ff fb52 	bl	800088c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcfa 	bl	8000be8 <__aeabi_d2uiz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	0c1b      	lsrs	r3, r3, #16
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	b2db      	uxtb	r3, r3
 8001206:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3330      	adds	r3, #48	; 0x30
 8001214:	681c      	ldr	r4, [r3, #0]
 8001216:	f107 0208 	add.w	r2, r7, #8
 800121a:	2303      	movs	r3, #3
 800121c:	2186      	movs	r1, #134	; 0x86
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	47a0      	blx	r4
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}

0800122a <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	70fb      	strb	r3, [r7, #3]
 8001236:	4613      	mov	r3, r2
 8001238:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3330      	adds	r3, #48	; 0x30
 8001248:	681c      	ldr	r4, [r3, #0]
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	2302      	movs	r3, #2
 8001250:	218f      	movs	r1, #143	; 0x8f
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	47a0      	blx	r4
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
	...

08001260 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d005      	beq.n	8001284 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff63 	bl	800114a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d857      	bhi.n	800133c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 800128c:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 800128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001292:	bf00      	nop
 8001294:	080012d5 	.word	0x080012d5
 8001298:	080012e9 	.word	0x080012e9
 800129c:	080012e9 	.word	0x080012e9
 80012a0:	08001307 	.word	0x08001307
 80012a4:	0800131b 	.word	0x0800131b
 80012a8:	0800133d 	.word	0x0800133d
 80012ac:	0800133d 	.word	0x0800133d
 80012b0:	0800133d 	.word	0x0800133d
 80012b4:	0800133d 	.word	0x0800133d
 80012b8:	0800133d 	.word	0x0800133d
 80012bc:	0800133d 	.word	0x0800133d
 80012c0:	0800133d 	.word	0x0800133d
 80012c4:	0800133d 	.word	0x0800133d
 80012c8:	0800133d 	.word	0x0800133d
 80012cc:	0800133d 	.word	0x0800133d
 80012d0:	0800132f 	.word	0x0800132f
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	789b      	ldrb	r3, [r3, #2]
 80012de:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	73bb      	strb	r3, [r7, #14]
			break;
 80012e6:	e029      	b.n	800133c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	795b      	ldrb	r3, [r3, #5]
 80012f2:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	799b      	ldrb	r3, [r3, #6]
 80012f8:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	795a      	ldrb	r2, [r3, #5]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 8001304:	e01a      	b.n	800133c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	79db      	ldrb	r3, [r3, #7]
 800130a:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	7a1b      	ldrb	r3, [r3, #8]
 8001310:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	7a5b      	ldrb	r3, [r3, #9]
 8001316:	73bb      	strb	r3, [r7, #14]
			break;
 8001318:	e010      	b.n	800133c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	7a9b      	ldrb	r3, [r3, #10]
 800131e:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	7adb      	ldrb	r3, [r3, #11]
 8001324:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7b1b      	ldrb	r3, [r3, #12]
 800132a:	73bb      	strb	r3, [r7, #14]
			break;
 800132c:	e006      	b.n	800133c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73bb      	strb	r3, [r7, #14]
			break;
 800133a:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3330      	adds	r3, #48	; 0x30
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	2303      	movs	r3, #3
 800134a:	218b      	movs	r1, #139	; 0x8b
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	47a0      	blx	r4
	CurrentModParams = modParams;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	33ab      	adds	r3, #171	; 0xab
 8001356:	6814      	ldr	r4, [r2, #0]
 8001358:	6850      	ldr	r0, [r2, #4]
 800135a:	6891      	ldr	r1, [r2, #8]
 800135c:	601c      	str	r4, [r3, #0]
 800135e:	6058      	str	r0, [r3, #4]
 8001360:	6099      	str	r1, [r3, #8]
 8001362:	7b12      	ldrb	r2, [r2, #12]
 8001364:	731a      	strb	r2, [r3, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	bf00      	nop

08001370 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d005      	beq.n	8001394 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fedb 	bl	800114a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	f200 8085 	bhi.w	80014a8 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	080013e5 	.word	0x080013e5
 80013a8:	08001411 	.word	0x08001411
 80013ac:	08001411 	.word	0x08001411
 80013b0:	08001439 	.word	0x08001439
 80013b4:	08001465 	.word	0x08001465
 80013b8:	080014a9 	.word	0x080014a9
 80013bc:	080014a9 	.word	0x080014a9
 80013c0:	080014a9 	.word	0x080014a9
 80013c4:	080014a9 	.word	0x080014a9
 80013c8:	080014a9 	.word	0x080014a9
 80013cc:	080014a9 	.word	0x080014a9
 80013d0:	080014a9 	.word	0x080014a9
 80013d4:	080014a9 	.word	0x080014a9
 80013d8:	080014a9 	.word	0x080014a9
 80013dc:	080014a9 	.word	0x080014a9
 80013e0:	0800148b 	.word	0x0800148b
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	78db      	ldrb	r3, [r3, #3]
 80013f4:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	795b      	ldrb	r3, [r3, #5]
 8001400:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	799b      	ldrb	r3, [r3, #6]
 8001406:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	79db      	ldrb	r3, [r3, #7]
 800140c:	73bb      	strb	r3, [r7, #14]
			break;
 800140e:	e04b      	b.n	80014a8 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	7a1b      	ldrb	r3, [r3, #8]
 8001414:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	7a5b      	ldrb	r3, [r3, #9]
 800141a:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	7a9b      	ldrb	r3, [r3, #10]
 8001420:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7adb      	ldrb	r3, [r3, #11]
 8001426:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	7b1b      	ldrb	r3, [r3, #12]
 800142c:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
			break;
 8001436:	e037      	b.n	80014a8 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	7b5b      	ldrb	r3, [r3, #13]
 800143c:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	7b9b      	ldrb	r3, [r3, #14]
 8001442:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	7bdb      	ldrb	r3, [r3, #15]
 8001448:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	7c1b      	ldrb	r3, [r3, #16]
 800144e:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	7c5b      	ldrb	r3, [r3, #17]
 8001454:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	7c9b      	ldrb	r3, [r3, #18]
 800145a:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	7cdb      	ldrb	r3, [r3, #19]
 8001460:	73bb      	strb	r3, [r7, #14]
			break;
 8001462:	e021      	b.n	80014a8 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	7d1b      	ldrb	r3, [r3, #20]
 8001468:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7d5b      	ldrb	r3, [r3, #21]
 800146e:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	7d9b      	ldrb	r3, [r3, #22]
 8001474:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	7ddb      	ldrb	r3, [r3, #23]
 800147a:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
			break;
 8001488:	e00e      	b.n	80014a8 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73bb      	strb	r3, [r7, #14]
			break;
 80014a6:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3330      	adds	r3, #48	; 0x30
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	2307      	movs	r3, #7
 80014b6:	218c      	movs	r1, #140	; 0x8c
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80014c4:	4615      	mov	r5, r2
 80014c6:	6828      	ldr	r0, [r5, #0]
 80014c8:	6869      	ldr	r1, [r5, #4]
 80014ca:	68aa      	ldr	r2, [r5, #8]
 80014cc:	68eb      	ldr	r3, [r5, #12]
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	6928      	ldr	r0, [r5, #16]
 80014d2:	6969      	ldr	r1, [r5, #20]
 80014d4:	c403      	stmia	r4!, {r0, r1}
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdb0      	pop	{r4, r5, r7, pc}
 80014de:	bf00      	nop

080014e0 <_ZN6SX128x17GetRxBufferStatusEPhS0_>:
{
	this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX128x::GetRxBufferStatus(uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	uint8_t status[2];

	ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3334      	adds	r3, #52	; 0x34
 80014f2:	681c      	ldr	r4, [r3, #0]
 80014f4:	f107 0214 	add.w	r2, r7, #20
 80014f8:	2302      	movs	r3, #2
 80014fa:	2117      	movs	r1, #23
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	47a0      	blx	r4

	// In case of LORA fixed header, the rxPayloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if (( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8001500:	2101      	movs	r1, #1
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff fe38 	bl	8001178 <_ZN6SX128x13GetPacketTypeEb>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10e      	bne.n	800152c <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4c>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3344      	adds	r3, #68	; 0x44
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f640 1103 	movw	r1, #2307	; 0x903
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	4798      	blx	r3
 800151e:	4603      	mov	r3, r0
 8001520:	09db      	lsrs	r3, r3, #7
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4c>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4e>
 800152c:	2300      	movs	r3, #0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00c      	beq.n	800154c <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x6c>
	{
		*rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3344      	adds	r3, #68	; 0x44
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f640 1101 	movw	r1, #2305	; 0x901
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	4798      	blx	r3
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e014      	b.n	8001576 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x96>
	}
	else if (this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 800154c:	2101      	movs	r1, #1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fe12 	bl	8001178 <_ZN6SX128x13GetPacketTypeEb>
 8001554:	4603      	mov	r3, r0
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf0c      	ite	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	2300      	movne	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x90>
	{
		// In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
		// so it is added there
		*rxPayloadLength = status[0] + 2;
 8001564:	7d3b      	ldrb	r3, [r7, #20]
 8001566:	3302      	adds	r3, #2
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e002      	b.n	8001576 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x96>
	}
	else
	{
		*rxPayloadLength = status[0];
 8001570:	7d3a      	ldrb	r2, [r7, #20]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	701a      	strb	r2, [r3, #0]
	}

	*rxStartBufferPointer = status[1];
 8001576:	7d7a      	ldrb	r2, [r7, #21]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	701a      	strb	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	817b      	strh	r3, [r7, #10]
 8001596:	460b      	mov	r3, r1
 8001598:	813b      	strh	r3, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80015ae:	893b      	ldrh	r3, [r7, #8]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80015b8:	893b      	ldrh	r3, [r7, #8]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80015ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80015d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3330      	adds	r3, #48	; 0x30
 80015e4:	681c      	ldr	r4, [r3, #0]
 80015e6:	f107 0210 	add.w	r2, r7, #16
 80015ea:	2308      	movs	r3, #8
 80015ec:	218d      	movs	r1, #141	; 0x8d
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	47a0      	blx	r4
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}

080015fa <_ZN6SX128x14ClearIrqStatusEt>:
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
	return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	b29b      	uxth	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3330      	adds	r3, #48	; 0x30
 800161c:	681c      	ldr	r4, [r3, #0]
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	2302      	movs	r3, #2
 8001624:	2197      	movs	r1, #151	; 0x97
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	47a0      	blx	r4
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 8001632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	4613      	mov	r3, r2
 8001640:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
}
 8001642:	466b      	mov	r3, sp
 8001644:	461e      	mov	r6, r3
	uint8_t useless[size];
 8001646:	88f9      	ldrh	r1, [r7, #6]
 8001648:	460b      	mov	r3, r1
 800164a:	3b01      	subs	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	b28b      	uxth	r3, r1
 8001650:	2200      	movs	r2, #0
 8001652:	4698      	mov	r8, r3
 8001654:	4691      	mov	r9, r2
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800166a:	b28b      	uxth	r3, r1
 800166c:	2200      	movs	r2, #0
 800166e:	461c      	mov	r4, r3
 8001670:	4615      	mov	r5, r2
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	00eb      	lsls	r3, r5, #3
 800167c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001680:	00e2      	lsls	r2, r4, #3
 8001682:	460b      	mov	r3, r1
 8001684:	3307      	adds	r3, #7
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	ebad 0d03 	sub.w	sp, sp, r3
 800168e:	466b      	mov	r3, sp
 8001690:	3300      	adds	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3308      	adds	r3, #8
 800169a:	681c      	ldr	r4, [r3, #0]
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	47a0      	blx	r4
 80016a6:	46b5      	mov	sp, r6
}
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080016b2 <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY));
 80016ba:	bf00      	nop
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f1      	bne.n	80016bc <_ZN6SX128x10WaitOnBusyEv+0xa>
//	HAL_Delay(1);
//	for(int i = 0; i < 100; i++);
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 80016ea:	e002      	b.n	80016f2 <_ZN6SX128x14WaitOnBusyLongEv+0x10>
		HAL_Delay(10);
 80016ec:	200a      	movs	r0, #10
 80016ee:	f001 fbb1 	bl	8002e54 <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <_ZN6SX128x14WaitOnBusyLongEv+0xa>
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	2100      	movs	r1, #0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
	HAL_Delay(10);
 8001730:	200a      	movs	r0, #10
 8001732:	f001 fb8f 	bl	8002e54 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3304      	adds	r3, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
	HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f001 fb84 	bl	8002e54 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3304      	adds	r3, #4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	2100      	movs	r1, #0
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
	HAL_Delay(10);
 800175c:	200a      	movs	r0, #10
 800175e:	f001 fb79 	bl	8002e54 <HAL_Delay>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2202      	movs	r2, #2
 800177c:	4619      	mov	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff57 	bl	8001632 <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffac 	bl	80016e2 <_ZN6SX128x14WaitOnBusyLongEv>
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	461a      	mov	r2, r3
 800179e:	460b      	mov	r3, r1
 80017a0:	72fb      	strb	r3, [r7, #11]
 80017a2:	4613      	mov	r3, r2
 80017a4:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 80017a6:	893b      	ldrh	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	3307      	adds	r3, #7
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	ebad 0d03 	sub.w	sp, sp, r3
 80017b4:	466b      	mov	r3, sp
 80017b6:	3307      	adds	r3, #7
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	7afa      	ldrb	r2, [r7, #11]
 80017c2:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	893a      	ldrh	r2, [r7, #8]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fe6e 	bl	80064ae <memcpy>

	WaitOnBusy();
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff ff6d 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 80017d8:	893b      	ldrh	r3, [r7, #8]
 80017da:	3301      	adds	r3, #1
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	6979      	ldr	r1, [r7, #20]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff ff25 	bl	8001632 <_ZN6SX128x11HalSpiWriteEPKht>
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	461a      	mov	r2, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	72fb      	strb	r3, [r7, #11]
 8001800:	4613      	mov	r3, r2
 8001802:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	2bc0      	cmp	r3, #192	; 0xc0
 8001808:	d11a      	bne.n	8001840 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	2100      	movs	r1, #0
 8001810:	460a      	mov	r2, r1
 8001812:	801a      	strh	r2, [r3, #0]
 8001814:	460a      	mov	r2, r1
 8001816:	709a      	strb	r2, [r3, #2]
 8001818:	7afb      	ldrb	r3, [r7, #11]
 800181a:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff ff48 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3308      	adds	r3, #8
 8001828:	681c      	ldr	r4, [r3, #0]
 800182a:	f107 0218 	add.w	r2, r7, #24
 800182e:	f107 0114 	add.w	r1, r7, #20
 8001832:	2303      	movs	r3, #3
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 8001838:	7d3a      	ldrb	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 800183e:	e035      	b.n	80018ac <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 8001840:	893b      	ldrh	r3, [r7, #8]
 8001842:	3302      	adds	r3, #2
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	3307      	adds	r3, #7
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	ebad 0d03 	sub.w	sp, sp, r3
 8001852:	466b      	mov	r3, sp
 8001854:	3307      	adds	r3, #7
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3307      	adds	r3, #7
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	ebad 0d03 	sub.w	sp, sp, r3
 8001868:	466b      	mov	r3, sp
 800186a:	3307      	adds	r3, #7
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	461a      	mov	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	6a38      	ldr	r0, [r7, #32]
 800187a:	f004 fd44 	bl	8006306 <memset>
		buf_out[0] = opcode;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	7afa      	ldrb	r2, [r7, #11]
 8001882:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff ff14 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3308      	adds	r3, #8
 8001890:	681c      	ldr	r4, [r3, #0]
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	b29b      	uxth	r3, r3
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3302      	adds	r3, #2
 80018a2:	893a      	ldrh	r2, [r7, #8]
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f004 fe01 	bl	80064ae <memcpy>
}
 80018ac:	bf00      	nop
 80018ae:	372c      	adds	r7, #44	; 0x2c
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	817b      	strh	r3, [r7, #10]
 80018c4:	4613      	mov	r3, r2
 80018c6:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	3303      	adds	r3, #3
 80018cc:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3307      	adds	r3, #7
 80018d2:	08db      	lsrs	r3, r3, #3
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	ebad 0d03 	sub.w	sp, sp, r3
 80018da:	466b      	mov	r3, sp
 80018dc:	3307      	adds	r3, #7
 80018de:	08db      	lsrs	r3, r3, #3
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2218      	movs	r2, #24
 80018e8:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	3301      	adds	r3, #1
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3302      	adds	r3, #2
 80018fc:	897a      	ldrh	r2, [r7, #10]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3303      	adds	r3, #3
 8001906:	893a      	ldrh	r2, [r7, #8]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f004 fdcf 	bl	80064ae <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff fece 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	b29b      	uxth	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff fe87 	bl	8001632 <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3338      	adds	r3, #56	; 0x38
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	1c7a      	adds	r2, r7, #1
 8001946:	8879      	ldrh	r1, [r7, #2]
 8001948:	2301      	movs	r3, #1
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	47a0      	blx	r4
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}

08001956 <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b089      	sub	sp, #36	; 0x24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	461a      	mov	r2, r3
 8001962:	460b      	mov	r3, r1
 8001964:	817b      	strh	r3, [r7, #10]
 8001966:	4613      	mov	r3, r2
 8001968:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	3304      	adds	r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3307      	adds	r3, #7
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	ebad 0d03 	sub.w	sp, sp, r3
 800197c:	466b      	mov	r3, sp
 800197e:	3307      	adds	r3, #7
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3307      	adds	r3, #7
 800198a:	08db      	lsrs	r3, r3, #3
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	ebad 0d03 	sub.w	sp, sp, r3
 8001992:	466b      	mov	r3, sp
 8001994:	3307      	adds	r3, #7
 8001996:	08db      	lsrs	r3, r3, #3
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	461a      	mov	r2, r3
 80019a0:	2100      	movs	r1, #0
 80019a2:	69b8      	ldr	r0, [r7, #24]
 80019a4:	f004 fcaf 	bl	8006306 <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2219      	movs	r2, #25
 80019ac:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 80019ae:	897b      	ldrh	r3, [r7, #10]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	3302      	adds	r3, #2
 80019c0:	897a      	ldrh	r2, [r7, #10]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fe73 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3308      	adds	r3, #8
 80019d2:	681c      	ldr	r4, [r3, #0]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3304      	adds	r3, #4
 80019e4:	893a      	ldrh	r2, [r7, #8]
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f004 fd60 	bl	80064ae <memcpy>
}
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}

080019f6 <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 80019f6:	b590      	push	{r4, r7, lr}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3340      	adds	r3, #64	; 0x40
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	f107 020f 	add.w	r2, r7, #15
 8001a0e:	8879      	ldrh	r1, [r7, #2]
 8001a10:	2301      	movs	r3, #1
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	47a0      	blx	r4
	return data;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}

08001a20 <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	72fb      	strb	r3, [r7, #11]
 8001a30:	4613      	mov	r3, r2
 8001a32:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 8001a34:	7abb      	ldrb	r3, [r7, #10]
 8001a36:	3302      	adds	r3, #2
 8001a38:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	08db      	lsrs	r3, r3, #3
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	ebad 0d03 	sub.w	sp, sp, r3
 8001a46:	466b      	mov	r3, sp
 8001a48:	3307      	adds	r3, #7
 8001a4a:	08db      	lsrs	r3, r3, #3
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	221a      	movs	r2, #26
 8001a54:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	7afa      	ldrb	r2, [r7, #11]
 8001a5c:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	3302      	adds	r3, #2
 8001a62:	7aba      	ldrb	r2, [r7, #10]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fd21 	bl	80064ae <memcpy>
	
	WaitOnBusy();
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff fe20 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff fdd9 	bl	8001632 <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	460b      	mov	r3, r1
 8001a96:	72fb      	strb	r3, [r7, #11]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 8001a9c:	7abb      	ldrb	r3, [r7, #10]
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3307      	adds	r3, #7
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	ebad 0d03 	sub.w	sp, sp, r3
 8001aae:	466b      	mov	r3, sp
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3307      	adds	r3, #7
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	ebad 0d03 	sub.w	sp, sp, r3
 8001ac4:	466b      	mov	r3, sp
 8001ac6:	3307      	adds	r3, #7
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	69b8      	ldr	r0, [r7, #24]
 8001ad6:	f004 fc16 	bl	8006306 <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	221b      	movs	r2, #27
 8001ade:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	7afa      	ldrb	r2, [r7, #11]
 8001ae6:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fde2 	bl	80016b2 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3308      	adds	r3, #8
 8001af4:	681c      	ldr	r4, [r3, #0]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	6979      	ldr	r1, [r7, #20]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3303      	adds	r3, #3
 8001b06:	7aba      	ldrb	r2, [r7, #10]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f004 fccf 	bl	80064ae <memcpy>
}
 8001b10:	bf00      	nop
 8001b12:	3724      	adds	r7, #36	; 0x24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_OBJ::CommonTransceiverSetting()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2103      	movs	r1, #3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fac4 	bl	80010b2 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fb0b 	bl	800114a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f7ff fb43 	bl	80011ca <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fb6d 	bl	800122a <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f7ff fb80 	bl	8001260 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7ff fc00 	bl	8001370 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZN10SX128x_OBJ4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_OBJ::Init()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	Reset();
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3328      	adds	r3, #40	; 0x28
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b96:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 8001b98:	f107 0210 	add.w	r2, r7, #16
 8001b9c:	f107 0114 	add.w	r1, r7, #20
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fa7a 	bl	800209c <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>
	RadioStatus_t status;
	status = GetStatus();
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3358      	adds	r3, #88	; 0x58
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4798      	blx	r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 8001bba:	7b3b      	ldrb	r3, [r7, #12]
 8001bbc:	f003 031c 	and.w	r3, r3, #28
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d001      	beq.n	8001bca <_ZN10SX128x_OBJ4InitEv+0x52>
		return 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00b      	b.n	8001be2 <_ZN10SX128x_OBJ4InitEv+0x6a>
	if(status.Fields.ChipMode != 0x03)
 8001bca:	7b3b      	ldrb	r3, [r7, #12]
 8001bcc:	f023 031f 	bic.w	r3, r3, #31
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b60      	cmp	r3, #96	; 0x60
 8001bd4:	d001      	beq.n	8001bda <_ZN10SX128x_OBJ4InitEv+0x62>
		return 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e003      	b.n	8001be2 <_ZN10SX128x_OBJ4InitEv+0x6a>

	CommonTransceiverSetting();
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff9c 	bl	8001b18 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>
	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f964 	bl	8001ec2 <_ZNSt8functionIFvvEEC1Ev>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f95f 	bl	8001ec2 <_ZNSt8functionIFvvEEC1Ev>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3320      	adds	r3, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f95a 	bl	8001ec2 <_ZNSt8functionIFvvEEC1Ev>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3330      	adds	r3, #48	; 0x30
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f955 	bl	8001ec2 <_ZNSt8functionIFvvEEC1Ev>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3340      	adds	r3, #64	; 0x40
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f950 	bl	8001ec2 <_ZNSt8functionIFvvEEC1Ev>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3350      	adds	r3, #80	; 0x50
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f94b 	bl	8001ec2 <_ZNSt8functionIFvvEEC1Ev>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3360      	adds	r3, #96	; 0x60
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f95c 	bl	8001eee <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3370      	adds	r3, #112	; 0x70
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f96d 	bl	8001f1a <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3380      	adds	r3, #128	; 0x80
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f97e 	bl	8001f46 <_ZNSt8functionIFvbEEC1Ev>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	0000      	movs	r0, r0
	...

08001c58 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <_ZN6SX128xC1Ev+0x88>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	a31b      	add	r3, pc, #108	; (adr r3, 8001cd8 <_ZN6SX128xC1Ev+0x80>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	741a      	strb	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7e:	825a      	strh	r2, [r3, #18]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	751a      	strb	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	82da      	strh	r2, [r3, #22]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3318      	adds	r3, #24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ffaa 	bl	8001bea <_ZN6SX128xUt0_C1Ev>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	220a      	movs	r2, #10
 8001caa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	33ab      	adds	r3, #171	; 0xab
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	731a      	strb	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	33b8      	adds	r3, #184	; 0xb8
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	4068cba8 	.word	0x4068cba8
 8001ce0:	08008430 	.word	0x08008430

08001ce4 <_ZN10SX128x_OBJC1Ev>:

SX128x_OBJ::SX128x_OBJ()
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ffb2 	bl	8001c58 <_ZN6SX128xC1Ev>
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <_ZN10SX128x_OBJC1Ev+0xb0>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	33d0      	adds	r3, #208	; 0xd0
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 faff 	bl	8006306 <memset>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <_ZN10SX128x_OBJC1Ev+0xb4>)
 8001d34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF7;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2270      	movs	r2, #112	; 0x70
 8001d44:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2218      	movs	r2, #24
 8001d4c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	220c      	movs	r2, #12
 8001d84:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08008494 	.word	0x08008494
 8001d98:	8f0d1800 	.word	0x8f0d1800

08001d9c <_ZN10SX128x_OBJ9RxSettingEv>:
	SendPayload(tx_sprt, PACKET_SIZE, t, 0x80);

}

void SX128x_OBJ::RxSetting()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
//	SetTxParams(13, RADIO_RAMP_02_US);
//	InterruptSetting();
	SetDioIrqParams(0x4023, 0x0001, 0x0002, 0x4020);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f244 0320 	movw	r3, #16416	; 0x4020
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2302      	movs	r3, #2
 8001dae:	2201      	movs	r2, #1
 8001db0:	f244 0123 	movw	r1, #16419	; 0x4023
 8001db4:	f7ff fbe6 	bl	8001584 <_ZN6SX128x15SetDioIrqParamsEtttt>
//	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_ZN10SX128x_OBJ10RxBlockingEPhh>:

uint8_t SX128x_OBJ::RxBlocking(uint8_t* data_in, uint8_t max_len)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	71fb      	strb	r3, [r7, #7]
	// set tx mode
	TickTime_t timeout;
	timeout.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	timeout.PeriodBaseCount = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
	SetRx(timeout);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f987 	bl	80010f0 <_ZN6SX128x5SetRxENS_10TickTime_sE>

	// wait message
	// while(!HAL_GPIO_ReadPin(GPIOA, GPIO_Pin_8));
	uint8_t tx[7] = {};
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2100      	movs	r1, #0
 8001dec:	460a      	mov	r2, r1
 8001dee:	801a      	strh	r2, [r3, #0]
 8001df0:	460a      	mov	r2, r1
 8001df2:	709a      	strb	r2, [r3, #2]
	uint8_t rx[7] = {};
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	460a      	mov	r2, r1
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	460a      	mov	r2, r1
 8001e04:	709a      	strb	r2, [r3, #2]
	while(1)
	{
		*(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	2215      	movs	r2, #21
 8001e0c:	601a      	str	r2, [r3, #0]
		HalSpiTransfer(rx, tx, 4);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3308      	adds	r3, #8
 8001e14:	681c      	ldr	r4, [r3, #0]
 8001e16:	f107 021c 	add.w	r2, r7, #28
 8001e1a:	f107 0114 	add.w	r1, r7, #20
 8001e1e:	2304      	movs	r3, #4
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	47a0      	blx	r4
		if(rx[3] & 0x02) break;
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d100      	bne.n	8001e30 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x70>
		*(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001e2e:	e7ea      	b.n	8001e06 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x46>
		if(rx[3] & 0x02) break;
 8001e30:	bf00      	nop
	}

	// GetPacketStatus
	*(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	221d      	movs	r2, #29
 8001e38:	601a      	str	r2, [r3, #0]
	*(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	3304      	adds	r3, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
	HalSpiTransfer(rx, tx, 7);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3308      	adds	r3, #8
 8001e4a:	681c      	ldr	r4, [r3, #0]
 8001e4c:	f107 021c 	add.w	r2, r7, #28
 8001e50:	f107 0114 	add.w	r1, r7, #20
 8001e54:	2307      	movs	r3, #7
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	47a0      	blx	r4

	// ClrIrqStatus
	ClearIrqStatus(IRQ_RX_DONE);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fbcb 	bl	80015fa <_ZN6SX128x14ClearIrqStatusEt>

	// GetRxBufferStatus
	uint8_t payload_length, rx_pointer;
	GetRxBufferStatus(&payload_length, &rx_pointer);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f107 0212 	add.w	r2, r7, #18
 8001e6a:	f107 0113 	add.w	r1, r7, #19
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fb36 	bl	80014e0 <_ZN6SX128x17GetRxBufferStatusEPhS0_>

	// ReadBuffer
	if(payload_length > max_len) return 0;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d201      	bcs.n	8001e80 <_ZN10SX128x_OBJ10RxBlockingEPhh+0xc0>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e009      	b.n	8001e94 <_ZN10SX128x_OBJ10RxBlockingEPhh+0xd4>
	ReadBuffer(rx_pointer, data_in, payload_length);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	334c      	adds	r3, #76	; 0x4c
 8001e88:	681c      	ldr	r4, [r3, #0]
 8001e8a:	7cb9      	ldrb	r1, [r7, #18]
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	47a0      	blx	r4

	// FrequencyError

	return payload_length;
 8001e92:	7cfb      	ldrb	r3, [r7, #19]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	372c      	adds	r7, #44	; 0x2c
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd90      	pop	{r4, r7, pc}

08001e9c <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	6053      	str	r3, [r2, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	6053      	str	r3, [r2, #4]
 8001ed4:	6093      	str	r3, [r2, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffdf 	bl	8001e9c <_ZNSt14_Function_baseC1Ev>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2300      	movs	r3, #0
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	6053      	str	r3, [r2, #4]
 8001f00:	6093      	str	r3, [r2, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffc9 	bl	8001e9c <_ZNSt14_Function_baseC1Ev>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	461a      	mov	r2, r3
 8001f26:	2300      	movs	r3, #0
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	6053      	str	r3, [r2, #4]
 8001f2c:	6093      	str	r3, [r2, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ffb3 	bl	8001e9c <_ZNSt14_Function_baseC1Ev>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	461a      	mov	r2, r3
 8001f52:	2300      	movs	r3, #0
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	6053      	str	r3, [r2, #4]
 8001f58:	6093      	str	r3, [r2, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff9d 	bl	8001e9c <_ZNSt14_Function_baseC1Ev>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4798      	blx	r3
    }
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE>:

#elif defined NUCLEO_L476
extern SPI_HandleTypeDef hspi1;

uint8_t SX128x_OBJ::HalGpioRead(GpioPinFunction_t func)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	switch (func)
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d81f      	bhi.n	8001fea <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x52>
 8001faa:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	08001fc5 	.word	0x08001fc5
 8001fb4:	08001fd1 	.word	0x08001fd1
 8001fb8:	08001fdf 	.word	0x08001fdf
 8001fbc:	08001fe3 	.word	0x08001fe3
 8001fc0:	08001fe7 	.word	0x08001fe7
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x5c>)
 8001fc8:	f001 fa30 	bl	800342c <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	e00d      	b.n	8001fec <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001fd6:	f001 fa29 	bl	800342c <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	e006      	b.n	8001fec <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
		case GPIO_PIN_DIO1:
			return 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e004      	b.n	8001fec <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
		case GPIO_PIN_DIO2:
			return 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e002      	b.n	8001fec <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
		case GPIO_PIN_DIO3:
			return 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
		default:
			return 0;
 8001fea:	2300      	movs	r3, #0
	}
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_OBJ::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	460a      	mov	r2, r1
 8002008:	70fa      	strb	r2, [r7, #3]
	switch (func)
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	2a04      	cmp	r2, #4
 800200e:	d81a      	bhi.n	8002046 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4a>
 8002010:	a101      	add	r1, pc, #4	; (adr r1, 8002018 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 8002012:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002016:	bf00      	nop
 8002018:	0800202d 	.word	0x0800202d
 800201c:	08002039 	.word	0x08002039
 8002020:	08002047 	.word	0x08002047
 8002024:	08002047 	.word	0x08002047
 8002028:	08002047 	.word	0x08002047
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 800202c:	461a      	mov	r2, r3
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x54>)
 8002032:	f001 fa13 	bl	800345c <HAL_GPIO_WritePin>
		break;
 8002036:	e007      	b.n	8002048 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 8002040:	f001 fa0c 	bl	800345c <HAL_GPIO_WritePin>
		break;
 8002044:	e000      	b.n	8002048 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 8002046:	bf00      	nop
	}
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40020800 	.word	0x40020800
 8002054:	40020000 	.word	0x40020000

08002058 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht>:

void SX128x_OBJ::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	807b      	strh	r3, [r7, #2]
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	480a      	ldr	r0, [pc, #40]	; (8002094 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 800206c:	f001 f9f6 	bl	800345c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 10);
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	220a      	movs	r2, #10
 8002074:	9200      	str	r2, [sp, #0]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x40>)
 800207c:	f002 f879 	bl	8004172 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2140      	movs	r1, #64	; 0x40
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 8002086:	f001 f9e9 	bl	800345c <HAL_GPIO_WritePin>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020400 	.word	0x40020400
 8002098:	200001f4 	.word	0x200001f4

0800209c <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>:

void SX128x_OBJ::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	807b      	strh	r3, [r7, #2]
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
//	HAL_Delay(10);
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	480b      	ldr	r0, [pc, #44]	; (80020dc <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 80020b0:	f001 f9d4 	bl	800345c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f000 fecd 	bl	8002e54 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 10);
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	220a      	movs	r2, #10
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x44>)
 80020c6:	f002 f854 	bl	8004172 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 80020d0:	f001 f9c4 	bl	800345c <HAL_GPIO_WritePin>
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40020400 	.word	0x40020400
 80020e0:	200001f4 	.word	0x200001f4

080020e4 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff3f 	bl	8001f72 <_ZNSt14_Function_baseD1Ev>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff32 	bl	8001f72 <_ZNSt14_Function_baseD1Ev>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff25 	bl	8001f72 <_ZNSt14_Function_baseD1Ev>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZNSt8functionIFvbEED1Ev>:
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff18 	bl	8001f72 <_ZNSt14_Function_baseD1Ev>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN6SX128xUt0_D1Ev>:
	struct {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3380      	adds	r3, #128	; 0x80
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ffea 	bl	8002132 <_ZNSt8functionIFvbEED1Ev>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3370      	adds	r3, #112	; 0x70
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ffd8 	bl	8002118 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3360      	adds	r3, #96	; 0x60
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ffc6 	bl	80020fe <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3350      	adds	r3, #80	; 0x50
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffb4 	bl	80020e4 <_ZNSt8functionIFvvEED1Ev>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3340      	adds	r3, #64	; 0x40
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffaf 	bl	80020e4 <_ZNSt8functionIFvvEED1Ev>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3330      	adds	r3, #48	; 0x30
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffaa 	bl	80020e4 <_ZNSt8functionIFvvEED1Ev>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3320      	adds	r3, #32
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffa5 	bl	80020e4 <_ZNSt8functionIFvvEED1Ev>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3310      	adds	r3, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffa0 	bl	80020e4 <_ZNSt8functionIFvvEED1Ev>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff9c 	bl	80020e4 <_ZNSt8functionIFvvEED1Ev>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <_ZN6SX128xD1Ev+0x24>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3318      	adds	r3, #24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ffbe 	bl	800214c <_ZN6SX128xUt0_D1Ev>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	08008430 	.word	0x08008430

080021e0 <_ZN6SX128xD0Ev>:
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffe5 	bl	80021b8 <_ZN6SX128xD1Ev>
 80021ee:	21d0      	movs	r1, #208	; 0xd0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f003 fa35 	bl	8005660 <_ZdlPvj>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZN10SX128x_OBJD1Ev>:

#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX

class SX128x_OBJ : public SX128x
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4a05      	ldr	r2, [pc, #20]	; (8002220 <_ZN10SX128x_OBJD1Ev+0x20>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ffd1 	bl	80021b8 <_ZN6SX128xD1Ev>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	08008494 	.word	0x08008494

08002224 <_ZN10SX128x_OBJD0Ev>:
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffe7 	bl	8002200 <_ZN10SX128x_OBJD1Ev>
 8002232:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f003 fa12 	bl	8005660 <_ZdlPvj>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b0c6      	sub	sp, #280	; 0x118
 800224c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224e:	f000 fd8f 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002252:	f000 f95d 	bl	8002510 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002256:	f000 fa9d 	bl	8002794 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800225a:	f000 fa6d 	bl	8002738 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 800225e:	f000 f9cf 	bl	8002600 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8002262:	f000 fa09 	bl	8002678 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8002266:	48a1      	ldr	r0, [pc, #644]	; (80024ec <main+0x2a4>)
 8002268:	f002 fb52 	bl	8004910 <HAL_TIM_Base_Start>
  uint8_t rx_length;
  int received;

  uint8_t re;

  uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 800226c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002270:	499f      	ldr	r1, [pc, #636]	; (80024f0 <main+0x2a8>)
 8002272:	4618      	mov	r0, r3
 8002274:	f003 ffe4 	bl	8006240 <siprintf>
 8002278:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800227c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002280:	b29a      	uxth	r2, r3
 8002282:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002286:	2364      	movs	r3, #100	; 0x64
 8002288:	489a      	ldr	r0, [pc, #616]	; (80024f4 <main+0x2ac>)
 800228a:	f002 fe74 	bl	8004f76 <HAL_UART_Transmit>
  //===========================================
  //===========================================
  //===========================================
  uint8_t tx[10] = {};
 800228e:	2300      	movs	r3, #0
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
 8002292:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	809a      	strh	r2, [r3, #4]
  uint8_t rx[10] = {};
 800229c:	2300      	movs	r3, #0
 800229e:	66bb      	str	r3, [r7, #104]	; 0x68
 80022a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	809a      	strh	r2, [r3, #4]

  // initialize and transceive setting
  re = sx1280.Init();
 80022aa:	4893      	ldr	r0, [pc, #588]	; (80024f8 <main+0x2b0>)
 80022ac:	f7ff fc64 	bl	8001b78 <_ZN10SX128x_OBJ4InitEv>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  if(re == 0)
 80022b6:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d143      	bne.n	8002346 <main+0xfe>
  {
	  uart_buf_len = sprintf(uart_buf, "SX1280 Initialize success\r\n");
 80022be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022c2:	498e      	ldr	r1, [pc, #568]	; (80024fc <main+0x2b4>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 ffbb 	bl	8006240 <siprintf>
 80022ca:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80022ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80022d8:	2364      	movs	r3, #100	; 0x64
 80022da:	4886      	ldr	r0, [pc, #536]	; (80024f4 <main+0x2ac>)
 80022dc:	f002 fe4b 	bl	8004f76 <HAL_UART_Transmit>


    //===========================================
    // Rx Setting and Operations
    //===========================================
  	  sx1280.RxSetting();
 80022e0:	4885      	ldr	r0, [pc, #532]	; (80024f8 <main+0x2b0>)
 80022e2:	f7ff fd5b 	bl	8001d9c <_ZN10SX128x_OBJ9RxSettingEv>
//	 *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
//	 *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
//	 *(uint32_t*)(tx+8) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
//	 SPI1_TRANSCEIVER(tx, rx, 11);

  	 rx_length = sx1280.RxBlocking(rx_buffer, 8);
 80022e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022ea:	2208      	movs	r2, #8
 80022ec:	4619      	mov	r1, r3
 80022ee:	4882      	ldr	r0, [pc, #520]	; (80024f8 <main+0x2b0>)
 80022f0:	f7ff fd66 	bl	8001dc0 <_ZN10SX128x_OBJ10RxBlockingEPhh>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int time_temp = HAL_GetTick();
 80022fa:	f000 fd9f 	bl	8002e3c <HAL_GetTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	     uint8_t received_arr[100] = {0};
 8002304:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002308:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	3304      	adds	r3, #4
 8002312:	2260      	movs	r2, #96	; 0x60
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fff5 	bl	8006306 <memset>
	     int pre_get = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	     uint8_t sum;
	     float bps;
	     uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 8002322:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002326:	4972      	ldr	r1, [pc, #456]	; (80024f0 <main+0x2a8>)
 8002328:	4618      	mov	r0, r3
 800232a:	f003 ff89 	bl	8006240 <siprintf>
 800232e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	     HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002336:	b29a      	uxth	r2, r3
 8002338:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800233c:	2364      	movs	r3, #100	; 0x64
 800233e:	486d      	ldr	r0, [pc, #436]	; (80024f4 <main+0x2ac>)
 8002340:	f002 fe19 	bl	8004f76 <HAL_UART_Transmit>
 8002344:	e011      	b.n	800236a <main+0x122>
	  uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
 8002346:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800234a:	496d      	ldr	r1, [pc, #436]	; (8002500 <main+0x2b8>)
 800234c:	4618      	mov	r0, r3
 800234e:	f003 ff77 	bl	8006240 <siprintf>
 8002352:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800235a:	b29a      	uxth	r2, r3
 800235c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002360:	2364      	movs	r3, #100	; 0x64
 8002362:	4864      	ldr	r0, [pc, #400]	; (80024f4 <main+0x2ac>)
 8002364:	f002 fe07 	bl	8004f76 <HAL_UART_Transmit>
	  while(1);
 8002368:	e7fe      	b.n	8002368 <main+0x120>
//
//	    		 received = *(int*) (rx+3);
//
//
//	    	     // FrequencyError[Hz]
	    	 rx_length = sx1280.RxBlocking(rx_buffer, 8);
 800236a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800236e:	2208      	movs	r2, #8
 8002370:	4619      	mov	r1, r3
 8002372:	4861      	ldr	r0, [pc, #388]	; (80024f8 <main+0x2b0>)
 8002374:	f7ff fd24 	bl	8001dc0 <_ZN10SX128x_OBJ10RxBlockingEPhh>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	    	 received = rx_buffer[0] + (rx_buffer[1] << 8);
 800237e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002382:	461a      	mov	r2, r3
 8002384:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	4413      	add	r3, r2
 800238c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	    	 uart_buf_len = sprintf(uart_buf, "RX: %ld %ld\r\n", *(rx_buffer), *(rx_buffer+1));
 8002390:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002394:	461a      	mov	r2, r3
 8002396:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800239a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800239e:	4959      	ldr	r1, [pc, #356]	; (8002504 <main+0x2bc>)
 80023a0:	f003 ff4e 	bl	8006240 <siprintf>
 80023a4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	    	 HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80023a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80023b2:	2364      	movs	r3, #100	; 0x64
 80023b4:	484f      	ldr	r0, [pc, #316]	; (80024f4 <main+0x2ac>)
 80023b6:	f002 fdde 	bl	8004f76 <HAL_UART_Transmit>

			 if(received < 100 && received >= 0) // valid
 80023ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023be:	2b63      	cmp	r3, #99	; 0x63
 80023c0:	dcd3      	bgt.n	800236a <main+0x122>
 80023c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	dbcf      	blt.n	800236a <main+0x122>
			 {
				if(pre_get > received)
 80023ca:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80023ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dd7c      	ble.n	80024d0 <main+0x288>
				{
					time_temp = HAL_GetTick() - time_temp;
 80023d6:	f000 fd31 	bl	8002e3c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					sum = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
					for(int i = 0; i < 100; i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80023f2:	e013      	b.n	800241c <main+0x1d4>
					{
						if(received_arr[i] == 1)
 80023f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023f8:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80023fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d104      	bne.n	8002412 <main+0x1ca>
						{
							sum ++;
 8002408:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800240c:	3301      	adds	r3, #1
 800240e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
					for(int i = 0; i < 100; i++)
 8002412:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002416:	3301      	adds	r3, #1
 8002418:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800241c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002420:	2b63      	cmp	r3, #99	; 0x63
 8002422:	dde7      	ble.n	80023f4 <main+0x1ac>
						}
					}
					bps = sum*8*8*1000./time_temp;
 8002424:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f89a 	bl	8000564 <__aeabi_i2d>
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <main+0x2c0>)
 8002436:	f7fe f8ff 	bl	8000638 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4614      	mov	r4, r2
 8002440:	461d      	mov	r5, r3
 8002442:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002446:	f7fe f88d 	bl	8000564 <__aeabi_i2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f7fe fa1b 	bl	800088c <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fbe3 	bl	8000c28 <__aeabi_d2f>
 8002462:	4603      	mov	r3, r0
 8002464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					uart_buf_len = sprintf(uart_buf, "Bit Rate: %15.5f bps, sum: %03d\r\n", bps, sum);
 8002468:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800246c:	f7fe f88c 	bl	8000588 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	f897 1107 	ldrb.w	r1, [r7, #263]	; 0x107
 8002478:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800247c:	9100      	str	r1, [sp, #0]
 800247e:	4923      	ldr	r1, [pc, #140]	; (800250c <main+0x2c4>)
 8002480:	f003 fede 	bl	8006240 <siprintf>
 8002484:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
					HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800248c:	b29a      	uxth	r2, r3
 800248e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002492:	2364      	movs	r3, #100	; 0x64
 8002494:	4817      	ldr	r0, [pc, #92]	; (80024f4 <main+0x2ac>)
 8002496:	f002 fd6e 	bl	8004f76 <HAL_UART_Transmit>

					// end
					for(int i = 0; i < 100; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024a0:	e00d      	b.n	80024be <main+0x276>
					{
						received_arr[i] = 0;
 80024a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024a6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80024aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ae:	4413      	add	r3, r2
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < 100; i++)
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	3301      	adds	r3, #1
 80024ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c2:	2b63      	cmp	r3, #99	; 0x63
 80024c4:	dded      	ble.n	80024a2 <main+0x25a>
					}
					time_temp = HAL_GetTick();
 80024c6:	f000 fcb9 	bl	8002e3c <HAL_GetTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				}
				pre_get = received;
 80024d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				received_arr[received] = 1;
 80024d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024dc:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80024e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024e4:	4413      	add	r3, r2
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
			 }
	     }
 80024ea:	e73e      	b.n	800236a <main+0x122>
 80024ec:	2000024c 	.word	0x2000024c
 80024f0:	080083a0 	.word	0x080083a0
 80024f4:	20000294 	.word	0x20000294
 80024f8:	200002d8 	.word	0x200002d8
 80024fc:	080083bc 	.word	0x080083bc
 8002500:	080083d8 	.word	0x080083d8
 8002504:	080083f4 	.word	0x080083f4
 8002508:	408f4000 	.word	0x408f4000
 800250c:	08008404 	.word	0x08008404

08002510 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b094      	sub	sp, #80	; 0x50
 8002514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	2234      	movs	r2, #52	; 0x34
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fef1 	bl	8006306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <_Z18SystemClock_Configv+0xe8>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4a2e      	ldr	r2, [pc, #184]	; (80025f8 <_Z18SystemClock_Configv+0xe8>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	6413      	str	r3, [r2, #64]	; 0x40
 8002544:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <_Z18SystemClock_Configv+0xe8>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002550:	2300      	movs	r3, #0
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <_Z18SystemClock_Configv+0xec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <_Z18SystemClock_Configv+0xec>)
 800255e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <_Z18SystemClock_Configv+0xec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002570:	2302      	movs	r3, #2
 8002572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002574:	2301      	movs	r3, #1
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002578:	2310      	movs	r3, #16
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800257c:	2302      	movs	r3, #2
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002580:	2300      	movs	r3, #0
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002584:	2310      	movs	r3, #16
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800258c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800258e:	2304      	movs	r3, #4
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002592:	2302      	movs	r3, #2
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002596:	2302      	movs	r3, #2
 8002598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fac0 	bl	8003b24 <HAL_RCC_OscConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80025b4:	f000 f98c 	bl	80028d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b8:	230f      	movs	r3, #15
 80025ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2302      	movs	r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 ff5b 	bl	8003490 <HAL_RCC_ClockConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80025ea:	f000 f971 	bl	80028d0 <Error_Handler>
  }
}
 80025ee:	bf00      	nop
 80025f0:	3750      	adds	r7, #80	; 0x50
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000

08002600 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002606:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <_ZL12MX_SPI1_Initv+0x74>)
 8002608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 800260c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 800262c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002634:	2218      	movs	r2, #24
 8002636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 800264c:	220a      	movs	r2, #10
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <_ZL12MX_SPI1_Initv+0x70>)
 8002652:	f001 fd05 	bl	8004060 <HAL_SPI_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002666:	f000 f933 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200001f4 	.word	0x200001f4
 8002674:	40013000 	.word	0x40013000

08002678 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	463b      	mov	r3, r7
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <_ZL12MX_TIM1_Initv+0xbc>)
 8002698:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026c0:	481b      	ldr	r0, [pc, #108]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026c2:	f002 f8d5 	bl	8004870 <HAL_TIM_Base_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 80026d6:	f000 f8fb 	bl	80028d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026e0:	f107 0308 	add.w	r3, r7, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	4812      	ldr	r0, [pc, #72]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 80026e8:	f002 f97a 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 80026fc:	f000 f8e8 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002708:	463b      	mov	r3, r7
 800270a:	4619      	mov	r1, r3
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <_ZL12MX_TIM1_Initv+0xb8>)
 800270e:	f002 fb69 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002722:	f000 f8d5 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000024c 	.word	0x2000024c
 8002734:	40010000 	.word	0x40010000

08002738 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002770:	f002 fbb4 	bl	8004edc <HAL_UART_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf14      	ite	ne
 800277a:	2301      	movne	r3, #1
 800277c:	2300      	moveq	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002784:	f000 f8a4 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000294 	.word	0x20000294
 8002790:	40004400 	.word	0x40004400

08002794 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a43      	ldr	r2, [pc, #268]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <_ZL12MX_GPIO_Initv+0x12c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 800281a:	2201      	movs	r2, #1
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	4829      	ldr	r0, [pc, #164]	; (80028c4 <_ZL12MX_GPIO_Initv+0x130>)
 8002820:	f000 fe1c 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002824:	2201      	movs	r2, #1
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	4827      	ldr	r0, [pc, #156]	; (80028c8 <_ZL12MX_GPIO_Initv+0x134>)
 800282a:	f000 fe17 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800282e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002834:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	481f      	ldr	r0, [pc, #124]	; (80028c4 <_ZL12MX_GPIO_Initv+0x130>)
 8002846:	f000 fc5d 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4818      	ldr	r0, [pc, #96]	; (80028c4 <_ZL12MX_GPIO_Initv+0x130>)
 8002862:	f000 fc4f 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800286c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002872:	2302      	movs	r3, #2
 8002874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	4813      	ldr	r0, [pc, #76]	; (80028cc <_ZL12MX_GPIO_Initv+0x138>)
 800287e:	f000 fc41 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 8002882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800288c:	2302      	movs	r3, #2
 800288e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	480d      	ldr	r0, [pc, #52]	; (80028cc <_ZL12MX_GPIO_Initv+0x138>)
 8002898:	f000 fc34 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <_ZL12MX_GPIO_Initv+0x134>)
 80028b4:	f000 fc26 	bl	8003104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020000 	.word	0x40020000

080028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <Error_Handler+0x8>
	...

080028dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d102      	bne.n	80028fc <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_OBJ sx1280;
 80028f6:	4809      	ldr	r0, [pc, #36]	; (800291c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80028f8:	f7ff f9f4 	bl	8001ce4 <_ZN10SX128x_OBJC1Ev>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002908:	4293      	cmp	r3, r2
 800290a:	d102      	bne.n	8002912 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800290e:	f7ff fc77 	bl	8002200 <_ZN10SX128x_OBJD1Ev>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200002d8 	.word	0x200002d8

08002920 <_GLOBAL__sub_I_hspi1>:
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
 8002924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002928:	2001      	movs	r0, #1
 800292a:	f7ff ffd7 	bl	80028dc <_Z41__static_initialization_and_destruction_0ii>
 800292e:	bd80      	pop	{r7, pc}

08002930 <_GLOBAL__sub_D_hspi1>:
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
 8002934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff ffcf 	bl	80028dc <_Z41__static_initialization_and_destruction_0ii>
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_MspInit+0x4c>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_MspInit+0x4c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_MspInit+0x4c>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_MspInit+0x4c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800297e:	2007      	movs	r0, #7
 8002980:	f000 fb5c 	bl	800303c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_SPI_MspInit+0x94>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d133      	bne.n	8002a1a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_SPI_MspInit+0x98>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_SPI_MspInit+0x98>)
 80029bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_SPI_MspInit+0x98>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_SPI_MspInit+0x98>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <HAL_SPI_MspInit+0x98>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_SPI_MspInit+0x98>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ea:	23e0      	movs	r3, #224	; 0xe0
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029fa:	2305      	movs	r3, #5
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	4809      	ldr	r0, [pc, #36]	; (8002a2c <HAL_SPI_MspInit+0x9c>)
 8002a06:	f000 fb7d 	bl	8003104 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2023      	movs	r0, #35	; 0x23
 8002a10:	f000 fb1f 	bl	8003052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a14:	2023      	movs	r0, #35	; 0x23
 8002a16:	f000 fb38 	bl	800308a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40013000 	.word	0x40013000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <HAL_TIM_Base_MspInit+0x3c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_TIM_Base_MspInit+0x40>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_TIM_Base_MspInit+0x40>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_TIM_Base_MspInit+0x40>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_UART_MspInit+0x84>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d12b      	bne.n	8002aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_UART_MspInit+0x88>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_UART_MspInit+0x8c>)
 8002aea:	f000 fb0b 	bl	8003104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40004400 	.word	0x40004400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000

08002b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <NMI_Handler+0x4>

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b50:	f000 f960 	bl	8002e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <SPI1_IRQHandler+0x10>)
 8002b5e:	f001 fcab 	bl	80044b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200001f4 	.word	0x200001f4

08002b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return 1;
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <_kill>:

int _kill(int pid, int sig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b86:	f003 fc65 	bl	8006454 <__errno>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2216      	movs	r2, #22
 8002b8e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_exit>:

void _exit (int status)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ffe7 	bl	8002b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bae:	e7fe      	b.n	8002bae <_exit+0x12>

08002bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e00a      	b.n	8002bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bc2:	f3af 8000 	nop.w
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	60ba      	str	r2, [r7, #8]
 8002bce:	b2ca      	uxtb	r2, r1
 8002bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dbf0      	blt.n	8002bc2 <_read+0x12>
  }

  return len;
 8002be0:	687b      	ldr	r3, [r7, #4]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e009      	b.n	8002c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	60ba      	str	r2, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	dbf1      	blt.n	8002bfc <_write+0x12>
  }
  return len;
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_close>:

int _close(int file)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_isatty>:

int _isatty(int file)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <_sbrk+0x5c>)
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <_sbrk+0x60>)
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <_sbrk+0x64>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <_sbrk+0x64>)
 8002caa:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <_sbrk+0x68>)
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d207      	bcs.n	8002ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cbc:	f003 fbca 	bl	8006454 <__errno>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	e009      	b.n	8002ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <_sbrk+0x64>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <_sbrk+0x64>)
 8002cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cde:	68fb      	ldr	r3, [r7, #12]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20020000 	.word	0x20020000
 8002cec:	00000400 	.word	0x00000400
 8002cf0:	20000420 	.word	0x20000420
 8002cf4:	20000578 	.word	0x20000578

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <SystemInit+0x20>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <SystemInit+0x20>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d22:	490e      	ldr	r1, [pc, #56]	; (8002d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d28:	e002      	b.n	8002d30 <LoopCopyDataInit>

08002d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2e:	3304      	adds	r3, #4

08002d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d34:	d3f9      	bcc.n	8002d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d38:	4c0b      	ldr	r4, [pc, #44]	; (8002d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d3c:	e001      	b.n	8002d42 <LoopFillZerobss>

08002d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d40:	3204      	adds	r2, #4

08002d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d44:	d3fb      	bcc.n	8002d3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d46:	f7ff ffd7 	bl	8002cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4a:	f003 fb89 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d4e:	f7ff fa7b 	bl	8002248 <main>
  bx  lr    
 8002d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d5c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d60:	08008894 	.word	0x08008894
  ldr r2, =_sbss
 8002d64:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d68:	20000574 	.word	0x20000574

08002d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <HAL_Init+0x40>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_Init+0x40>)
 8002d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_Init+0x40>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 f94f 	bl	800303c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f000 f808 	bl	8002db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da4:	f7ff fdcc 	bl	8002940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x54>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_InitTick+0x58>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f967 	bl	80030a6 <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00e      	b.n	8002e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d80a      	bhi.n	8002dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	2200      	movs	r2, #0
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f000 f92f 	bl	8003052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <HAL_InitTick+0x5c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x24>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_IncTick+0x24>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000008 	.word	0x20000008
 8002e38:	20000424 	.word	0x20000424

08002e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_GetTick+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000424 	.word	0x20000424

08002e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff ffee 	bl	8002e3c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d005      	beq.n	8002e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_Delay+0x44>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7a:	bf00      	nop
 8002e7c:	f7ff ffde 	bl	8002e3c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d8f7      	bhi.n	8002e7c <HAL_Delay+0x28>
  {
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000008 	.word	0x20000008

08002e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <__NVIC_GetPriorityGrouping+0x18>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 0307 	and.w	r3, r3, #7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	db0b      	blt.n	8002f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4907      	ldr	r1, [pc, #28]	; (8002f38 <__NVIC_EnableIRQ+0x38>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2001      	movs	r0, #1
 8002f22:	fa00 f202 	lsl.w	r2, r0, r2
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000e100 	.word	0xe000e100

08002f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	db0a      	blt.n	8002f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	490c      	ldr	r1, [pc, #48]	; (8002f88 <__NVIC_SetPriority+0x4c>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f64:	e00a      	b.n	8002f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4908      	ldr	r1, [pc, #32]	; (8002f8c <__NVIC_SetPriority+0x50>)
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	3b04      	subs	r3, #4
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	440b      	add	r3, r1
 8002f7a:	761a      	strb	r2, [r3, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f1c3 0307 	rsb	r3, r3, #7
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	bf28      	it	cs
 8002fae:	2304      	movcs	r3, #4
 8002fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d902      	bls.n	8002fc0 <NVIC_EncodePriority+0x30>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3b03      	subs	r3, #3
 8002fbe:	e000      	b.n	8002fc2 <NVIC_EncodePriority+0x32>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43d9      	mvns	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	4313      	orrs	r3, r2
         );
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3724      	adds	r7, #36	; 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003008:	d301      	bcc.n	800300e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <SysTick_Config+0x40>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003016:	210f      	movs	r1, #15
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	f7ff ff8e 	bl	8002f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <SysTick_Config+0x40>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <SysTick_Config+0x40>)
 8003028:	2207      	movs	r2, #7
 800302a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000e010 	.word	0xe000e010

0800303c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff29 	bl	8002e9c <__NVIC_SetPriorityGrouping>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003064:	f7ff ff3e 	bl	8002ee4 <__NVIC_GetPriorityGrouping>
 8003068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	6978      	ldr	r0, [r7, #20]
 8003070:	f7ff ff8e 	bl	8002f90 <NVIC_EncodePriority>
 8003074:	4602      	mov	r2, r0
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff5d 	bl	8002f3c <__NVIC_SetPriority>
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff31 	bl	8002f00 <__NVIC_EnableIRQ>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ffa2 	bl	8002ff8 <SysTick_Config>
 80030b4:	4603      	mov	r3, r0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d004      	beq.n	80030dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e00c      	b.n	80030f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2205      	movs	r2, #5
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e165      	b.n	80033ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	429a      	cmp	r2, r3
 800313a:	f040 8154 	bne.w	80033e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d005      	beq.n	8003156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003152:	2b02      	cmp	r3, #2
 8003154:	d130      	bne.n	80031b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 0201 	and.w	r2, r3, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d017      	beq.n	80031f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d123      	bne.n	8003248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80ae 	beq.w	80033e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_GPIO_Init+0x300>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	4a5c      	ldr	r2, [pc, #368]	; (8003404 <HAL_GPIO_Init+0x300>)
 8003294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003298:	6453      	str	r3, [r2, #68]	; 0x44
 800329a:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <HAL_GPIO_Init+0x300>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a6:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_GPIO_Init+0x304>)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x308>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x21a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_GPIO_Init+0x30c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x216>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_GPIO_Init+0x310>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x212>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_GPIO_Init+0x314>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x20e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_GPIO_Init+0x318>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x20a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_GPIO_Init+0x31c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x206>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a49      	ldr	r2, [pc, #292]	; (8003424 <HAL_GPIO_Init+0x320>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x202>
 8003302:	2306      	movs	r3, #6
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 8003306:	2307      	movs	r3, #7
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x21c>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_GPIO_Init+0x304>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_GPIO_Init+0x324>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a31      	ldr	r2, [pc, #196]	; (8003428 <HAL_GPIO_Init+0x324>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_GPIO_Init+0x324>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a26      	ldr	r2, [pc, #152]	; (8003428 <HAL_GPIO_Init+0x324>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_GPIO_Init+0x324>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_GPIO_Init+0x324>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <HAL_GPIO_Init+0x324>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_GPIO_Init+0x324>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f ae96 	bls.w	8003120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e001      	b.n	800344e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003478:	e003      	b.n	8003482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	041a      	lsls	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	619a      	str	r2, [r3, #24]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0cc      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d90c      	bls.n	80034cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b8      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494d      	ldr	r1, [pc, #308]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d044      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d119      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d003      	beq.n	800354e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	2b03      	cmp	r3, #3
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e06f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e067      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 0203 	bic.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4934      	ldr	r1, [pc, #208]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003580:	f7ff fc5c 	bl	8002e3c <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7ff fc58 	bl	8002e3c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 020c 	and.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1eb      	bne.n	8003588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d20c      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e032      	b.n	800363e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4916      	ldr	r1, [pc, #88]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f855 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490a      	ldr	r1, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fbbc 	bl	8002db4 <HAL_InitTick>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023c00 	.word	0x40023c00
 800364c:	40023800 	.word	0x40023800
 8003650:	080084f0 	.word	0x080084f0
 8003654:	20000000 	.word	0x20000000
 8003658:	20000004 	.word	0x20000004

0800365c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_RCC_GetHCLKFreq+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000000 	.word	0x20000000

08003674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003678:	f7ff fff0 	bl	800365c <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0a9b      	lsrs	r3, r3, #10
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	08008500 	.word	0x08008500

0800369c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a0:	f7ff ffdc 	bl	800365c <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0b5b      	lsrs	r3, r3, #13
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	08008500 	.word	0x08008500

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b0ae      	sub	sp, #184	; 0xb8
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ea:	4bcb      	ldr	r3, [pc, #812]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	f200 8206 	bhi.w	8003b04 <HAL_RCC_GetSysClockFreq+0x440>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <HAL_RCC_GetSysClockFreq+0x3c>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003735 	.word	0x08003735
 8003704:	08003b05 	.word	0x08003b05
 8003708:	08003b05 	.word	0x08003b05
 800370c:	08003b05 	.word	0x08003b05
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003b05 	.word	0x08003b05
 8003718:	08003b05 	.word	0x08003b05
 800371c:	08003b05 	.word	0x08003b05
 8003720:	08003745 	.word	0x08003745
 8003724:	08003b05 	.word	0x08003b05
 8003728:	08003b05 	.word	0x08003b05
 800372c:	08003b05 	.word	0x08003b05
 8003730:	08003935 	.word	0x08003935
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4bb9      	ldr	r3, [pc, #740]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x358>)
 8003736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800373a:	e1e7      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373c:	4bb8      	ldr	r3, [pc, #736]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800373e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003742:	e1e3      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4bb4      	ldr	r3, [pc, #720]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800374c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003750:	4bb1      	ldr	r3, [pc, #708]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d071      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375c:	4bae      	ldr	r3, [pc, #696]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003768:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800376c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800377e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003782:	4622      	mov	r2, r4
 8003784:	462b      	mov	r3, r5
 8003786:	f04f 0000 	mov.w	r0, #0
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003794:	0150      	lsls	r0, r2, #5
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4621      	mov	r1, r4
 800379c:	1a51      	subs	r1, r2, r1
 800379e:	6439      	str	r1, [r7, #64]	; 0x40
 80037a0:	4629      	mov	r1, r5
 80037a2:	eb63 0301 	sbc.w	r3, r3, r1
 80037a6:	647b      	str	r3, [r7, #68]	; 0x44
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037b4:	4649      	mov	r1, r9
 80037b6:	018b      	lsls	r3, r1, #6
 80037b8:	4641      	mov	r1, r8
 80037ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037be:	4641      	mov	r1, r8
 80037c0:	018a      	lsls	r2, r1, #6
 80037c2:	4641      	mov	r1, r8
 80037c4:	1a51      	subs	r1, r2, r1
 80037c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037c8:	4649      	mov	r1, r9
 80037ca:	eb63 0301 	sbc.w	r3, r3, r1
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037dc:	4649      	mov	r1, r9
 80037de:	00cb      	lsls	r3, r1, #3
 80037e0:	4641      	mov	r1, r8
 80037e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e6:	4641      	mov	r1, r8
 80037e8:	00ca      	lsls	r2, r1, #3
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	4622      	mov	r2, r4
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	462b      	mov	r3, r5
 80037f8:	460a      	mov	r2, r1
 80037fa:	eb42 0303 	adc.w	r3, r2, r3
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800380c:	4629      	mov	r1, r5
 800380e:	024b      	lsls	r3, r1, #9
 8003810:	4621      	mov	r1, r4
 8003812:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003816:	4621      	mov	r1, r4
 8003818:	024a      	lsls	r2, r1, #9
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003828:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800382c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003830:	f7fd fa4a 	bl	8000cc8 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4613      	mov	r3, r2
 800383a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800383e:	e067      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003840:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	2200      	movs	r2, #0
 8003848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800384c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003850:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003858:	67bb      	str	r3, [r7, #120]	; 0x78
 800385a:	2300      	movs	r3, #0
 800385c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800385e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	0159      	lsls	r1, r3, #5
 8003870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003874:	0150      	lsls	r0, r2, #5
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4621      	mov	r1, r4
 800387c:	1a51      	subs	r1, r2, r1
 800387e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003880:	4629      	mov	r1, r5
 8003882:	eb63 0301 	sbc.w	r3, r3, r1
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003894:	4649      	mov	r1, r9
 8003896:	018b      	lsls	r3, r1, #6
 8003898:	4641      	mov	r1, r8
 800389a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389e:	4641      	mov	r1, r8
 80038a0:	018a      	lsls	r2, r1, #6
 80038a2:	4641      	mov	r1, r8
 80038a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a8:	4649      	mov	r1, r9
 80038aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c2:	4692      	mov	sl, r2
 80038c4:	469b      	mov	fp, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	eb1a 0303 	adds.w	r3, sl, r3
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	462b      	mov	r3, r5
 80038d0:	eb4b 0303 	adc.w	r3, fp, r3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038e2:	4629      	mov	r1, r5
 80038e4:	028b      	lsls	r3, r1, #10
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ec:	4621      	mov	r1, r4
 80038ee:	028a      	lsls	r2, r1, #10
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038f8:	2200      	movs	r2, #0
 80038fa:	673b      	str	r3, [r7, #112]	; 0x70
 80038fc:	677a      	str	r2, [r7, #116]	; 0x74
 80038fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003902:	f7fd f9e1 	bl	8000cc8 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4613      	mov	r3, r2
 800390c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	3301      	adds	r3, #1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003932:	e0eb      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003934:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003940:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d06b      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x354>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	2200      	movs	r2, #0
 8003954:	66bb      	str	r3, [r7, #104]	; 0x68
 8003956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800395a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395e:	663b      	str	r3, [r7, #96]	; 0x60
 8003960:	2300      	movs	r3, #0
 8003962:	667b      	str	r3, [r7, #100]	; 0x64
 8003964:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003968:	4622      	mov	r2, r4
 800396a:	462b      	mov	r3, r5
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0159      	lsls	r1, r3, #5
 8003976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397a:	0150      	lsls	r0, r2, #5
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4621      	mov	r1, r4
 8003982:	1a51      	subs	r1, r2, r1
 8003984:	61b9      	str	r1, [r7, #24]
 8003986:	4629      	mov	r1, r5
 8003988:	eb63 0301 	sbc.w	r3, r3, r1
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800399a:	4659      	mov	r1, fp
 800399c:	018b      	lsls	r3, r1, #6
 800399e:	4651      	mov	r1, sl
 80039a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a4:	4651      	mov	r1, sl
 80039a6:	018a      	lsls	r2, r1, #6
 80039a8:	4651      	mov	r1, sl
 80039aa:	ebb2 0801 	subs.w	r8, r2, r1
 80039ae:	4659      	mov	r1, fp
 80039b0:	eb63 0901 	sbc.w	r9, r3, r1
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c8:	4690      	mov	r8, r2
 80039ca:	4699      	mov	r9, r3
 80039cc:	4623      	mov	r3, r4
 80039ce:	eb18 0303 	adds.w	r3, r8, r3
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	462b      	mov	r3, r5
 80039d6:	eb49 0303 	adc.w	r3, r9, r3
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039e8:	4629      	mov	r1, r5
 80039ea:	024b      	lsls	r3, r1, #9
 80039ec:	4621      	mov	r1, r4
 80039ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039f2:	4621      	mov	r1, r4
 80039f4:	024a      	lsls	r2, r1, #9
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039fe:	2200      	movs	r2, #0
 8003a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a08:	f7fd f95e 	bl	8000cc8 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a16:	e065      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x420>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	00f42400 	.word	0x00f42400
 8003a20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	4611      	mov	r1, r2
 8003a30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a34:	653b      	str	r3, [r7, #80]	; 0x50
 8003a36:	2300      	movs	r3, #0
 8003a38:	657b      	str	r3, [r7, #84]	; 0x54
 8003a3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	0159      	lsls	r1, r3, #5
 8003a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a50:	0150      	lsls	r0, r2, #5
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4641      	mov	r1, r8
 8003a58:	1a51      	subs	r1, r2, r1
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a70:	4659      	mov	r1, fp
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	018a      	lsls	r2, r1, #6
 8003a7e:	4651      	mov	r1, sl
 8003a80:	1a54      	subs	r4, r2, r1
 8003a82:	4659      	mov	r1, fp
 8003a84:	eb63 0501 	sbc.w	r5, r3, r1
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	00eb      	lsls	r3, r5, #3
 8003a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a96:	00e2      	lsls	r2, r4, #3
 8003a98:	4614      	mov	r4, r2
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	4643      	mov	r3, r8
 8003a9e:	18e3      	adds	r3, r4, r3
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	eb45 0303 	adc.w	r3, r5, r3
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	028b      	lsls	r3, r1, #10
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	028a      	lsls	r2, r1, #10
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003acc:	2200      	movs	r2, #0
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ad2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad6:	f7fd f8f7 	bl	8000cc8 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4613      	mov	r3, r2
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	0f1b      	lsrs	r3, r3, #28
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b02:	e003      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	37b8      	adds	r7, #184	; 0xb8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e28d      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8083 	beq.w	8003c4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b44:	4b94      	ldr	r3, [pc, #592]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d019      	beq.n	8003b84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b50:	4b91      	ldr	r3, [pc, #580]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b5c:	4b8e      	ldr	r3, [pc, #568]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b8b      	ldr	r3, [pc, #556]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d112      	bne.n	8003b9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b84      	ldr	r3, [pc, #528]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x124>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e25a      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x90>
 8003ba6:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7b      	ldr	r2, [pc, #492]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xcc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xb4>
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a75      	ldr	r2, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b73      	ldr	r3, [pc, #460]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xcc>
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6b      	ldr	r2, [pc, #428]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7ff f920 	bl	8002e3c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7ff f91c 	bl	8002e3c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e21f      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xdc>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7ff f90c 	bl	8002e3c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7ff f908 	bl	8002e3c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e20b      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b57      	ldr	r3, [pc, #348]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x104>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d06f      	beq.n	8003d36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c56:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d017      	beq.n	8003c92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c62:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7a:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d11c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c86:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d116      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x186>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e1d3      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003caa:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4937      	ldr	r1, [pc, #220]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	e03a      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc8:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <HAL_RCC_OscConfig+0x278>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7ff f8b5 	bl	8002e3c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd6:	f7ff f8b1 	bl	8002e3c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1b4      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4925      	ldr	r1, [pc, #148]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]
 8003d08:	e015      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <HAL_RCC_OscConfig+0x278>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7ff f894 	bl	8002e3c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d18:	f7ff f890 	bl	8002e3c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e193      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d036      	beq.n	8003db0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCC_OscConfig+0x27c>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7ff f874 	bl	8002e3c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d58:	f7ff f870 	bl	8002e3c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e173      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x234>
 8003d76:	e01b      	b.n	8003db0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7ff f85d 	bl	8002e3c <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	e00e      	b.n	8003da4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d86:	f7ff f859 	bl	8002e3c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d907      	bls.n	8003da4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e15c      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	42470000 	.word	0x42470000
 8003da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	4b8a      	ldr	r3, [pc, #552]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ea      	bne.n	8003d86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8097 	beq.w	8003eec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc2:	4b83      	ldr	r3, [pc, #524]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	4b7f      	ldr	r3, [pc, #508]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a7e      	ldr	r2, [pc, #504]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dde:	4b7c      	ldr	r3, [pc, #496]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dee:	4b79      	ldr	r3, [pc, #484]	; (8003fd4 <HAL_RCC_OscConfig+0x4b0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d118      	bne.n	8003e2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfa:	4b76      	ldr	r3, [pc, #472]	; (8003fd4 <HAL_RCC_OscConfig+0x4b0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a75      	ldr	r2, [pc, #468]	; (8003fd4 <HAL_RCC_OscConfig+0x4b0>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e06:	f7ff f819 	bl	8002e3c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0e:	f7ff f815 	bl	8002e3c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e118      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	4b6c      	ldr	r3, [pc, #432]	; (8003fd4 <HAL_RCC_OscConfig+0x4b0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d106      	bne.n	8003e42 <HAL_RCC_OscConfig+0x31e>
 8003e34:	4b66      	ldr	r3, [pc, #408]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a65      	ldr	r2, [pc, #404]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	e01c      	b.n	8003e7c <HAL_RCC_OscConfig+0x358>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x340>
 8003e4a:	4b61      	ldr	r3, [pc, #388]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a60      	ldr	r2, [pc, #384]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
 8003e56:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
 8003e62:	e00b      	b.n	8003e7c <HAL_RCC_OscConfig+0x358>
 8003e64:	4b5a      	ldr	r3, [pc, #360]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a59      	ldr	r2, [pc, #356]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	4b57      	ldr	r3, [pc, #348]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003e76:	f023 0304 	bic.w	r3, r3, #4
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fe ffda 	bl	8002e3c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fe ffd6 	bl	8002e3c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0d7      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ee      	beq.n	8003e8c <HAL_RCC_OscConfig+0x368>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe ffc4 	bl	8002e3c <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fe ffc0 	bl	8002e3c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e0c1      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ece:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d105      	bne.n	8003eec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80ad 	beq.w	8004050 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d060      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d145      	bne.n	8003f96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <HAL_RCC_OscConfig+0x4b4>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe ff94 	bl	8002e3c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fe ff90 	bl	8002e3c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e093      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	491b      	ldr	r1, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x4b4>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6e:	f7fe ff65 	bl	8002e3c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fe ff61 	bl	8002e3c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e064      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x452>
 8003f94:	e05c      	b.n	8004050 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_RCC_OscConfig+0x4b4>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe ff4e 	bl	8002e3c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe ff4a 	bl	8002e3c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04d      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x480>
 8003fc2:	e045      	b.n	8004050 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e040      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fdc:	4b1f      	ldr	r3, [pc, #124]	; (800405c <HAL_RCC_OscConfig+0x538>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d030      	beq.n	800404c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d129      	bne.n	800404c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d122      	bne.n	800404c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	4293      	cmp	r3, r2
 8004016:	d119      	bne.n	800404c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d10f      	bne.n	800404c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07b      	b.n	800416a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004082:	d009      	beq.n	8004098 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	61da      	str	r2, [r3, #28]
 800408a:	e005      	b.n	8004098 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe fc6c 	bl	8002990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	ea42 0103 	orr.w	r1, r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	f003 0104 	and.w	r1, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0210 	and.w	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004158:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08c      	sub	sp, #48	; 0x30
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004180:	2301      	movs	r3, #1
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x26>
 8004194:	2302      	movs	r3, #2
 8004196:	e18a      	b.n	80044ae <HAL_SPI_TransmitReceive+0x33c>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041a0:	f7fe fe4c 	bl	8002e3c <HAL_GetTick>
 80041a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d00f      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x70>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c8:	d107      	bne.n	80041da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_SPI_TransmitReceive+0x68>
 80041d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d003      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041e0:	e15b      	b.n	800449a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x82>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x82>
 80041ee:	887b      	ldrh	r3, [r7, #2]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041fa:	e14e      	b.n	800449a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b04      	cmp	r3, #4
 8004206:	d003      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2205      	movs	r2, #5
 800420c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d007      	beq.n	8004264 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d178      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_SPI_TransmitReceive+0x10a>
 8004276:	8b7b      	ldrh	r3, [r7, #26]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d166      	bne.n	800434a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a0:	e053      	b.n	800434a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d11b      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x176>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x176>
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d113      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	881a      	ldrh	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d119      	bne.n	800432a <HAL_SPI_TransmitReceive+0x1b8>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d014      	beq.n	800432a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	b292      	uxth	r2, r2
 800430c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	1c9a      	adds	r2, r3, #2
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004326:	2301      	movs	r3, #1
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800432a:	f7fe fd87 	bl	8002e3c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004336:	429a      	cmp	r2, r3
 8004338:	d807      	bhi.n	800434a <HAL_SPI_TransmitReceive+0x1d8>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d003      	beq.n	800434a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004348:	e0a7      	b.n	800449a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1a6      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x130>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1a1      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x130>
 800435e:	e07c      	b.n	800445a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_TransmitReceive+0x1fc>
 8004368:	8b7b      	ldrh	r3, [r7, #26]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d16b      	bne.n	8004446 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004394:	e057      	b.n	8004446 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d11c      	bne.n	80043de <HAL_SPI_TransmitReceive+0x26c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <HAL_SPI_TransmitReceive+0x26c>
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d114      	bne.n	80043de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d119      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x2ae>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d014      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004420:	f7fe fd0c 	bl	8002e3c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442c:	429a      	cmp	r2, r3
 800442e:	d803      	bhi.n	8004438 <HAL_SPI_TransmitReceive+0x2c6>
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d102      	bne.n	800443e <HAL_SPI_TransmitReceive+0x2cc>
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004444:	e029      	b.n	800449a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1a2      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x224>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d19d      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f9c4 	bl	80047ec <SPI_EndRxTxTransaction>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d006      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004476:	e010      	b.n	800449a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	e000      	b.n	800449a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3730      	adds	r7, #48	; 0x30
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
    return;
 80044f6:	e0ce      	b.n	8004696 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_SPI_IRQHandler+0x5e>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
    return;
 8004514:	e0bf      	b.n	8004696 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <HAL_SPI_IRQHandler+0x7e>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d105      	bne.n	8004536 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80b0 	beq.w	8004696 <HAL_SPI_IRQHandler+0x1de>
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80aa 	beq.w	8004696 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d011      	beq.n	800457c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f043 0204 	orr.w	r2, r3, #4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	e00b      	b.n	8004594 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
        return;
 8004592:	e080      	b.n	8004696 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d014      	beq.n	80045c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f043 0208 	orr.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d04f      	beq.n	8004694 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004602:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_SPI_IRQHandler+0x168>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d034      	beq.n	800468a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0203 	bic.w	r2, r2, #3
 800462e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d011      	beq.n	800465c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_SPI_IRQHandler+0x1e4>)
 800463e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe fd3a 	bl	80030be <HAL_DMA_Abort_IT>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	2b00      	cmp	r3, #0
 8004662:	d016      	beq.n	8004692 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <HAL_SPI_IRQHandler+0x1e4>)
 800466a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fd24 	bl	80030be <HAL_DMA_Abort_IT>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004688:	e003      	b.n	8004692 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f808 	bl	80046a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004690:	e000      	b.n	8004694 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004692:	bf00      	nop
    return;
 8004694:	bf00      	nop
  }
}
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	080046b5 	.word	0x080046b5

080046a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff ffe6 	bl	80046a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046ec:	f7fe fba6 	bl	8002e3c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046fc:	f7fe fb9e 	bl	8002e3c <HAL_GetTick>
 8004700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	015b      	lsls	r3, r3, #5
 8004708:	0d1b      	lsrs	r3, r3, #20
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004712:	e054      	b.n	80047be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d050      	beq.n	80047be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800471c:	f7fe fb8e 	bl	8002e3c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d902      	bls.n	8004732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13d      	bne.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d111      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	d004      	beq.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d107      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004778:	d10f      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e017      	b.n	80047de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	bf0c      	ite	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	2300      	movne	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d19b      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000000 	.word	0x20000000

080047ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <SPI_EndRxTxTransaction+0x7c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <SPI_EndRxTxTransaction+0x80>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0d5b      	lsrs	r3, r3, #21
 8004804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004816:	d112      	bne.n	800483e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff5a 	bl	80046dc <SPI_WaitFlagStateUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e00f      	b.n	800485e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3b01      	subs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d0f2      	beq.n	800483e <SPI_EndRxTxTransaction+0x52>
 8004858:	e000      	b.n	800485c <SPI_EndRxTxTransaction+0x70>
        break;
 800485a:	bf00      	nop
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000
 800486c:	165e9f81 	.word	0x165e9f81

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fe f8ca 	bl	8002a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 f95e 	bl	8004b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d001      	beq.n	8004928 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e046      	b.n	80049b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <HAL_TIM_Base_Start+0xb4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d01d      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <HAL_TIM_Base_Start+0xb8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_TIM_Base_Start+0xbc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_TIM_Base_Start+0xc0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_TIM_Base_Start+0xc4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <HAL_TIM_Base_Start+0xc8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIM_Base_Start+0x70>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_TIM_Base_Start+0xcc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d111      	bne.n	80049a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d010      	beq.n	80049b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	e007      	b.n	80049b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIM_ConfigClockSource+0x1c>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0b4      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x186>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a34:	d03e      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3a:	f200 8087 	bhi.w	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	f000 8086 	beq.w	8004b52 <HAL_TIM_ConfigClockSource+0x172>
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d87f      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b70      	cmp	r3, #112	; 0x70
 8004a4e:	d01a      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0xa6>
 8004a50:	2b70      	cmp	r3, #112	; 0x70
 8004a52:	d87b      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b60      	cmp	r3, #96	; 0x60
 8004a56:	d050      	beq.n	8004afa <HAL_TIM_ConfigClockSource+0x11a>
 8004a58:	2b60      	cmp	r3, #96	; 0x60
 8004a5a:	d877      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b50      	cmp	r3, #80	; 0x50
 8004a5e:	d03c      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0xfa>
 8004a60:	2b50      	cmp	r3, #80	; 0x50
 8004a62:	d873      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d058      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0x13a>
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d86f      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d064      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d86b      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d060      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d867      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d05c      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d05a      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a84:	e062      	b.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f000 f985 	bl	8004da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	609a      	str	r2, [r3, #8]
      break;
 8004ab2:	e04f      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6899      	ldr	r1, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f000 f96e 	bl	8004da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad6:	609a      	str	r2, [r3, #8]
      break;
 8004ad8:	e03c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f000 f8e2 	bl	8004cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2150      	movs	r1, #80	; 0x50
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f93b 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004af8:	e02c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f000 f901 	bl	8004d0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2160      	movs	r1, #96	; 0x60
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 f92b 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004b18:	e01c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6859      	ldr	r1, [r3, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f000 f8c2 	bl	8004cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2140      	movs	r1, #64	; 0x40
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f91b 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004b38:	e00c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 f912 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 8004b4a:	e003      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b50:	e000      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3d      	ldr	r2, [pc, #244]	; (8004c88 <TIM_Base_SetConfig+0x118>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3c      	ldr	r2, [pc, #240]	; (8004c8c <TIM_Base_SetConfig+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <TIM_Base_SetConfig+0x120>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d02b      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d027      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2c      	ldr	r2, [pc, #176]	; (8004c88 <TIM_Base_SetConfig+0x118>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d023      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <TIM_Base_SetConfig+0x11c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <TIM_Base_SetConfig+0x120>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d017      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <TIM_Base_SetConfig+0x128>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <TIM_Base_SetConfig+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <TIM_Base_SetConfig+0x130>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <TIM_Base_SetConfig+0x134>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <TIM_Base_SetConfig+0x138>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <TIM_Base_SetConfig+0x13c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0xf8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d103      	bne.n	8004c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	615a      	str	r2, [r3, #20]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800
 8004ca4:	40001800 	.word	0x40001800
 8004ca8:	40001c00 	.word	0x40001c00
 8004cac:	40002000 	.word	0x40002000

08004cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 030a 	bic.w	r3, r3, #10
 8004cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	621a      	str	r2, [r3, #32]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f023 0210 	bic.w	r2, r3, #16
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	031b      	lsls	r3, r3, #12
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f043 0307 	orr.w	r3, r3, #7
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e05a      	b.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d01d      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10c      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800

08004edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e03f      	b.n	8004f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fd fdb6 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	; 0x24
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f929 	bl	8005178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af02      	add	r7, sp, #8
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d17c      	bne.n	8005090 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_UART_Transmit+0x2c>
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e075      	b.n	8005092 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_UART_Transmit+0x3e>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e06e      	b.n	8005092 <HAL_UART_Transmit+0x11c>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2221      	movs	r2, #33	; 0x21
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fca:	f7fd ff37 	bl	8002e3c <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	88fa      	ldrh	r2, [r7, #6]
 8004fda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe4:	d108      	bne.n	8004ff8 <HAL_UART_Transmit+0x82>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e003      	b.n	8005000 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005008:	e02a      	b.n	8005060 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f840 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e036      	b.n	8005092 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	3302      	adds	r3, #2
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e007      	b.n	8005052 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3301      	adds	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1cf      	bne.n	800500a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	2140      	movs	r1, #64	; 0x40
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f810 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e006      	b.n	8005092 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b090      	sub	sp, #64	; 0x40
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	4613      	mov	r3, r2
 80050a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	e050      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d04c      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0x30>
 80050ba:	f7fd febf 	bl	8002e3c <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d241      	bcs.n	800514e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ea:	637a      	str	r2, [r7, #52]	; 0x34
 80050ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	613b      	str	r3, [r7, #16]
   return(result);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	63bb      	str	r3, [r7, #56]	; 0x38
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3314      	adds	r3, #20
 800511c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511e:	623a      	str	r2, [r7, #32]
 8005120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	69f9      	ldr	r1, [r7, #28]
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	61bb      	str	r3, [r7, #24]
   return(result);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e00f      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4013      	ands	r3, r2
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	429a      	cmp	r2, r3
 800516a:	d09f      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3740      	adds	r7, #64	; 0x40
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b0c0      	sub	sp, #256	; 0x100
 800517e:	af00      	add	r7, sp, #0
 8005180:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	68d9      	ldr	r1, [r3, #12]
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	ea40 0301 	orr.w	r3, r0, r1
 80051a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051d0:	f021 010c 	bic.w	r1, r1, #12
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051de:	430b      	orrs	r3, r1
 80051e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	6999      	ldr	r1, [r3, #24]
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	ea40 0301 	orr.w	r3, r0, r1
 80051fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b8f      	ldr	r3, [pc, #572]	; (8005444 <UART_SetConfig+0x2cc>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d005      	beq.n	8005218 <UART_SetConfig+0xa0>
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b8d      	ldr	r3, [pc, #564]	; (8005448 <UART_SetConfig+0x2d0>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d104      	bne.n	8005222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fe fa40 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 800521c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005220:	e003      	b.n	800522a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005222:	f7fe fa27 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 8005226:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	f040 810c 	bne.w	8005450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	1891      	adds	r1, r2, r2
 8005250:	65b9      	str	r1, [r7, #88]	; 0x58
 8005252:	415b      	adcs	r3, r3
 8005254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800525a:	4621      	mov	r1, r4
 800525c:	eb12 0801 	adds.w	r8, r2, r1
 8005260:	4629      	mov	r1, r5
 8005262:	eb43 0901 	adc.w	r9, r3, r1
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527a:	4690      	mov	r8, r2
 800527c:	4699      	mov	r9, r3
 800527e:	4623      	mov	r3, r4
 8005280:	eb18 0303 	adds.w	r3, r8, r3
 8005284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005288:	462b      	mov	r3, r5
 800528a:	eb49 0303 	adc.w	r3, r9, r3
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800529e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052a6:	460b      	mov	r3, r1
 80052a8:	18db      	adds	r3, r3, r3
 80052aa:	653b      	str	r3, [r7, #80]	; 0x50
 80052ac:	4613      	mov	r3, r2
 80052ae:	eb42 0303 	adc.w	r3, r2, r3
 80052b2:	657b      	str	r3, [r7, #84]	; 0x54
 80052b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052bc:	f7fb fd04 	bl	8000cc8 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4b61      	ldr	r3, [pc, #388]	; (800544c <UART_SetConfig+0x2d4>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	011c      	lsls	r4, r3, #4
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	1891      	adds	r1, r2, r2
 80052e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052e8:	415b      	adcs	r3, r3
 80052ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052f0:	4641      	mov	r1, r8
 80052f2:	eb12 0a01 	adds.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb43 0b01 	adc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800530c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005310:	4692      	mov	sl, r2
 8005312:	469b      	mov	fp, r3
 8005314:	4643      	mov	r3, r8
 8005316:	eb1a 0303 	adds.w	r3, sl, r3
 800531a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800531e:	464b      	mov	r3, r9
 8005320:	eb4b 0303 	adc.w	r3, fp, r3
 8005324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005334:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800533c:	460b      	mov	r3, r1
 800533e:	18db      	adds	r3, r3, r3
 8005340:	643b      	str	r3, [r7, #64]	; 0x40
 8005342:	4613      	mov	r3, r2
 8005344:	eb42 0303 	adc.w	r3, r2, r3
 8005348:	647b      	str	r3, [r7, #68]	; 0x44
 800534a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800534e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005352:	f7fb fcb9 	bl	8000cc8 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4611      	mov	r1, r2
 800535c:	4b3b      	ldr	r3, [pc, #236]	; (800544c <UART_SetConfig+0x2d4>)
 800535e:	fba3 2301 	umull	r2, r3, r3, r1
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2264      	movs	r2, #100	; 0x64
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	1acb      	subs	r3, r1, r3
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005372:	4b36      	ldr	r3, [pc, #216]	; (800544c <UART_SetConfig+0x2d4>)
 8005374:	fba3 2302 	umull	r2, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005380:	441c      	add	r4, r3
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800538c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	63b9      	str	r1, [r7, #56]	; 0x38
 800539c:	415b      	adcs	r3, r3
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6339      	str	r1, [r7, #48]	; 0x30
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053f8:	460b      	mov	r3, r1
 80053fa:	18db      	adds	r3, r3, r3
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fe:	4613      	mov	r3, r2
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800540a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800540e:	f7fb fc5b 	bl	8000cc8 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <UART_SetConfig+0x2d4>)
 8005418:	fba3 1302 	umull	r1, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	2164      	movs	r1, #100	; 0x64
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	3332      	adds	r3, #50	; 0x32
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <UART_SetConfig+0x2d4>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	f003 0207 	and.w	r2, r3, #7
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4422      	add	r2, r4
 800543e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005440:	e106      	b.n	8005650 <UART_SetConfig+0x4d8>
 8005442:	bf00      	nop
 8005444:	40011000 	.word	0x40011000
 8005448:	40011400 	.word	0x40011400
 800544c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005454:	2200      	movs	r2, #0
 8005456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800545a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800545e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005462:	4642      	mov	r2, r8
 8005464:	464b      	mov	r3, r9
 8005466:	1891      	adds	r1, r2, r2
 8005468:	6239      	str	r1, [r7, #32]
 800546a:	415b      	adcs	r3, r3
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005472:	4641      	mov	r1, r8
 8005474:	1854      	adds	r4, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb43 0501 	adc.w	r5, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	00eb      	lsls	r3, r5, #3
 8005486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	4614      	mov	r4, r2
 800548e:	461d      	mov	r5, r3
 8005490:	4643      	mov	r3, r8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005498:	464b      	mov	r3, r9
 800549a:	eb45 0303 	adc.w	r3, r5, r3
 800549e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054be:	4629      	mov	r1, r5
 80054c0:	008b      	lsls	r3, r1, #2
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c8:	4621      	mov	r1, r4
 80054ca:	008a      	lsls	r2, r1, #2
 80054cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054d0:	f7fb fbfa 	bl	8000cc8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b60      	ldr	r3, [pc, #384]	; (800565c <UART_SetConfig+0x4e4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011c      	lsls	r4, r3, #4
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	61b9      	str	r1, [r7, #24]
 80054fc:	415b      	adcs	r3, r3
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005504:	4641      	mov	r1, r8
 8005506:	1851      	adds	r1, r2, r1
 8005508:	6139      	str	r1, [r7, #16]
 800550a:	4649      	mov	r1, r9
 800550c:	414b      	adcs	r3, r1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800551c:	4659      	mov	r1, fp
 800551e:	00cb      	lsls	r3, r1, #3
 8005520:	4651      	mov	r1, sl
 8005522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005526:	4651      	mov	r1, sl
 8005528:	00ca      	lsls	r2, r1, #3
 800552a:	4610      	mov	r0, r2
 800552c:	4619      	mov	r1, r3
 800552e:	4603      	mov	r3, r0
 8005530:	4642      	mov	r2, r8
 8005532:	189b      	adds	r3, r3, r2
 8005534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005538:	464b      	mov	r3, r9
 800553a:	460a      	mov	r2, r1
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	67bb      	str	r3, [r7, #120]	; 0x78
 800554e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800555c:	4649      	mov	r1, r9
 800555e:	008b      	lsls	r3, r1, #2
 8005560:	4641      	mov	r1, r8
 8005562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005566:	4641      	mov	r1, r8
 8005568:	008a      	lsls	r2, r1, #2
 800556a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800556e:	f7fb fbab 	bl	8000cc8 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4611      	mov	r1, r2
 8005578:	4b38      	ldr	r3, [pc, #224]	; (800565c <UART_SetConfig+0x4e4>)
 800557a:	fba3 2301 	umull	r2, r3, r3, r1
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2264      	movs	r2, #100	; 0x64
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	1acb      	subs	r3, r1, r3
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	3332      	adds	r3, #50	; 0x32
 800558c:	4a33      	ldr	r2, [pc, #204]	; (800565c <UART_SetConfig+0x4e4>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005598:	441c      	add	r4, r3
 800559a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559e:	2200      	movs	r2, #0
 80055a0:	673b      	str	r3, [r7, #112]	; 0x70
 80055a2:	677a      	str	r2, [r7, #116]	; 0x74
 80055a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	415b      	adcs	r3, r3
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ea:	464b      	mov	r3, r9
 80055ec:	460a      	mov	r2, r1
 80055ee:	eb42 0303 	adc.w	r3, r2, r3
 80055f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	663b      	str	r3, [r7, #96]	; 0x60
 80055fe:	667a      	str	r2, [r7, #100]	; 0x64
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800560c:	4649      	mov	r1, r9
 800560e:	008b      	lsls	r3, r1, #2
 8005610:	4641      	mov	r1, r8
 8005612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005616:	4641      	mov	r1, r8
 8005618:	008a      	lsls	r2, r1, #2
 800561a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800561e:	f7fb fb53 	bl	8000cc8 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <UART_SetConfig+0x4e4>)
 8005628:	fba3 1302 	umull	r1, r3, r3, r2
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	2164      	movs	r1, #100	; 0x64
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	3332      	adds	r3, #50	; 0x32
 800563a:	4a08      	ldr	r2, [pc, #32]	; (800565c <UART_SetConfig+0x4e4>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4422      	add	r2, r4
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565c:	51eb851f 	.word	0x51eb851f

08005660 <_ZdlPvj>:
 8005660:	f000 b800 	b.w	8005664 <_ZdlPv>

08005664 <_ZdlPv>:
 8005664:	f000 b810 	b.w	8005688 <free>

08005668 <abort>:
 8005668:	b508      	push	{r3, lr}
 800566a:	2006      	movs	r0, #6
 800566c:	f000 fe7c 	bl	8006368 <raise>
 8005670:	2001      	movs	r0, #1
 8005672:	f7fd fa93 	bl	8002b9c <_exit>
	...

08005678 <malloc>:
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <malloc+0xc>)
 800567a:	4601      	mov	r1, r0
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	f000 b82b 	b.w	80056d8 <_malloc_r>
 8005682:	bf00      	nop
 8005684:	20000064 	.word	0x20000064

08005688 <free>:
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <free+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f001 bd99 	b.w	80071c4 <_free_r>
 8005692:	bf00      	nop
 8005694:	20000064 	.word	0x20000064

08005698 <sbrk_aligned>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	4e0e      	ldr	r6, [pc, #56]	; (80056d4 <sbrk_aligned+0x3c>)
 800569c:	460c      	mov	r4, r1
 800569e:	6831      	ldr	r1, [r6, #0]
 80056a0:	4605      	mov	r5, r0
 80056a2:	b911      	cbnz	r1, 80056aa <sbrk_aligned+0x12>
 80056a4:	f000 feb4 	bl	8006410 <_sbrk_r>
 80056a8:	6030      	str	r0, [r6, #0]
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 feaf 	bl	8006410 <_sbrk_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	d00a      	beq.n	80056cc <sbrk_aligned+0x34>
 80056b6:	1cc4      	adds	r4, r0, #3
 80056b8:	f024 0403 	bic.w	r4, r4, #3
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d007      	beq.n	80056d0 <sbrk_aligned+0x38>
 80056c0:	1a21      	subs	r1, r4, r0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 fea4 	bl	8006410 <_sbrk_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d101      	bne.n	80056d0 <sbrk_aligned+0x38>
 80056cc:	f04f 34ff 	mov.w	r4, #4294967295
 80056d0:	4620      	mov	r0, r4
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	2000042c 	.word	0x2000042c

080056d8 <_malloc_r>:
 80056d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056dc:	1ccd      	adds	r5, r1, #3
 80056de:	f025 0503 	bic.w	r5, r5, #3
 80056e2:	3508      	adds	r5, #8
 80056e4:	2d0c      	cmp	r5, #12
 80056e6:	bf38      	it	cc
 80056e8:	250c      	movcc	r5, #12
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	4607      	mov	r7, r0
 80056ee:	db01      	blt.n	80056f4 <_malloc_r+0x1c>
 80056f0:	42a9      	cmp	r1, r5
 80056f2:	d905      	bls.n	8005700 <_malloc_r+0x28>
 80056f4:	230c      	movs	r3, #12
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	2600      	movs	r6, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005700:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057d4 <_malloc_r+0xfc>
 8005704:	f000 f868 	bl	80057d8 <__malloc_lock>
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	461c      	mov	r4, r3
 800570e:	bb5c      	cbnz	r4, 8005768 <_malloc_r+0x90>
 8005710:	4629      	mov	r1, r5
 8005712:	4638      	mov	r0, r7
 8005714:	f7ff ffc0 	bl	8005698 <sbrk_aligned>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	4604      	mov	r4, r0
 800571c:	d155      	bne.n	80057ca <_malloc_r+0xf2>
 800571e:	f8d8 4000 	ldr.w	r4, [r8]
 8005722:	4626      	mov	r6, r4
 8005724:	2e00      	cmp	r6, #0
 8005726:	d145      	bne.n	80057b4 <_malloc_r+0xdc>
 8005728:	2c00      	cmp	r4, #0
 800572a:	d048      	beq.n	80057be <_malloc_r+0xe6>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	4631      	mov	r1, r6
 8005730:	4638      	mov	r0, r7
 8005732:	eb04 0903 	add.w	r9, r4, r3
 8005736:	f000 fe6b 	bl	8006410 <_sbrk_r>
 800573a:	4581      	cmp	r9, r0
 800573c:	d13f      	bne.n	80057be <_malloc_r+0xe6>
 800573e:	6821      	ldr	r1, [r4, #0]
 8005740:	1a6d      	subs	r5, r5, r1
 8005742:	4629      	mov	r1, r5
 8005744:	4638      	mov	r0, r7
 8005746:	f7ff ffa7 	bl	8005698 <sbrk_aligned>
 800574a:	3001      	adds	r0, #1
 800574c:	d037      	beq.n	80057be <_malloc_r+0xe6>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	442b      	add	r3, r5
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	f8d8 3000 	ldr.w	r3, [r8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d038      	beq.n	80057ce <_malloc_r+0xf6>
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	42a2      	cmp	r2, r4
 8005760:	d12b      	bne.n	80057ba <_malloc_r+0xe2>
 8005762:	2200      	movs	r2, #0
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	e00f      	b.n	8005788 <_malloc_r+0xb0>
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	1b52      	subs	r2, r2, r5
 800576c:	d41f      	bmi.n	80057ae <_malloc_r+0xd6>
 800576e:	2a0b      	cmp	r2, #11
 8005770:	d917      	bls.n	80057a2 <_malloc_r+0xca>
 8005772:	1961      	adds	r1, r4, r5
 8005774:	42a3      	cmp	r3, r4
 8005776:	6025      	str	r5, [r4, #0]
 8005778:	bf18      	it	ne
 800577a:	6059      	strne	r1, [r3, #4]
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	bf08      	it	eq
 8005780:	f8c8 1000 	streq.w	r1, [r8]
 8005784:	5162      	str	r2, [r4, r5]
 8005786:	604b      	str	r3, [r1, #4]
 8005788:	4638      	mov	r0, r7
 800578a:	f104 060b 	add.w	r6, r4, #11
 800578e:	f000 f829 	bl	80057e4 <__malloc_unlock>
 8005792:	f026 0607 	bic.w	r6, r6, #7
 8005796:	1d23      	adds	r3, r4, #4
 8005798:	1af2      	subs	r2, r6, r3
 800579a:	d0ae      	beq.n	80056fa <_malloc_r+0x22>
 800579c:	1b9b      	subs	r3, r3, r6
 800579e:	50a3      	str	r3, [r4, r2]
 80057a0:	e7ab      	b.n	80056fa <_malloc_r+0x22>
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	6862      	ldr	r2, [r4, #4]
 80057a6:	d1dd      	bne.n	8005764 <_malloc_r+0x8c>
 80057a8:	f8c8 2000 	str.w	r2, [r8]
 80057ac:	e7ec      	b.n	8005788 <_malloc_r+0xb0>
 80057ae:	4623      	mov	r3, r4
 80057b0:	6864      	ldr	r4, [r4, #4]
 80057b2:	e7ac      	b.n	800570e <_malloc_r+0x36>
 80057b4:	4634      	mov	r4, r6
 80057b6:	6876      	ldr	r6, [r6, #4]
 80057b8:	e7b4      	b.n	8005724 <_malloc_r+0x4c>
 80057ba:	4613      	mov	r3, r2
 80057bc:	e7cc      	b.n	8005758 <_malloc_r+0x80>
 80057be:	230c      	movs	r3, #12
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4638      	mov	r0, r7
 80057c4:	f000 f80e 	bl	80057e4 <__malloc_unlock>
 80057c8:	e797      	b.n	80056fa <_malloc_r+0x22>
 80057ca:	6025      	str	r5, [r4, #0]
 80057cc:	e7dc      	b.n	8005788 <_malloc_r+0xb0>
 80057ce:	605b      	str	r3, [r3, #4]
 80057d0:	deff      	udf	#255	; 0xff
 80057d2:	bf00      	nop
 80057d4:	20000428 	.word	0x20000428

080057d8 <__malloc_lock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_lock+0x8>)
 80057da:	f000 be66 	b.w	80064aa <__retarget_lock_acquire_recursive>
 80057de:	bf00      	nop
 80057e0:	20000570 	.word	0x20000570

080057e4 <__malloc_unlock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_unlock+0x8>)
 80057e6:	f000 be61 	b.w	80064ac <__retarget_lock_release_recursive>
 80057ea:	bf00      	nop
 80057ec:	20000570 	.word	0x20000570

080057f0 <__cvt>:
 80057f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	ec55 4b10 	vmov	r4, r5, d0
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	460e      	mov	r6, r1
 80057fc:	4619      	mov	r1, r3
 80057fe:	462b      	mov	r3, r5
 8005800:	bfbb      	ittet	lt
 8005802:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005806:	461d      	movlt	r5, r3
 8005808:	2300      	movge	r3, #0
 800580a:	232d      	movlt	r3, #45	; 0x2d
 800580c:	700b      	strb	r3, [r1, #0]
 800580e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005810:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005814:	4691      	mov	r9, r2
 8005816:	f023 0820 	bic.w	r8, r3, #32
 800581a:	bfbc      	itt	lt
 800581c:	4622      	movlt	r2, r4
 800581e:	4614      	movlt	r4, r2
 8005820:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005824:	d005      	beq.n	8005832 <__cvt+0x42>
 8005826:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800582a:	d100      	bne.n	800582e <__cvt+0x3e>
 800582c:	3601      	adds	r6, #1
 800582e:	2102      	movs	r1, #2
 8005830:	e000      	b.n	8005834 <__cvt+0x44>
 8005832:	2103      	movs	r1, #3
 8005834:	ab03      	add	r3, sp, #12
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	ab02      	add	r3, sp, #8
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	ec45 4b10 	vmov	d0, r4, r5
 8005840:	4653      	mov	r3, sl
 8005842:	4632      	mov	r2, r6
 8005844:	f000 fecc 	bl	80065e0 <_dtoa_r>
 8005848:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800584c:	4607      	mov	r7, r0
 800584e:	d102      	bne.n	8005856 <__cvt+0x66>
 8005850:	f019 0f01 	tst.w	r9, #1
 8005854:	d022      	beq.n	800589c <__cvt+0xac>
 8005856:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800585a:	eb07 0906 	add.w	r9, r7, r6
 800585e:	d110      	bne.n	8005882 <__cvt+0x92>
 8005860:	783b      	ldrb	r3, [r7, #0]
 8005862:	2b30      	cmp	r3, #48	; 0x30
 8005864:	d10a      	bne.n	800587c <__cvt+0x8c>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fb f94b 	bl	8000b08 <__aeabi_dcmpeq>
 8005872:	b918      	cbnz	r0, 800587c <__cvt+0x8c>
 8005874:	f1c6 0601 	rsb	r6, r6, #1
 8005878:	f8ca 6000 	str.w	r6, [sl]
 800587c:	f8da 3000 	ldr.w	r3, [sl]
 8005880:	4499      	add	r9, r3
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4620      	mov	r0, r4
 8005888:	4629      	mov	r1, r5
 800588a:	f7fb f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800588e:	b108      	cbz	r0, 8005894 <__cvt+0xa4>
 8005890:	f8cd 900c 	str.w	r9, [sp, #12]
 8005894:	2230      	movs	r2, #48	; 0x30
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	454b      	cmp	r3, r9
 800589a:	d307      	bcc.n	80058ac <__cvt+0xbc>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a0:	1bdb      	subs	r3, r3, r7
 80058a2:	4638      	mov	r0, r7
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	b004      	add	sp, #16
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	9103      	str	r1, [sp, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e7f0      	b.n	8005896 <__cvt+0xa6>

080058b4 <__exponent>:
 80058b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b6:	4603      	mov	r3, r0
 80058b8:	2900      	cmp	r1, #0
 80058ba:	bfb8      	it	lt
 80058bc:	4249      	neglt	r1, r1
 80058be:	f803 2b02 	strb.w	r2, [r3], #2
 80058c2:	bfb4      	ite	lt
 80058c4:	222d      	movlt	r2, #45	; 0x2d
 80058c6:	222b      	movge	r2, #43	; 0x2b
 80058c8:	2909      	cmp	r1, #9
 80058ca:	7042      	strb	r2, [r0, #1]
 80058cc:	dd2a      	ble.n	8005924 <__exponent+0x70>
 80058ce:	f10d 0207 	add.w	r2, sp, #7
 80058d2:	4617      	mov	r7, r2
 80058d4:	260a      	movs	r6, #10
 80058d6:	4694      	mov	ip, r2
 80058d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80058dc:	fb06 1415 	mls	r4, r6, r5, r1
 80058e0:	3430      	adds	r4, #48	; 0x30
 80058e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80058e6:	460c      	mov	r4, r1
 80058e8:	2c63      	cmp	r4, #99	; 0x63
 80058ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80058ee:	4629      	mov	r1, r5
 80058f0:	dcf1      	bgt.n	80058d6 <__exponent+0x22>
 80058f2:	3130      	adds	r1, #48	; 0x30
 80058f4:	f1ac 0402 	sub.w	r4, ip, #2
 80058f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80058fc:	1c41      	adds	r1, r0, #1
 80058fe:	4622      	mov	r2, r4
 8005900:	42ba      	cmp	r2, r7
 8005902:	d30a      	bcc.n	800591a <__exponent+0x66>
 8005904:	f10d 0209 	add.w	r2, sp, #9
 8005908:	eba2 020c 	sub.w	r2, r2, ip
 800590c:	42bc      	cmp	r4, r7
 800590e:	bf88      	it	hi
 8005910:	2200      	movhi	r2, #0
 8005912:	4413      	add	r3, r2
 8005914:	1a18      	subs	r0, r3, r0
 8005916:	b003      	add	sp, #12
 8005918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800591e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005922:	e7ed      	b.n	8005900 <__exponent+0x4c>
 8005924:	2330      	movs	r3, #48	; 0x30
 8005926:	3130      	adds	r1, #48	; 0x30
 8005928:	7083      	strb	r3, [r0, #2]
 800592a:	70c1      	strb	r1, [r0, #3]
 800592c:	1d03      	adds	r3, r0, #4
 800592e:	e7f1      	b.n	8005914 <__exponent+0x60>

08005930 <_printf_float>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b02 	vpush	{d8}
 8005938:	b08d      	sub	sp, #52	; 0x34
 800593a:	460c      	mov	r4, r1
 800593c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005940:	4616      	mov	r6, r2
 8005942:	461f      	mov	r7, r3
 8005944:	4605      	mov	r5, r0
 8005946:	f000 fd17 	bl	8006378 <_localeconv_r>
 800594a:	f8d0 a000 	ldr.w	sl, [r0]
 800594e:	4650      	mov	r0, sl
 8005950:	f7fa fcae 	bl	80002b0 <strlen>
 8005954:	2300      	movs	r3, #0
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	f8d8 3000 	ldr.w	r3, [r8]
 8005960:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005964:	3307      	adds	r3, #7
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	f103 0208 	add.w	r2, r3, #8
 800596e:	f8c8 2000 	str.w	r2, [r8]
 8005972:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005976:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800597a:	9307      	str	r3, [sp, #28]
 800597c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005980:	ee08 0a10 	vmov	s16, r0
 8005984:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598c:	4b9e      	ldr	r3, [pc, #632]	; (8005c08 <_printf_float+0x2d8>)
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	f7fb f8eb 	bl	8000b6c <__aeabi_dcmpun>
 8005996:	bb88      	cbnz	r0, 80059fc <_printf_float+0xcc>
 8005998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <_printf_float+0x2d8>)
 800599e:	f04f 32ff 	mov.w	r2, #4294967295
 80059a2:	f7fb f8c5 	bl	8000b30 <__aeabi_dcmple>
 80059a6:	bb48      	cbnz	r0, 80059fc <_printf_float+0xcc>
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fb f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80059b4:	b110      	cbz	r0, 80059bc <_printf_float+0x8c>
 80059b6:	232d      	movs	r3, #45	; 0x2d
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059bc:	4a93      	ldr	r2, [pc, #588]	; (8005c0c <_printf_float+0x2dc>)
 80059be:	4b94      	ldr	r3, [pc, #592]	; (8005c10 <_printf_float+0x2e0>)
 80059c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059c4:	bf94      	ite	ls
 80059c6:	4690      	movls	r8, r2
 80059c8:	4698      	movhi	r8, r3
 80059ca:	2303      	movs	r3, #3
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	9b05      	ldr	r3, [sp, #20]
 80059d0:	f023 0304 	bic.w	r3, r3, #4
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	f04f 0900 	mov.w	r9, #0
 80059da:	9700      	str	r7, [sp, #0]
 80059dc:	4633      	mov	r3, r6
 80059de:	aa0b      	add	r2, sp, #44	; 0x2c
 80059e0:	4621      	mov	r1, r4
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 f9da 	bl	8005d9c <_printf_common>
 80059e8:	3001      	adds	r0, #1
 80059ea:	f040 8090 	bne.w	8005b0e <_printf_float+0x1de>
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	b00d      	add	sp, #52	; 0x34
 80059f4:	ecbd 8b02 	vpop	{d8}
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	4642      	mov	r2, r8
 80059fe:	464b      	mov	r3, r9
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fb f8b2 	bl	8000b6c <__aeabi_dcmpun>
 8005a08:	b140      	cbz	r0, 8005a1c <_printf_float+0xec>
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfbc      	itt	lt
 8005a10:	232d      	movlt	r3, #45	; 0x2d
 8005a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a16:	4a7f      	ldr	r2, [pc, #508]	; (8005c14 <_printf_float+0x2e4>)
 8005a18:	4b7f      	ldr	r3, [pc, #508]	; (8005c18 <_printf_float+0x2e8>)
 8005a1a:	e7d1      	b.n	80059c0 <_printf_float+0x90>
 8005a1c:	6863      	ldr	r3, [r4, #4]
 8005a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a22:	9206      	str	r2, [sp, #24]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	d13f      	bne.n	8005aa8 <_printf_float+0x178>
 8005a28:	2306      	movs	r3, #6
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	9b05      	ldr	r3, [sp, #20]
 8005a2e:	6861      	ldr	r1, [r4, #4]
 8005a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a34:	2300      	movs	r3, #0
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	ab0a      	add	r3, sp, #40	; 0x28
 8005a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a3e:	ab09      	add	r3, sp, #36	; 0x24
 8005a40:	ec49 8b10 	vmov	d0, r8, r9
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fecf 	bl	80057f0 <__cvt>
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a56:	2b47      	cmp	r3, #71	; 0x47
 8005a58:	4680      	mov	r8, r0
 8005a5a:	d108      	bne.n	8005a6e <_printf_float+0x13e>
 8005a5c:	1cc8      	adds	r0, r1, #3
 8005a5e:	db02      	blt.n	8005a66 <_printf_float+0x136>
 8005a60:	6863      	ldr	r3, [r4, #4]
 8005a62:	4299      	cmp	r1, r3
 8005a64:	dd41      	ble.n	8005aea <_printf_float+0x1ba>
 8005a66:	f1ab 0302 	sub.w	r3, fp, #2
 8005a6a:	fa5f fb83 	uxtb.w	fp, r3
 8005a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a72:	d820      	bhi.n	8005ab6 <_printf_float+0x186>
 8005a74:	3901      	subs	r1, #1
 8005a76:	465a      	mov	r2, fp
 8005a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a7e:	f7ff ff19 	bl	80058b4 <__exponent>
 8005a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a84:	1813      	adds	r3, r2, r0
 8005a86:	2a01      	cmp	r2, #1
 8005a88:	4681      	mov	r9, r0
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	dc02      	bgt.n	8005a94 <_printf_float+0x164>
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	07d2      	lsls	r2, r2, #31
 8005a92:	d501      	bpl.n	8005a98 <_printf_float+0x168>
 8005a94:	3301      	adds	r3, #1
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d09c      	beq.n	80059da <_printf_float+0xaa>
 8005aa0:	232d      	movs	r3, #45	; 0x2d
 8005aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa6:	e798      	b.n	80059da <_printf_float+0xaa>
 8005aa8:	9a06      	ldr	r2, [sp, #24]
 8005aaa:	2a47      	cmp	r2, #71	; 0x47
 8005aac:	d1be      	bne.n	8005a2c <_printf_float+0xfc>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1bc      	bne.n	8005a2c <_printf_float+0xfc>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e7b9      	b.n	8005a2a <_printf_float+0xfa>
 8005ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005aba:	d118      	bne.n	8005aee <_printf_float+0x1be>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	dd0b      	ble.n	8005ada <_printf_float+0x1aa>
 8005ac2:	6121      	str	r1, [r4, #16]
 8005ac4:	b913      	cbnz	r3, 8005acc <_printf_float+0x19c>
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	07d0      	lsls	r0, r2, #31
 8005aca:	d502      	bpl.n	8005ad2 <_printf_float+0x1a2>
 8005acc:	3301      	adds	r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ad4:	f04f 0900 	mov.w	r9, #0
 8005ad8:	e7de      	b.n	8005a98 <_printf_float+0x168>
 8005ada:	b913      	cbnz	r3, 8005ae2 <_printf_float+0x1b2>
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	07d2      	lsls	r2, r2, #31
 8005ae0:	d501      	bpl.n	8005ae6 <_printf_float+0x1b6>
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	e7f4      	b.n	8005ad0 <_printf_float+0x1a0>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e7f2      	b.n	8005ad0 <_printf_float+0x1a0>
 8005aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af0:	4299      	cmp	r1, r3
 8005af2:	db05      	blt.n	8005b00 <_printf_float+0x1d0>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	6121      	str	r1, [r4, #16]
 8005af8:	07d8      	lsls	r0, r3, #31
 8005afa:	d5ea      	bpl.n	8005ad2 <_printf_float+0x1a2>
 8005afc:	1c4b      	adds	r3, r1, #1
 8005afe:	e7e7      	b.n	8005ad0 <_printf_float+0x1a0>
 8005b00:	2900      	cmp	r1, #0
 8005b02:	bfd4      	ite	le
 8005b04:	f1c1 0202 	rsble	r2, r1, #2
 8005b08:	2201      	movgt	r2, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	e7e0      	b.n	8005ad0 <_printf_float+0x1a0>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	055a      	lsls	r2, r3, #21
 8005b12:	d407      	bmi.n	8005b24 <_printf_float+0x1f4>
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	4642      	mov	r2, r8
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d12c      	bne.n	8005b7c <_printf_float+0x24c>
 8005b22:	e764      	b.n	80059ee <_printf_float+0xbe>
 8005b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b28:	f240 80e0 	bls.w	8005cec <_printf_float+0x3bc>
 8005b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b30:	2200      	movs	r2, #0
 8005b32:	2300      	movs	r3, #0
 8005b34:	f7fa ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d034      	beq.n	8005ba6 <_printf_float+0x276>
 8005b3c:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <_printf_float+0x2ec>)
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af51 	beq.w	80059ee <_printf_float+0xbe>
 8005b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b50:	429a      	cmp	r2, r3
 8005b52:	db02      	blt.n	8005b5a <_printf_float+0x22a>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07d8      	lsls	r0, r3, #31
 8005b58:	d510      	bpl.n	8005b7c <_printf_float+0x24c>
 8005b5a:	ee18 3a10 	vmov	r3, s16
 8005b5e:	4652      	mov	r2, sl
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af41 	beq.w	80059ee <_printf_float+0xbe>
 8005b6c:	f04f 0800 	mov.w	r8, #0
 8005b70:	f104 091a 	add.w	r9, r4, #26
 8005b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4543      	cmp	r3, r8
 8005b7a:	dc09      	bgt.n	8005b90 <_printf_float+0x260>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	f100 8107 	bmi.w	8005d92 <_printf_float+0x462>
 8005b84:	68e0      	ldr	r0, [r4, #12]
 8005b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b88:	4298      	cmp	r0, r3
 8005b8a:	bfb8      	it	lt
 8005b8c:	4618      	movlt	r0, r3
 8005b8e:	e730      	b.n	80059f2 <_printf_float+0xc2>
 8005b90:	2301      	movs	r3, #1
 8005b92:	464a      	mov	r2, r9
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af27 	beq.w	80059ee <_printf_float+0xbe>
 8005ba0:	f108 0801 	add.w	r8, r8, #1
 8005ba4:	e7e6      	b.n	8005b74 <_printf_float+0x244>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc39      	bgt.n	8005c20 <_printf_float+0x2f0>
 8005bac:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <_printf_float+0x2ec>)
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af19 	beq.w	80059ee <_printf_float+0xbe>
 8005bbc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d102      	bne.n	8005bca <_printf_float+0x29a>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d5d8      	bpl.n	8005b7c <_printf_float+0x24c>
 8005bca:	ee18 3a10 	vmov	r3, s16
 8005bce:	4652      	mov	r2, sl
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af09 	beq.w	80059ee <_printf_float+0xbe>
 8005bdc:	f04f 0900 	mov.w	r9, #0
 8005be0:	f104 0a1a 	add.w	sl, r4, #26
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	425b      	negs	r3, r3
 8005be8:	454b      	cmp	r3, r9
 8005bea:	dc01      	bgt.n	8005bf0 <_printf_float+0x2c0>
 8005bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bee:	e792      	b.n	8005b16 <_printf_float+0x1e6>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4652      	mov	r2, sl
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f aef7 	beq.w	80059ee <_printf_float+0xbe>
 8005c00:	f109 0901 	add.w	r9, r9, #1
 8005c04:	e7ee      	b.n	8005be4 <_printf_float+0x2b4>
 8005c06:	bf00      	nop
 8005c08:	7fefffff 	.word	0x7fefffff
 8005c0c:	08008508 	.word	0x08008508
 8005c10:	0800850c 	.word	0x0800850c
 8005c14:	08008510 	.word	0x08008510
 8005c18:	08008514 	.word	0x08008514
 8005c1c:	08008518 	.word	0x08008518
 8005c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c24:	429a      	cmp	r2, r3
 8005c26:	bfa8      	it	ge
 8005c28:	461a      	movge	r2, r3
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	dc37      	bgt.n	8005ca0 <_printf_float+0x370>
 8005c30:	f04f 0b00 	mov.w	fp, #0
 8005c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c38:	f104 021a 	add.w	r2, r4, #26
 8005c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	eba3 0309 	sub.w	r3, r3, r9
 8005c44:	455b      	cmp	r3, fp
 8005c46:	dc33      	bgt.n	8005cb0 <_printf_float+0x380>
 8005c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	db3b      	blt.n	8005cc8 <_printf_float+0x398>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d438      	bmi.n	8005cc8 <_printf_float+0x398>
 8005c56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c5a:	eba2 0903 	sub.w	r9, r2, r3
 8005c5e:	9b05      	ldr	r3, [sp, #20]
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	4591      	cmp	r9, r2
 8005c64:	bfa8      	it	ge
 8005c66:	4691      	movge	r9, r2
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	dc35      	bgt.n	8005cda <_printf_float+0x3aa>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c76:	f104 0a1a 	add.w	sl, r4, #26
 8005c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	eba3 0309 	sub.w	r3, r3, r9
 8005c84:	4543      	cmp	r3, r8
 8005c86:	f77f af79 	ble.w	8005b7c <_printf_float+0x24c>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f aeaa 	beq.w	80059ee <_printf_float+0xbe>
 8005c9a:	f108 0801 	add.w	r8, r8, #1
 8005c9e:	e7ec      	b.n	8005c7a <_printf_float+0x34a>
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	d1c0      	bne.n	8005c30 <_printf_float+0x300>
 8005cae:	e69e      	b.n	80059ee <_printf_float+0xbe>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	9205      	str	r2, [sp, #20]
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f ae97 	beq.w	80059ee <_printf_float+0xbe>
 8005cc0:	9a05      	ldr	r2, [sp, #20]
 8005cc2:	f10b 0b01 	add.w	fp, fp, #1
 8005cc6:	e7b9      	b.n	8005c3c <_printf_float+0x30c>
 8005cc8:	ee18 3a10 	vmov	r3, s16
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d1be      	bne.n	8005c56 <_printf_float+0x326>
 8005cd8:	e689      	b.n	80059ee <_printf_float+0xbe>
 8005cda:	9a05      	ldr	r2, [sp, #20]
 8005cdc:	464b      	mov	r3, r9
 8005cde:	4442      	add	r2, r8
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d1c1      	bne.n	8005c6e <_printf_float+0x33e>
 8005cea:	e680      	b.n	80059ee <_printf_float+0xbe>
 8005cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cee:	2a01      	cmp	r2, #1
 8005cf0:	dc01      	bgt.n	8005cf6 <_printf_float+0x3c6>
 8005cf2:	07db      	lsls	r3, r3, #31
 8005cf4:	d53a      	bpl.n	8005d6c <_printf_float+0x43c>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	f43f ae74 	beq.w	80059ee <_printf_float+0xbe>
 8005d06:	ee18 3a10 	vmov	r3, s16
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f ae6b 	beq.w	80059ee <_printf_float+0xbe>
 8005d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d24:	f7fa fef0 	bl	8000b08 <__aeabi_dcmpeq>
 8005d28:	b9d8      	cbnz	r0, 8005d62 <_printf_float+0x432>
 8005d2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d2e:	f108 0201 	add.w	r2, r8, #1
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d10e      	bne.n	8005d5a <_printf_float+0x42a>
 8005d3c:	e657      	b.n	80059ee <_printf_float+0xbe>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4652      	mov	r2, sl
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae50 	beq.w	80059ee <_printf_float+0xbe>
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	4543      	cmp	r3, r8
 8005d58:	dcf1      	bgt.n	8005d3e <_printf_float+0x40e>
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d60:	e6da      	b.n	8005b18 <_printf_float+0x1e8>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	f104 0a1a 	add.w	sl, r4, #26
 8005d6a:	e7f2      	b.n	8005d52 <_printf_float+0x422>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4642      	mov	r2, r8
 8005d70:	e7df      	b.n	8005d32 <_printf_float+0x402>
 8005d72:	2301      	movs	r3, #1
 8005d74:	464a      	mov	r2, r9
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f ae36 	beq.w	80059ee <_printf_float+0xbe>
 8005d82:	f108 0801 	add.w	r8, r8, #1
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d8a:	1a5b      	subs	r3, r3, r1
 8005d8c:	4543      	cmp	r3, r8
 8005d8e:	dcf0      	bgt.n	8005d72 <_printf_float+0x442>
 8005d90:	e6f8      	b.n	8005b84 <_printf_float+0x254>
 8005d92:	f04f 0800 	mov.w	r8, #0
 8005d96:	f104 0919 	add.w	r9, r4, #25
 8005d9a:	e7f4      	b.n	8005d86 <_printf_float+0x456>

08005d9c <_printf_common>:
 8005d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	4616      	mov	r6, r2
 8005da2:	4699      	mov	r9, r3
 8005da4:	688a      	ldr	r2, [r1, #8]
 8005da6:	690b      	ldr	r3, [r1, #16]
 8005da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bfb8      	it	lt
 8005db0:	4613      	movlt	r3, r2
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db8:	4607      	mov	r7, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	b10a      	cbz	r2, 8005dc2 <_printf_common+0x26>
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	6033      	str	r3, [r6, #0]
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	0699      	lsls	r1, r3, #26
 8005dc6:	bf42      	ittt	mi
 8005dc8:	6833      	ldrmi	r3, [r6, #0]
 8005dca:	3302      	addmi	r3, #2
 8005dcc:	6033      	strmi	r3, [r6, #0]
 8005dce:	6825      	ldr	r5, [r4, #0]
 8005dd0:	f015 0506 	ands.w	r5, r5, #6
 8005dd4:	d106      	bne.n	8005de4 <_printf_common+0x48>
 8005dd6:	f104 0a19 	add.w	sl, r4, #25
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	6832      	ldr	r2, [r6, #0]
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	42ab      	cmp	r3, r5
 8005de2:	dc26      	bgt.n	8005e32 <_printf_common+0x96>
 8005de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de8:	1e13      	subs	r3, r2, #0
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	bf18      	it	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	0692      	lsls	r2, r2, #26
 8005df2:	d42b      	bmi.n	8005e4c <_printf_common+0xb0>
 8005df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d01e      	beq.n	8005e40 <_printf_common+0xa4>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	6922      	ldr	r2, [r4, #16]
 8005e06:	f003 0306 	and.w	r3, r3, #6
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	bf02      	ittt	eq
 8005e0e:	68e5      	ldreq	r5, [r4, #12]
 8005e10:	6833      	ldreq	r3, [r6, #0]
 8005e12:	1aed      	subeq	r5, r5, r3
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	bf0c      	ite	eq
 8005e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e1c:	2500      	movne	r5, #0
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	bfc4      	itt	gt
 8005e22:	1a9b      	subgt	r3, r3, r2
 8005e24:	18ed      	addgt	r5, r5, r3
 8005e26:	2600      	movs	r6, #0
 8005e28:	341a      	adds	r4, #26
 8005e2a:	42b5      	cmp	r5, r6
 8005e2c:	d11a      	bne.n	8005e64 <_printf_common+0xc8>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e008      	b.n	8005e44 <_printf_common+0xa8>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4652      	mov	r2, sl
 8005e36:	4649      	mov	r1, r9
 8005e38:	4638      	mov	r0, r7
 8005e3a:	47c0      	blx	r8
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d103      	bne.n	8005e48 <_printf_common+0xac>
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e48:	3501      	adds	r5, #1
 8005e4a:	e7c6      	b.n	8005dda <_printf_common+0x3e>
 8005e4c:	18e1      	adds	r1, r4, r3
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	2030      	movs	r0, #48	; 0x30
 8005e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e56:	4422      	add	r2, r4
 8005e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e60:	3302      	adds	r3, #2
 8005e62:	e7c7      	b.n	8005df4 <_printf_common+0x58>
 8005e64:	2301      	movs	r3, #1
 8005e66:	4622      	mov	r2, r4
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d0e6      	beq.n	8005e40 <_printf_common+0xa4>
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7d9      	b.n	8005e2a <_printf_common+0x8e>
	...

08005e78 <_printf_i>:
 8005e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	7e0f      	ldrb	r7, [r1, #24]
 8005e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e80:	2f78      	cmp	r7, #120	; 0x78
 8005e82:	4691      	mov	r9, r2
 8005e84:	4680      	mov	r8, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	469a      	mov	sl, r3
 8005e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e8e:	d807      	bhi.n	8005ea0 <_printf_i+0x28>
 8005e90:	2f62      	cmp	r7, #98	; 0x62
 8005e92:	d80a      	bhi.n	8005eaa <_printf_i+0x32>
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	f000 80d4 	beq.w	8006042 <_printf_i+0x1ca>
 8005e9a:	2f58      	cmp	r7, #88	; 0x58
 8005e9c:	f000 80c0 	beq.w	8006020 <_printf_i+0x1a8>
 8005ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea8:	e03a      	b.n	8005f20 <_printf_i+0xa8>
 8005eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eae:	2b15      	cmp	r3, #21
 8005eb0:	d8f6      	bhi.n	8005ea0 <_printf_i+0x28>
 8005eb2:	a101      	add	r1, pc, #4	; (adr r1, 8005eb8 <_printf_i+0x40>)
 8005eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005ea1 	.word	0x08005ea1
 8005ec4:	08005ea1 	.word	0x08005ea1
 8005ec8:	08005ea1 	.word	0x08005ea1
 8005ecc:	08005ea1 	.word	0x08005ea1
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005ea1 	.word	0x08005ea1
 8005ed8:	08005ea1 	.word	0x08005ea1
 8005edc:	08005ea1 	.word	0x08005ea1
 8005ee0:	08005ea1 	.word	0x08005ea1
 8005ee4:	08006029 	.word	0x08006029
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005fe3 	.word	0x08005fe3
 8005ef0:	08005ea1 	.word	0x08005ea1
 8005ef4:	08005ea1 	.word	0x08005ea1
 8005ef8:	0800604b 	.word	0x0800604b
 8005efc:	08005ea1 	.word	0x08005ea1
 8005f00:	08005f51 	.word	0x08005f51
 8005f04:	08005ea1 	.word	0x08005ea1
 8005f08:	08005ea1 	.word	0x08005ea1
 8005f0c:	08005feb 	.word	0x08005feb
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	602a      	str	r2, [r5, #0]
 8005f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f20:	2301      	movs	r3, #1
 8005f22:	e09f      	b.n	8006064 <_printf_i+0x1ec>
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	0607      	lsls	r7, r0, #24
 8005f2a:	f103 0104 	add.w	r1, r3, #4
 8005f2e:	6029      	str	r1, [r5, #0]
 8005f30:	d501      	bpl.n	8005f36 <_printf_i+0xbe>
 8005f32:	681e      	ldr	r6, [r3, #0]
 8005f34:	e003      	b.n	8005f3e <_printf_i+0xc6>
 8005f36:	0646      	lsls	r6, r0, #25
 8005f38:	d5fb      	bpl.n	8005f32 <_printf_i+0xba>
 8005f3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	da03      	bge.n	8005f4a <_printf_i+0xd2>
 8005f42:	232d      	movs	r3, #45	; 0x2d
 8005f44:	4276      	negs	r6, r6
 8005f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4a:	485a      	ldr	r0, [pc, #360]	; (80060b4 <_printf_i+0x23c>)
 8005f4c:	230a      	movs	r3, #10
 8005f4e:	e012      	b.n	8005f76 <_printf_i+0xfe>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	1d19      	adds	r1, r3, #4
 8005f56:	6029      	str	r1, [r5, #0]
 8005f58:	0605      	lsls	r5, r0, #24
 8005f5a:	d501      	bpl.n	8005f60 <_printf_i+0xe8>
 8005f5c:	681e      	ldr	r6, [r3, #0]
 8005f5e:	e002      	b.n	8005f66 <_printf_i+0xee>
 8005f60:	0641      	lsls	r1, r0, #25
 8005f62:	d5fb      	bpl.n	8005f5c <_printf_i+0xe4>
 8005f64:	881e      	ldrh	r6, [r3, #0]
 8005f66:	4853      	ldr	r0, [pc, #332]	; (80060b4 <_printf_i+0x23c>)
 8005f68:	2f6f      	cmp	r7, #111	; 0x6f
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2308      	moveq	r3, #8
 8005f6e:	230a      	movne	r3, #10
 8005f70:	2100      	movs	r1, #0
 8005f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f76:	6865      	ldr	r5, [r4, #4]
 8005f78:	60a5      	str	r5, [r4, #8]
 8005f7a:	2d00      	cmp	r5, #0
 8005f7c:	bfa2      	ittt	ge
 8005f7e:	6821      	ldrge	r1, [r4, #0]
 8005f80:	f021 0104 	bicge.w	r1, r1, #4
 8005f84:	6021      	strge	r1, [r4, #0]
 8005f86:	b90e      	cbnz	r6, 8005f8c <_printf_i+0x114>
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	d04b      	beq.n	8006024 <_printf_i+0x1ac>
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f92:	fb03 6711 	mls	r7, r3, r1, r6
 8005f96:	5dc7      	ldrb	r7, [r0, r7]
 8005f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f9c:	4637      	mov	r7, r6
 8005f9e:	42bb      	cmp	r3, r7
 8005fa0:	460e      	mov	r6, r1
 8005fa2:	d9f4      	bls.n	8005f8e <_printf_i+0x116>
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d10b      	bne.n	8005fc0 <_printf_i+0x148>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	07de      	lsls	r6, r3, #31
 8005fac:	d508      	bpl.n	8005fc0 <_printf_i+0x148>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	bfde      	ittt	le
 8005fb6:	2330      	movle	r3, #48	; 0x30
 8005fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fc0:	1b52      	subs	r2, r2, r5
 8005fc2:	6122      	str	r2, [r4, #16]
 8005fc4:	f8cd a000 	str.w	sl, [sp]
 8005fc8:	464b      	mov	r3, r9
 8005fca:	aa03      	add	r2, sp, #12
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4640      	mov	r0, r8
 8005fd0:	f7ff fee4 	bl	8005d9c <_printf_common>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d14a      	bne.n	800606e <_printf_i+0x1f6>
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	b004      	add	sp, #16
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f043 0320 	orr.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	4833      	ldr	r0, [pc, #204]	; (80060b8 <_printf_i+0x240>)
 8005fec:	2778      	movs	r7, #120	; 0x78
 8005fee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	6829      	ldr	r1, [r5, #0]
 8005ff6:	061f      	lsls	r7, r3, #24
 8005ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ffc:	d402      	bmi.n	8006004 <_printf_i+0x18c>
 8005ffe:	065f      	lsls	r7, r3, #25
 8006000:	bf48      	it	mi
 8006002:	b2b6      	uxthmi	r6, r6
 8006004:	07df      	lsls	r7, r3, #31
 8006006:	bf48      	it	mi
 8006008:	f043 0320 	orrmi.w	r3, r3, #32
 800600c:	6029      	str	r1, [r5, #0]
 800600e:	bf48      	it	mi
 8006010:	6023      	strmi	r3, [r4, #0]
 8006012:	b91e      	cbnz	r6, 800601c <_printf_i+0x1a4>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	f023 0320 	bic.w	r3, r3, #32
 800601a:	6023      	str	r3, [r4, #0]
 800601c:	2310      	movs	r3, #16
 800601e:	e7a7      	b.n	8005f70 <_printf_i+0xf8>
 8006020:	4824      	ldr	r0, [pc, #144]	; (80060b4 <_printf_i+0x23c>)
 8006022:	e7e4      	b.n	8005fee <_printf_i+0x176>
 8006024:	4615      	mov	r5, r2
 8006026:	e7bd      	b.n	8005fa4 <_printf_i+0x12c>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	6826      	ldr	r6, [r4, #0]
 800602c:	6961      	ldr	r1, [r4, #20]
 800602e:	1d18      	adds	r0, r3, #4
 8006030:	6028      	str	r0, [r5, #0]
 8006032:	0635      	lsls	r5, r6, #24
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	d501      	bpl.n	800603c <_printf_i+0x1c4>
 8006038:	6019      	str	r1, [r3, #0]
 800603a:	e002      	b.n	8006042 <_printf_i+0x1ca>
 800603c:	0670      	lsls	r0, r6, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0x1c0>
 8006040:	8019      	strh	r1, [r3, #0]
 8006042:	2300      	movs	r3, #0
 8006044:	6123      	str	r3, [r4, #16]
 8006046:	4615      	mov	r5, r2
 8006048:	e7bc      	b.n	8005fc4 <_printf_i+0x14c>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	1d1a      	adds	r2, r3, #4
 800604e:	602a      	str	r2, [r5, #0]
 8006050:	681d      	ldr	r5, [r3, #0]
 8006052:	6862      	ldr	r2, [r4, #4]
 8006054:	2100      	movs	r1, #0
 8006056:	4628      	mov	r0, r5
 8006058:	f7fa f8da 	bl	8000210 <memchr>
 800605c:	b108      	cbz	r0, 8006062 <_printf_i+0x1ea>
 800605e:	1b40      	subs	r0, r0, r5
 8006060:	6060      	str	r0, [r4, #4]
 8006062:	6863      	ldr	r3, [r4, #4]
 8006064:	6123      	str	r3, [r4, #16]
 8006066:	2300      	movs	r3, #0
 8006068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800606c:	e7aa      	b.n	8005fc4 <_printf_i+0x14c>
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	462a      	mov	r2, r5
 8006072:	4649      	mov	r1, r9
 8006074:	4640      	mov	r0, r8
 8006076:	47d0      	blx	sl
 8006078:	3001      	adds	r0, #1
 800607a:	d0ad      	beq.n	8005fd8 <_printf_i+0x160>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	079b      	lsls	r3, r3, #30
 8006080:	d413      	bmi.n	80060aa <_printf_i+0x232>
 8006082:	68e0      	ldr	r0, [r4, #12]
 8006084:	9b03      	ldr	r3, [sp, #12]
 8006086:	4298      	cmp	r0, r3
 8006088:	bfb8      	it	lt
 800608a:	4618      	movlt	r0, r3
 800608c:	e7a6      	b.n	8005fdc <_printf_i+0x164>
 800608e:	2301      	movs	r3, #1
 8006090:	4632      	mov	r2, r6
 8006092:	4649      	mov	r1, r9
 8006094:	4640      	mov	r0, r8
 8006096:	47d0      	blx	sl
 8006098:	3001      	adds	r0, #1
 800609a:	d09d      	beq.n	8005fd8 <_printf_i+0x160>
 800609c:	3501      	adds	r5, #1
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	9903      	ldr	r1, [sp, #12]
 80060a2:	1a5b      	subs	r3, r3, r1
 80060a4:	42ab      	cmp	r3, r5
 80060a6:	dcf2      	bgt.n	800608e <_printf_i+0x216>
 80060a8:	e7eb      	b.n	8006082 <_printf_i+0x20a>
 80060aa:	2500      	movs	r5, #0
 80060ac:	f104 0619 	add.w	r6, r4, #25
 80060b0:	e7f5      	b.n	800609e <_printf_i+0x226>
 80060b2:	bf00      	nop
 80060b4:	0800851a 	.word	0x0800851a
 80060b8:	0800852b 	.word	0x0800852b

080060bc <std>:
 80060bc:	2300      	movs	r3, #0
 80060be:	b510      	push	{r4, lr}
 80060c0:	4604      	mov	r4, r0
 80060c2:	e9c0 3300 	strd	r3, r3, [r0]
 80060c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ca:	6083      	str	r3, [r0, #8]
 80060cc:	8181      	strh	r1, [r0, #12]
 80060ce:	6643      	str	r3, [r0, #100]	; 0x64
 80060d0:	81c2      	strh	r2, [r0, #14]
 80060d2:	6183      	str	r3, [r0, #24]
 80060d4:	4619      	mov	r1, r3
 80060d6:	2208      	movs	r2, #8
 80060d8:	305c      	adds	r0, #92	; 0x5c
 80060da:	f000 f914 	bl	8006306 <memset>
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <std+0x58>)
 80060e0:	6263      	str	r3, [r4, #36]	; 0x24
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <std+0x5c>)
 80060e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <std+0x60>)
 80060e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060ea:	4b0d      	ldr	r3, [pc, #52]	; (8006120 <std+0x64>)
 80060ec:	6323      	str	r3, [r4, #48]	; 0x30
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <std+0x68>)
 80060f0:	6224      	str	r4, [r4, #32]
 80060f2:	429c      	cmp	r4, r3
 80060f4:	d006      	beq.n	8006104 <std+0x48>
 80060f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060fa:	4294      	cmp	r4, r2
 80060fc:	d002      	beq.n	8006104 <std+0x48>
 80060fe:	33d0      	adds	r3, #208	; 0xd0
 8006100:	429c      	cmp	r4, r3
 8006102:	d105      	bne.n	8006110 <std+0x54>
 8006104:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610c:	f000 b9cc 	b.w	80064a8 <__retarget_lock_init_recursive>
 8006110:	bd10      	pop	{r4, pc}
 8006112:	bf00      	nop
 8006114:	08006281 	.word	0x08006281
 8006118:	080062a3 	.word	0x080062a3
 800611c:	080062db 	.word	0x080062db
 8006120:	080062ff 	.word	0x080062ff
 8006124:	20000430 	.word	0x20000430

08006128 <stdio_exit_handler>:
 8006128:	4a02      	ldr	r2, [pc, #8]	; (8006134 <stdio_exit_handler+0xc>)
 800612a:	4903      	ldr	r1, [pc, #12]	; (8006138 <stdio_exit_handler+0x10>)
 800612c:	4803      	ldr	r0, [pc, #12]	; (800613c <stdio_exit_handler+0x14>)
 800612e:	f000 b869 	b.w	8006204 <_fwalk_sglue>
 8006132:	bf00      	nop
 8006134:	2000000c 	.word	0x2000000c
 8006138:	08007d11 	.word	0x08007d11
 800613c:	20000018 	.word	0x20000018

08006140 <cleanup_stdio>:
 8006140:	6841      	ldr	r1, [r0, #4]
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <cleanup_stdio+0x34>)
 8006144:	4299      	cmp	r1, r3
 8006146:	b510      	push	{r4, lr}
 8006148:	4604      	mov	r4, r0
 800614a:	d001      	beq.n	8006150 <cleanup_stdio+0x10>
 800614c:	f001 fde0 	bl	8007d10 <_fflush_r>
 8006150:	68a1      	ldr	r1, [r4, #8]
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <cleanup_stdio+0x38>)
 8006154:	4299      	cmp	r1, r3
 8006156:	d002      	beq.n	800615e <cleanup_stdio+0x1e>
 8006158:	4620      	mov	r0, r4
 800615a:	f001 fdd9 	bl	8007d10 <_fflush_r>
 800615e:	68e1      	ldr	r1, [r4, #12]
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <cleanup_stdio+0x3c>)
 8006162:	4299      	cmp	r1, r3
 8006164:	d004      	beq.n	8006170 <cleanup_stdio+0x30>
 8006166:	4620      	mov	r0, r4
 8006168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800616c:	f001 bdd0 	b.w	8007d10 <_fflush_r>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	20000430 	.word	0x20000430
 8006178:	20000498 	.word	0x20000498
 800617c:	20000500 	.word	0x20000500

08006180 <global_stdio_init.part.0>:
 8006180:	b510      	push	{r4, lr}
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <global_stdio_init.part.0+0x30>)
 8006184:	4c0b      	ldr	r4, [pc, #44]	; (80061b4 <global_stdio_init.part.0+0x34>)
 8006186:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <global_stdio_init.part.0+0x38>)
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	4620      	mov	r0, r4
 800618c:	2200      	movs	r2, #0
 800618e:	2104      	movs	r1, #4
 8006190:	f7ff ff94 	bl	80060bc <std>
 8006194:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006198:	2201      	movs	r2, #1
 800619a:	2109      	movs	r1, #9
 800619c:	f7ff ff8e 	bl	80060bc <std>
 80061a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061a4:	2202      	movs	r2, #2
 80061a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061aa:	2112      	movs	r1, #18
 80061ac:	f7ff bf86 	b.w	80060bc <std>
 80061b0:	20000568 	.word	0x20000568
 80061b4:	20000430 	.word	0x20000430
 80061b8:	08006129 	.word	0x08006129

080061bc <__sfp_lock_acquire>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__sfp_lock_acquire+0x8>)
 80061be:	f000 b974 	b.w	80064aa <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	20000571 	.word	0x20000571

080061c8 <__sfp_lock_release>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__sfp_lock_release+0x8>)
 80061ca:	f000 b96f 	b.w	80064ac <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	20000571 	.word	0x20000571

080061d4 <__sinit>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	4604      	mov	r4, r0
 80061d8:	f7ff fff0 	bl	80061bc <__sfp_lock_acquire>
 80061dc:	6a23      	ldr	r3, [r4, #32]
 80061de:	b11b      	cbz	r3, 80061e8 <__sinit+0x14>
 80061e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e4:	f7ff bff0 	b.w	80061c8 <__sfp_lock_release>
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__sinit+0x28>)
 80061ea:	6223      	str	r3, [r4, #32]
 80061ec:	4b04      	ldr	r3, [pc, #16]	; (8006200 <__sinit+0x2c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f5      	bne.n	80061e0 <__sinit+0xc>
 80061f4:	f7ff ffc4 	bl	8006180 <global_stdio_init.part.0>
 80061f8:	e7f2      	b.n	80061e0 <__sinit+0xc>
 80061fa:	bf00      	nop
 80061fc:	08006141 	.word	0x08006141
 8006200:	20000568 	.word	0x20000568

08006204 <_fwalk_sglue>:
 8006204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006208:	4607      	mov	r7, r0
 800620a:	4688      	mov	r8, r1
 800620c:	4614      	mov	r4, r2
 800620e:	2600      	movs	r6, #0
 8006210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006214:	f1b9 0901 	subs.w	r9, r9, #1
 8006218:	d505      	bpl.n	8006226 <_fwalk_sglue+0x22>
 800621a:	6824      	ldr	r4, [r4, #0]
 800621c:	2c00      	cmp	r4, #0
 800621e:	d1f7      	bne.n	8006210 <_fwalk_sglue+0xc>
 8006220:	4630      	mov	r0, r6
 8006222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006226:	89ab      	ldrh	r3, [r5, #12]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d907      	bls.n	800623c <_fwalk_sglue+0x38>
 800622c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006230:	3301      	adds	r3, #1
 8006232:	d003      	beq.n	800623c <_fwalk_sglue+0x38>
 8006234:	4629      	mov	r1, r5
 8006236:	4638      	mov	r0, r7
 8006238:	47c0      	blx	r8
 800623a:	4306      	orrs	r6, r0
 800623c:	3568      	adds	r5, #104	; 0x68
 800623e:	e7e9      	b.n	8006214 <_fwalk_sglue+0x10>

08006240 <siprintf>:
 8006240:	b40e      	push	{r1, r2, r3}
 8006242:	b500      	push	{lr}
 8006244:	b09c      	sub	sp, #112	; 0x70
 8006246:	ab1d      	add	r3, sp, #116	; 0x74
 8006248:	9002      	str	r0, [sp, #8]
 800624a:	9006      	str	r0, [sp, #24]
 800624c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006250:	4809      	ldr	r0, [pc, #36]	; (8006278 <siprintf+0x38>)
 8006252:	9107      	str	r1, [sp, #28]
 8006254:	9104      	str	r1, [sp, #16]
 8006256:	4909      	ldr	r1, [pc, #36]	; (800627c <siprintf+0x3c>)
 8006258:	f853 2b04 	ldr.w	r2, [r3], #4
 800625c:	9105      	str	r1, [sp, #20]
 800625e:	6800      	ldr	r0, [r0, #0]
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	a902      	add	r1, sp, #8
 8006264:	f001 fbd0 	bl	8007a08 <_svfiprintf_r>
 8006268:	9b02      	ldr	r3, [sp, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	b01c      	add	sp, #112	; 0x70
 8006270:	f85d eb04 	ldr.w	lr, [sp], #4
 8006274:	b003      	add	sp, #12
 8006276:	4770      	bx	lr
 8006278:	20000064 	.word	0x20000064
 800627c:	ffff0208 	.word	0xffff0208

08006280 <__sread>:
 8006280:	b510      	push	{r4, lr}
 8006282:	460c      	mov	r4, r1
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	f000 f89c 	bl	80063c4 <_read_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	bfab      	itete	ge
 8006290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006292:	89a3      	ldrhlt	r3, [r4, #12]
 8006294:	181b      	addge	r3, r3, r0
 8006296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800629a:	bfac      	ite	ge
 800629c:	6563      	strge	r3, [r4, #84]	; 0x54
 800629e:	81a3      	strhlt	r3, [r4, #12]
 80062a0:	bd10      	pop	{r4, pc}

080062a2 <__swrite>:
 80062a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	461f      	mov	r7, r3
 80062a8:	898b      	ldrh	r3, [r1, #12]
 80062aa:	05db      	lsls	r3, r3, #23
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d505      	bpl.n	80062c0 <__swrite+0x1e>
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	2302      	movs	r3, #2
 80062ba:	2200      	movs	r2, #0
 80062bc:	f000 f870 	bl	80063a0 <_lseek_r>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	4628      	mov	r0, r5
 80062d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	f000 b8ab 	b.w	8006430 <_write_r>

080062da <__sseek>:
 80062da:	b510      	push	{r4, lr}
 80062dc:	460c      	mov	r4, r1
 80062de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e2:	f000 f85d 	bl	80063a0 <_lseek_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	bf15      	itete	ne
 80062ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80062ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062f6:	81a3      	strheq	r3, [r4, #12]
 80062f8:	bf18      	it	ne
 80062fa:	81a3      	strhne	r3, [r4, #12]
 80062fc:	bd10      	pop	{r4, pc}

080062fe <__sclose>:
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f000 b83d 	b.w	8006380 <_close_r>

08006306 <memset>:
 8006306:	4402      	add	r2, r0
 8006308:	4603      	mov	r3, r0
 800630a:	4293      	cmp	r3, r2
 800630c:	d100      	bne.n	8006310 <memset+0xa>
 800630e:	4770      	bx	lr
 8006310:	f803 1b01 	strb.w	r1, [r3], #1
 8006314:	e7f9      	b.n	800630a <memset+0x4>

08006316 <_raise_r>:
 8006316:	291f      	cmp	r1, #31
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4604      	mov	r4, r0
 800631c:	460d      	mov	r5, r1
 800631e:	d904      	bls.n	800632a <_raise_r+0x14>
 8006320:	2316      	movs	r3, #22
 8006322:	6003      	str	r3, [r0, #0]
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	bd38      	pop	{r3, r4, r5, pc}
 800632a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800632c:	b112      	cbz	r2, 8006334 <_raise_r+0x1e>
 800632e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006332:	b94b      	cbnz	r3, 8006348 <_raise_r+0x32>
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f869 	bl	800640c <_getpid_r>
 800633a:	462a      	mov	r2, r5
 800633c:	4601      	mov	r1, r0
 800633e:	4620      	mov	r0, r4
 8006340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006344:	f000 b850 	b.w	80063e8 <_kill_r>
 8006348:	2b01      	cmp	r3, #1
 800634a:	d00a      	beq.n	8006362 <_raise_r+0x4c>
 800634c:	1c59      	adds	r1, r3, #1
 800634e:	d103      	bne.n	8006358 <_raise_r+0x42>
 8006350:	2316      	movs	r3, #22
 8006352:	6003      	str	r3, [r0, #0]
 8006354:	2001      	movs	r0, #1
 8006356:	e7e7      	b.n	8006328 <_raise_r+0x12>
 8006358:	2400      	movs	r4, #0
 800635a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800635e:	4628      	mov	r0, r5
 8006360:	4798      	blx	r3
 8006362:	2000      	movs	r0, #0
 8006364:	e7e0      	b.n	8006328 <_raise_r+0x12>
	...

08006368 <raise>:
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <raise+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f7ff bfd2 	b.w	8006316 <_raise_r>
 8006372:	bf00      	nop
 8006374:	20000064 	.word	0x20000064

08006378 <_localeconv_r>:
 8006378:	4800      	ldr	r0, [pc, #0]	; (800637c <_localeconv_r+0x4>)
 800637a:	4770      	bx	lr
 800637c:	20000158 	.word	0x20000158

08006380 <_close_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d06      	ldr	r5, [pc, #24]	; (800639c <_close_r+0x1c>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fc fc49 	bl	8002c22 <_close>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_close_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_close_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	2000056c 	.word	0x2000056c

080063a0 <_lseek_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	; (80063c0 <_lseek_r+0x20>)
 80063a4:	4604      	mov	r4, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fc fc5e 	bl	8002c70 <_lseek>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_lseek_r+0x1e>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_lseek_r+0x1e>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	2000056c 	.word	0x2000056c

080063c4 <_read_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d07      	ldr	r5, [pc, #28]	; (80063e4 <_read_r+0x20>)
 80063c8:	4604      	mov	r4, r0
 80063ca:	4608      	mov	r0, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f7fc fbec 	bl	8002bb0 <_read>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_read_r+0x1e>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_read_r+0x1e>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	2000056c 	.word	0x2000056c

080063e8 <_kill_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_kill_r+0x20>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fc fbc1 	bl	8002b7c <_kill>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_kill_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_kill_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	2000056c 	.word	0x2000056c

0800640c <_getpid_r>:
 800640c:	f7fc bbae 	b.w	8002b6c <_getpid>

08006410 <_sbrk_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d06      	ldr	r5, [pc, #24]	; (800642c <_sbrk_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fc fc36 	bl	8002c8c <_sbrk>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_sbrk_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_sbrk_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	2000056c 	.word	0x2000056c

08006430 <_write_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_write_r+0x20>)
 8006434:	4604      	mov	r4, r0
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	2200      	movs	r2, #0
 800643c:	602a      	str	r2, [r5, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	f7fc fbd3 	bl	8002bea <_write>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_write_r+0x1e>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_write_r+0x1e>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	2000056c 	.word	0x2000056c

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000064 	.word	0x20000064

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4d0d      	ldr	r5, [pc, #52]	; (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006466:	1b64      	subs	r4, r4, r5
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2600      	movs	r6, #0
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4d0b      	ldr	r5, [pc, #44]	; (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	; (80064a4 <__libc_init_array+0x44>)
 8006474:	f001 ff88 	bl	8008388 <_init>
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2600      	movs	r6, #0
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f855 3b04 	ldr.w	r3, [r5], #4
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	08008884 	.word	0x08008884
 800649c:	08008884 	.word	0x08008884
 80064a0:	08008884 	.word	0x08008884
 80064a4:	0800888c 	.word	0x0800888c

080064a8 <__retarget_lock_init_recursive>:
 80064a8:	4770      	bx	lr

080064aa <__retarget_lock_acquire_recursive>:
 80064aa:	4770      	bx	lr

080064ac <__retarget_lock_release_recursive>:
 80064ac:	4770      	bx	lr

080064ae <memcpy>:
 80064ae:	440a      	add	r2, r1
 80064b0:	4291      	cmp	r1, r2
 80064b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80064b6:	d100      	bne.n	80064ba <memcpy+0xc>
 80064b8:	4770      	bx	lr
 80064ba:	b510      	push	{r4, lr}
 80064bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064c4:	4291      	cmp	r1, r2
 80064c6:	d1f9      	bne.n	80064bc <memcpy+0xe>
 80064c8:	bd10      	pop	{r4, pc}

080064ca <quorem>:
 80064ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ce:	6903      	ldr	r3, [r0, #16]
 80064d0:	690c      	ldr	r4, [r1, #16]
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	4607      	mov	r7, r0
 80064d6:	db7e      	blt.n	80065d6 <quorem+0x10c>
 80064d8:	3c01      	subs	r4, #1
 80064da:	f101 0814 	add.w	r8, r1, #20
 80064de:	f100 0514 	add.w	r5, r0, #20
 80064e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f0:	3301      	adds	r3, #1
 80064f2:	429a      	cmp	r2, r3
 80064f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006500:	d331      	bcc.n	8006566 <quorem+0x9c>
 8006502:	f04f 0e00 	mov.w	lr, #0
 8006506:	4640      	mov	r0, r8
 8006508:	46ac      	mov	ip, r5
 800650a:	46f2      	mov	sl, lr
 800650c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006510:	b293      	uxth	r3, r2
 8006512:	fb06 e303 	mla	r3, r6, r3, lr
 8006516:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800651a:	0c1a      	lsrs	r2, r3, #16
 800651c:	b29b      	uxth	r3, r3
 800651e:	ebaa 0303 	sub.w	r3, sl, r3
 8006522:	f8dc a000 	ldr.w	sl, [ip]
 8006526:	fa13 f38a 	uxtah	r3, r3, sl
 800652a:	fb06 220e 	mla	r2, r6, lr, r2
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	9b00      	ldr	r3, [sp, #0]
 8006532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006536:	b292      	uxth	r2, r2
 8006538:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800653c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006540:	f8bd 3000 	ldrh.w	r3, [sp]
 8006544:	4581      	cmp	r9, r0
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	f84c 3b04 	str.w	r3, [ip], #4
 800654e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006552:	d2db      	bcs.n	800650c <quorem+0x42>
 8006554:	f855 300b 	ldr.w	r3, [r5, fp]
 8006558:	b92b      	cbnz	r3, 8006566 <quorem+0x9c>
 800655a:	9b01      	ldr	r3, [sp, #4]
 800655c:	3b04      	subs	r3, #4
 800655e:	429d      	cmp	r5, r3
 8006560:	461a      	mov	r2, r3
 8006562:	d32c      	bcc.n	80065be <quorem+0xf4>
 8006564:	613c      	str	r4, [r7, #16]
 8006566:	4638      	mov	r0, r7
 8006568:	f001 f8f4 	bl	8007754 <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	db22      	blt.n	80065b6 <quorem+0xec>
 8006570:	3601      	adds	r6, #1
 8006572:	4629      	mov	r1, r5
 8006574:	2000      	movs	r0, #0
 8006576:	f858 2b04 	ldr.w	r2, [r8], #4
 800657a:	f8d1 c000 	ldr.w	ip, [r1]
 800657e:	b293      	uxth	r3, r2
 8006580:	1ac3      	subs	r3, r0, r3
 8006582:	0c12      	lsrs	r2, r2, #16
 8006584:	fa13 f38c 	uxtah	r3, r3, ip
 8006588:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800658c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006596:	45c1      	cmp	r9, r8
 8006598:	f841 3b04 	str.w	r3, [r1], #4
 800659c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065a0:	d2e9      	bcs.n	8006576 <quorem+0xac>
 80065a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065aa:	b922      	cbnz	r2, 80065b6 <quorem+0xec>
 80065ac:	3b04      	subs	r3, #4
 80065ae:	429d      	cmp	r5, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	d30a      	bcc.n	80065ca <quorem+0x100>
 80065b4:	613c      	str	r4, [r7, #16]
 80065b6:	4630      	mov	r0, r6
 80065b8:	b003      	add	sp, #12
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d1ce      	bne.n	8006564 <quorem+0x9a>
 80065c6:	3c01      	subs	r4, #1
 80065c8:	e7c9      	b.n	800655e <quorem+0x94>
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	3b04      	subs	r3, #4
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	d1f0      	bne.n	80065b4 <quorem+0xea>
 80065d2:	3c01      	subs	r4, #1
 80065d4:	e7eb      	b.n	80065ae <quorem+0xe4>
 80065d6:	2000      	movs	r0, #0
 80065d8:	e7ee      	b.n	80065b8 <quorem+0xee>
 80065da:	0000      	movs	r0, r0
 80065dc:	0000      	movs	r0, r0
	...

080065e0 <_dtoa_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b04 	vpush	{d8-d9}
 80065e8:	69c5      	ldr	r5, [r0, #28]
 80065ea:	b093      	sub	sp, #76	; 0x4c
 80065ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065f0:	ec57 6b10 	vmov	r6, r7, d0
 80065f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065f8:	9107      	str	r1, [sp, #28]
 80065fa:	4604      	mov	r4, r0
 80065fc:	920a      	str	r2, [sp, #40]	; 0x28
 80065fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006600:	b975      	cbnz	r5, 8006620 <_dtoa_r+0x40>
 8006602:	2010      	movs	r0, #16
 8006604:	f7ff f838 	bl	8005678 <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	61e0      	str	r0, [r4, #28]
 800660c:	b920      	cbnz	r0, 8006618 <_dtoa_r+0x38>
 800660e:	4bae      	ldr	r3, [pc, #696]	; (80068c8 <_dtoa_r+0x2e8>)
 8006610:	21ef      	movs	r1, #239	; 0xef
 8006612:	48ae      	ldr	r0, [pc, #696]	; (80068cc <_dtoa_r+0x2ec>)
 8006614:	f001 fbbe 	bl	8007d94 <__assert_func>
 8006618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800661c:	6005      	str	r5, [r0, #0]
 800661e:	60c5      	str	r5, [r0, #12]
 8006620:	69e3      	ldr	r3, [r4, #28]
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	b151      	cbz	r1, 800663c <_dtoa_r+0x5c>
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	604a      	str	r2, [r1, #4]
 800662a:	2301      	movs	r3, #1
 800662c:	4093      	lsls	r3, r2
 800662e:	608b      	str	r3, [r1, #8]
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fe53 	bl	80072dc <_Bfree>
 8006636:	69e3      	ldr	r3, [r4, #28]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	1e3b      	subs	r3, r7, #0
 800663e:	bfbb      	ittet	lt
 8006640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006644:	9303      	strlt	r3, [sp, #12]
 8006646:	2300      	movge	r3, #0
 8006648:	2201      	movlt	r2, #1
 800664a:	bfac      	ite	ge
 800664c:	f8c8 3000 	strge.w	r3, [r8]
 8006650:	f8c8 2000 	strlt.w	r2, [r8]
 8006654:	4b9e      	ldr	r3, [pc, #632]	; (80068d0 <_dtoa_r+0x2f0>)
 8006656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800665a:	ea33 0308 	bics.w	r3, r3, r8
 800665e:	d11b      	bne.n	8006698 <_dtoa_r+0xb8>
 8006660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006662:	f242 730f 	movw	r3, #9999	; 0x270f
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800666c:	4333      	orrs	r3, r6
 800666e:	f000 8593 	beq.w	8007198 <_dtoa_r+0xbb8>
 8006672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006674:	b963      	cbnz	r3, 8006690 <_dtoa_r+0xb0>
 8006676:	4b97      	ldr	r3, [pc, #604]	; (80068d4 <_dtoa_r+0x2f4>)
 8006678:	e027      	b.n	80066ca <_dtoa_r+0xea>
 800667a:	4b97      	ldr	r3, [pc, #604]	; (80068d8 <_dtoa_r+0x2f8>)
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	9800      	ldr	r0, [sp, #0]
 8006686:	b013      	add	sp, #76	; 0x4c
 8006688:	ecbd 8b04 	vpop	{d8-d9}
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4b90      	ldr	r3, [pc, #576]	; (80068d4 <_dtoa_r+0x2f4>)
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	3303      	adds	r3, #3
 8006696:	e7f3      	b.n	8006680 <_dtoa_r+0xa0>
 8006698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	ec51 0b17 	vmov	r0, r1, d7
 80066a2:	eeb0 8a47 	vmov.f32	s16, s14
 80066a6:	eef0 8a67 	vmov.f32	s17, s15
 80066aa:	2300      	movs	r3, #0
 80066ac:	f7fa fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 80066b0:	4681      	mov	r9, r0
 80066b2:	b160      	cbz	r0, 80066ce <_dtoa_r+0xee>
 80066b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b6:	2301      	movs	r3, #1
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8568 	beq.w	8007192 <_dtoa_r+0xbb2>
 80066c2:	4b86      	ldr	r3, [pc, #536]	; (80068dc <_dtoa_r+0x2fc>)
 80066c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	e7da      	b.n	8006684 <_dtoa_r+0xa4>
 80066ce:	aa10      	add	r2, sp, #64	; 0x40
 80066d0:	a911      	add	r1, sp, #68	; 0x44
 80066d2:	4620      	mov	r0, r4
 80066d4:	eeb0 0a48 	vmov.f32	s0, s16
 80066d8:	eef0 0a68 	vmov.f32	s1, s17
 80066dc:	f001 f8e0 	bl	80078a0 <__d2b>
 80066e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066e4:	4682      	mov	sl, r0
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	d07f      	beq.n	80067ea <_dtoa_r+0x20a>
 80066ea:	ee18 3a90 	vmov	r3, s17
 80066ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066f6:	ec51 0b18 	vmov	r0, r1, d8
 80066fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006702:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006706:	4619      	mov	r1, r3
 8006708:	2200      	movs	r2, #0
 800670a:	4b75      	ldr	r3, [pc, #468]	; (80068e0 <_dtoa_r+0x300>)
 800670c:	f7f9 fddc 	bl	80002c8 <__aeabi_dsub>
 8006710:	a367      	add	r3, pc, #412	; (adr r3, 80068b0 <_dtoa_r+0x2d0>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 ff8f 	bl	8000638 <__aeabi_dmul>
 800671a:	a367      	add	r3, pc, #412	; (adr r3, 80068b8 <_dtoa_r+0x2d8>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f7f9 fdd4 	bl	80002cc <__adddf3>
 8006724:	4606      	mov	r6, r0
 8006726:	4628      	mov	r0, r5
 8006728:	460f      	mov	r7, r1
 800672a:	f7f9 ff1b 	bl	8000564 <__aeabi_i2d>
 800672e:	a364      	add	r3, pc, #400	; (adr r3, 80068c0 <_dtoa_r+0x2e0>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 ff80 	bl	8000638 <__aeabi_dmul>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4630      	mov	r0, r6
 800673e:	4639      	mov	r1, r7
 8006740:	f7f9 fdc4 	bl	80002cc <__adddf3>
 8006744:	4606      	mov	r6, r0
 8006746:	460f      	mov	r7, r1
 8006748:	f7fa fa26 	bl	8000b98 <__aeabi_d2iz>
 800674c:	2200      	movs	r2, #0
 800674e:	4683      	mov	fp, r0
 8006750:	2300      	movs	r3, #0
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7fa f9e1 	bl	8000b1c <__aeabi_dcmplt>
 800675a:	b148      	cbz	r0, 8006770 <_dtoa_r+0x190>
 800675c:	4658      	mov	r0, fp
 800675e:	f7f9 ff01 	bl	8000564 <__aeabi_i2d>
 8006762:	4632      	mov	r2, r6
 8006764:	463b      	mov	r3, r7
 8006766:	f7fa f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800676a:	b908      	cbnz	r0, 8006770 <_dtoa_r+0x190>
 800676c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006770:	f1bb 0f16 	cmp.w	fp, #22
 8006774:	d857      	bhi.n	8006826 <_dtoa_r+0x246>
 8006776:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <_dtoa_r+0x304>)
 8006778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	ec51 0b18 	vmov	r0, r1, d8
 8006784:	f7fa f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8006788:	2800      	cmp	r0, #0
 800678a:	d04e      	beq.n	800682a <_dtoa_r+0x24a>
 800678c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006790:	2300      	movs	r3, #0
 8006792:	930c      	str	r3, [sp, #48]	; 0x30
 8006794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006796:	1b5b      	subs	r3, r3, r5
 8006798:	1e5a      	subs	r2, r3, #1
 800679a:	bf45      	ittet	mi
 800679c:	f1c3 0301 	rsbmi	r3, r3, #1
 80067a0:	9305      	strmi	r3, [sp, #20]
 80067a2:	2300      	movpl	r3, #0
 80067a4:	2300      	movmi	r3, #0
 80067a6:	9206      	str	r2, [sp, #24]
 80067a8:	bf54      	ite	pl
 80067aa:	9305      	strpl	r3, [sp, #20]
 80067ac:	9306      	strmi	r3, [sp, #24]
 80067ae:	f1bb 0f00 	cmp.w	fp, #0
 80067b2:	db3c      	blt.n	800682e <_dtoa_r+0x24e>
 80067b4:	9b06      	ldr	r3, [sp, #24]
 80067b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067ba:	445b      	add	r3, fp
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	2300      	movs	r3, #0
 80067c0:	9308      	str	r3, [sp, #32]
 80067c2:	9b07      	ldr	r3, [sp, #28]
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d868      	bhi.n	800689a <_dtoa_r+0x2ba>
 80067c8:	2b05      	cmp	r3, #5
 80067ca:	bfc4      	itt	gt
 80067cc:	3b04      	subgt	r3, #4
 80067ce:	9307      	strgt	r3, [sp, #28]
 80067d0:	9b07      	ldr	r3, [sp, #28]
 80067d2:	f1a3 0302 	sub.w	r3, r3, #2
 80067d6:	bfcc      	ite	gt
 80067d8:	2500      	movgt	r5, #0
 80067da:	2501      	movle	r5, #1
 80067dc:	2b03      	cmp	r3, #3
 80067de:	f200 8085 	bhi.w	80068ec <_dtoa_r+0x30c>
 80067e2:	e8df f003 	tbb	[pc, r3]
 80067e6:	3b2e      	.short	0x3b2e
 80067e8:	5839      	.short	0x5839
 80067ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80067ee:	441d      	add	r5, r3
 80067f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	bfc1      	itttt	gt
 80067f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006800:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006804:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006808:	bfd6      	itet	le
 800680a:	f1c3 0320 	rsble	r3, r3, #32
 800680e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006812:	fa06 f003 	lslle.w	r0, r6, r3
 8006816:	f7f9 fe95 	bl	8000544 <__aeabi_ui2d>
 800681a:	2201      	movs	r2, #1
 800681c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006820:	3d01      	subs	r5, #1
 8006822:	920e      	str	r2, [sp, #56]	; 0x38
 8006824:	e76f      	b.n	8006706 <_dtoa_r+0x126>
 8006826:	2301      	movs	r3, #1
 8006828:	e7b3      	b.n	8006792 <_dtoa_r+0x1b2>
 800682a:	900c      	str	r0, [sp, #48]	; 0x30
 800682c:	e7b2      	b.n	8006794 <_dtoa_r+0x1b4>
 800682e:	9b05      	ldr	r3, [sp, #20]
 8006830:	eba3 030b 	sub.w	r3, r3, fp
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	f1cb 0300 	rsb	r3, fp, #0
 800683a:	9308      	str	r3, [sp, #32]
 800683c:	2300      	movs	r3, #0
 800683e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006840:	e7bf      	b.n	80067c2 <_dtoa_r+0x1e2>
 8006842:	2300      	movs	r3, #0
 8006844:	9309      	str	r3, [sp, #36]	; 0x24
 8006846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	dc52      	bgt.n	80068f2 <_dtoa_r+0x312>
 800684c:	2301      	movs	r3, #1
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	461a      	mov	r2, r3
 8006854:	920a      	str	r2, [sp, #40]	; 0x28
 8006856:	e00b      	b.n	8006870 <_dtoa_r+0x290>
 8006858:	2301      	movs	r3, #1
 800685a:	e7f3      	b.n	8006844 <_dtoa_r+0x264>
 800685c:	2300      	movs	r3, #0
 800685e:	9309      	str	r3, [sp, #36]	; 0x24
 8006860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006862:	445b      	add	r3, fp
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	3301      	adds	r3, #1
 8006868:	2b01      	cmp	r3, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	bfb8      	it	lt
 800686e:	2301      	movlt	r3, #1
 8006870:	69e0      	ldr	r0, [r4, #28]
 8006872:	2100      	movs	r1, #0
 8006874:	2204      	movs	r2, #4
 8006876:	f102 0614 	add.w	r6, r2, #20
 800687a:	429e      	cmp	r6, r3
 800687c:	d93d      	bls.n	80068fa <_dtoa_r+0x31a>
 800687e:	6041      	str	r1, [r0, #4]
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fceb 	bl	800725c <_Balloc>
 8006886:	9000      	str	r0, [sp, #0]
 8006888:	2800      	cmp	r0, #0
 800688a:	d139      	bne.n	8006900 <_dtoa_r+0x320>
 800688c:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <_dtoa_r+0x308>)
 800688e:	4602      	mov	r2, r0
 8006890:	f240 11af 	movw	r1, #431	; 0x1af
 8006894:	e6bd      	b.n	8006612 <_dtoa_r+0x32>
 8006896:	2301      	movs	r3, #1
 8006898:	e7e1      	b.n	800685e <_dtoa_r+0x27e>
 800689a:	2501      	movs	r5, #1
 800689c:	2300      	movs	r3, #0
 800689e:	9307      	str	r3, [sp, #28]
 80068a0:	9509      	str	r5, [sp, #36]	; 0x24
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	9304      	str	r3, [sp, #16]
 80068aa:	2200      	movs	r2, #0
 80068ac:	2312      	movs	r3, #18
 80068ae:	e7d1      	b.n	8006854 <_dtoa_r+0x274>
 80068b0:	636f4361 	.word	0x636f4361
 80068b4:	3fd287a7 	.word	0x3fd287a7
 80068b8:	8b60c8b3 	.word	0x8b60c8b3
 80068bc:	3fc68a28 	.word	0x3fc68a28
 80068c0:	509f79fb 	.word	0x509f79fb
 80068c4:	3fd34413 	.word	0x3fd34413
 80068c8:	08008549 	.word	0x08008549
 80068cc:	08008560 	.word	0x08008560
 80068d0:	7ff00000 	.word	0x7ff00000
 80068d4:	08008545 	.word	0x08008545
 80068d8:	0800853c 	.word	0x0800853c
 80068dc:	08008519 	.word	0x08008519
 80068e0:	3ff80000 	.word	0x3ff80000
 80068e4:	08008650 	.word	0x08008650
 80068e8:	080085b8 	.word	0x080085b8
 80068ec:	2301      	movs	r3, #1
 80068ee:	9309      	str	r3, [sp, #36]	; 0x24
 80068f0:	e7d7      	b.n	80068a2 <_dtoa_r+0x2c2>
 80068f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	9304      	str	r3, [sp, #16]
 80068f8:	e7ba      	b.n	8006870 <_dtoa_r+0x290>
 80068fa:	3101      	adds	r1, #1
 80068fc:	0052      	lsls	r2, r2, #1
 80068fe:	e7ba      	b.n	8006876 <_dtoa_r+0x296>
 8006900:	69e3      	ldr	r3, [r4, #28]
 8006902:	9a00      	ldr	r2, [sp, #0]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	2b0e      	cmp	r3, #14
 800690a:	f200 80a8 	bhi.w	8006a5e <_dtoa_r+0x47e>
 800690e:	2d00      	cmp	r5, #0
 8006910:	f000 80a5 	beq.w	8006a5e <_dtoa_r+0x47e>
 8006914:	f1bb 0f00 	cmp.w	fp, #0
 8006918:	dd38      	ble.n	800698c <_dtoa_r+0x3ac>
 800691a:	4bc0      	ldr	r3, [pc, #768]	; (8006c1c <_dtoa_r+0x63c>)
 800691c:	f00b 020f 	and.w	r2, fp, #15
 8006920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006924:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006928:	e9d3 6700 	ldrd	r6, r7, [r3]
 800692c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006930:	d019      	beq.n	8006966 <_dtoa_r+0x386>
 8006932:	4bbb      	ldr	r3, [pc, #748]	; (8006c20 <_dtoa_r+0x640>)
 8006934:	ec51 0b18 	vmov	r0, r1, d8
 8006938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800693c:	f7f9 ffa6 	bl	800088c <__aeabi_ddiv>
 8006940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006944:	f008 080f 	and.w	r8, r8, #15
 8006948:	2503      	movs	r5, #3
 800694a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c20 <_dtoa_r+0x640>
 800694e:	f1b8 0f00 	cmp.w	r8, #0
 8006952:	d10a      	bne.n	800696a <_dtoa_r+0x38a>
 8006954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006958:	4632      	mov	r2, r6
 800695a:	463b      	mov	r3, r7
 800695c:	f7f9 ff96 	bl	800088c <__aeabi_ddiv>
 8006960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006964:	e02b      	b.n	80069be <_dtoa_r+0x3de>
 8006966:	2502      	movs	r5, #2
 8006968:	e7ef      	b.n	800694a <_dtoa_r+0x36a>
 800696a:	f018 0f01 	tst.w	r8, #1
 800696e:	d008      	beq.n	8006982 <_dtoa_r+0x3a2>
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006978:	f7f9 fe5e 	bl	8000638 <__aeabi_dmul>
 800697c:	3501      	adds	r5, #1
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006986:	f109 0908 	add.w	r9, r9, #8
 800698a:	e7e0      	b.n	800694e <_dtoa_r+0x36e>
 800698c:	f000 809f 	beq.w	8006ace <_dtoa_r+0x4ee>
 8006990:	f1cb 0600 	rsb	r6, fp, #0
 8006994:	4ba1      	ldr	r3, [pc, #644]	; (8006c1c <_dtoa_r+0x63c>)
 8006996:	4fa2      	ldr	r7, [pc, #648]	; (8006c20 <_dtoa_r+0x640>)
 8006998:	f006 020f 	and.w	r2, r6, #15
 800699c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	ec51 0b18 	vmov	r0, r1, d8
 80069a8:	f7f9 fe46 	bl	8000638 <__aeabi_dmul>
 80069ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b0:	1136      	asrs	r6, r6, #4
 80069b2:	2300      	movs	r3, #0
 80069b4:	2502      	movs	r5, #2
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	d17e      	bne.n	8006ab8 <_dtoa_r+0x4d8>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1d0      	bne.n	8006960 <_dtoa_r+0x380>
 80069be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8084 	beq.w	8006ad2 <_dtoa_r+0x4f2>
 80069ca:	4b96      	ldr	r3, [pc, #600]	; (8006c24 <_dtoa_r+0x644>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7fa f8a3 	bl	8000b1c <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d07b      	beq.n	8006ad2 <_dtoa_r+0x4f2>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d078      	beq.n	8006ad2 <_dtoa_r+0x4f2>
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dd39      	ble.n	8006a5a <_dtoa_r+0x47a>
 80069e6:	4b90      	ldr	r3, [pc, #576]	; (8006c28 <_dtoa_r+0x648>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fe23 	bl	8000638 <__aeabi_dmul>
 80069f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f6:	9e01      	ldr	r6, [sp, #4]
 80069f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80069fc:	3501      	adds	r5, #1
 80069fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7f9 fdae 	bl	8000564 <__aeabi_i2d>
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	f7f9 fe14 	bl	8000638 <__aeabi_dmul>
 8006a10:	4b86      	ldr	r3, [pc, #536]	; (8006c2c <_dtoa_r+0x64c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7f9 fc5a 	bl	80002cc <__adddf3>
 8006a18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a20:	9303      	str	r3, [sp, #12]
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	d158      	bne.n	8006ad8 <_dtoa_r+0x4f8>
 8006a26:	4b82      	ldr	r3, [pc, #520]	; (8006c30 <_dtoa_r+0x650>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fc4b 	bl	80002c8 <__aeabi_dsub>
 8006a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a36:	4680      	mov	r8, r0
 8006a38:	4689      	mov	r9, r1
 8006a3a:	f7fa f88d 	bl	8000b58 <__aeabi_dcmpgt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f040 8296 	bne.w	8006f70 <_dtoa_r+0x990>
 8006a44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a48:	4640      	mov	r0, r8
 8006a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a4e:	4649      	mov	r1, r9
 8006a50:	f7fa f864 	bl	8000b1c <__aeabi_dcmplt>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f040 8289 	bne.w	8006f6c <_dtoa_r+0x98c>
 8006a5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f2c0 814e 	blt.w	8006d02 <_dtoa_r+0x722>
 8006a66:	f1bb 0f0e 	cmp.w	fp, #14
 8006a6a:	f300 814a 	bgt.w	8006d02 <_dtoa_r+0x722>
 8006a6e:	4b6b      	ldr	r3, [pc, #428]	; (8006c1c <_dtoa_r+0x63c>)
 8006a70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f280 80dc 	bge.w	8006c38 <_dtoa_r+0x658>
 8006a80:	9b04      	ldr	r3, [sp, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f300 80d8 	bgt.w	8006c38 <_dtoa_r+0x658>
 8006a88:	f040 826f 	bne.w	8006f6a <_dtoa_r+0x98a>
 8006a8c:	4b68      	ldr	r3, [pc, #416]	; (8006c30 <_dtoa_r+0x650>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4640      	mov	r0, r8
 8006a92:	4649      	mov	r1, r9
 8006a94:	f7f9 fdd0 	bl	8000638 <__aeabi_dmul>
 8006a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a9c:	f7fa f852 	bl	8000b44 <__aeabi_dcmpge>
 8006aa0:	9e04      	ldr	r6, [sp, #16]
 8006aa2:	4637      	mov	r7, r6
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f040 8245 	bne.w	8006f34 <_dtoa_r+0x954>
 8006aaa:	9d00      	ldr	r5, [sp, #0]
 8006aac:	2331      	movs	r3, #49	; 0x31
 8006aae:	f805 3b01 	strb.w	r3, [r5], #1
 8006ab2:	f10b 0b01 	add.w	fp, fp, #1
 8006ab6:	e241      	b.n	8006f3c <_dtoa_r+0x95c>
 8006ab8:	07f2      	lsls	r2, r6, #31
 8006aba:	d505      	bpl.n	8006ac8 <_dtoa_r+0x4e8>
 8006abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac0:	f7f9 fdba 	bl	8000638 <__aeabi_dmul>
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	1076      	asrs	r6, r6, #1
 8006aca:	3708      	adds	r7, #8
 8006acc:	e773      	b.n	80069b6 <_dtoa_r+0x3d6>
 8006ace:	2502      	movs	r5, #2
 8006ad0:	e775      	b.n	80069be <_dtoa_r+0x3de>
 8006ad2:	9e04      	ldr	r6, [sp, #16]
 8006ad4:	465f      	mov	r7, fp
 8006ad6:	e792      	b.n	80069fe <_dtoa_r+0x41e>
 8006ad8:	9900      	ldr	r1, [sp, #0]
 8006ada:	4b50      	ldr	r3, [pc, #320]	; (8006c1c <_dtoa_r+0x63c>)
 8006adc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ae0:	4431      	add	r1, r6
 8006ae2:	9102      	str	r1, [sp, #8]
 8006ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ae6:	eeb0 9a47 	vmov.f32	s18, s14
 8006aea:	eef0 9a67 	vmov.f32	s19, s15
 8006aee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006af2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006af6:	2900      	cmp	r1, #0
 8006af8:	d044      	beq.n	8006b84 <_dtoa_r+0x5a4>
 8006afa:	494e      	ldr	r1, [pc, #312]	; (8006c34 <_dtoa_r+0x654>)
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7f9 fec5 	bl	800088c <__aeabi_ddiv>
 8006b02:	ec53 2b19 	vmov	r2, r3, d9
 8006b06:	f7f9 fbdf 	bl	80002c8 <__aeabi_dsub>
 8006b0a:	9d00      	ldr	r5, [sp, #0]
 8006b0c:	ec41 0b19 	vmov	d9, r0, r1
 8006b10:	4649      	mov	r1, r9
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7fa f840 	bl	8000b98 <__aeabi_d2iz>
 8006b18:	4606      	mov	r6, r0
 8006b1a:	f7f9 fd23 	bl	8000564 <__aeabi_i2d>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 fbcf 	bl	80002c8 <__aeabi_dsub>
 8006b2a:	3630      	adds	r6, #48	; 0x30
 8006b2c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b30:	ec53 2b19 	vmov	r2, r3, d9
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	f7f9 fff0 	bl	8000b1c <__aeabi_dcmplt>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d164      	bne.n	8006c0a <_dtoa_r+0x62a>
 8006b40:	4642      	mov	r2, r8
 8006b42:	464b      	mov	r3, r9
 8006b44:	4937      	ldr	r1, [pc, #220]	; (8006c24 <_dtoa_r+0x644>)
 8006b46:	2000      	movs	r0, #0
 8006b48:	f7f9 fbbe 	bl	80002c8 <__aeabi_dsub>
 8006b4c:	ec53 2b19 	vmov	r2, r3, d9
 8006b50:	f7f9 ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	f040 80b6 	bne.w	8006cc6 <_dtoa_r+0x6e6>
 8006b5a:	9b02      	ldr	r3, [sp, #8]
 8006b5c:	429d      	cmp	r5, r3
 8006b5e:	f43f af7c 	beq.w	8006a5a <_dtoa_r+0x47a>
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <_dtoa_r+0x648>)
 8006b64:	ec51 0b19 	vmov	r0, r1, d9
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f7f9 fd65 	bl	8000638 <__aeabi_dmul>
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <_dtoa_r+0x648>)
 8006b70:	ec41 0b19 	vmov	d9, r0, r1
 8006b74:	2200      	movs	r2, #0
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7f9 fd5d 	bl	8000638 <__aeabi_dmul>
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4689      	mov	r9, r1
 8006b82:	e7c5      	b.n	8006b10 <_dtoa_r+0x530>
 8006b84:	ec51 0b17 	vmov	r0, r1, d7
 8006b88:	f7f9 fd56 	bl	8000638 <__aeabi_dmul>
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	9d00      	ldr	r5, [sp, #0]
 8006b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b92:	ec41 0b19 	vmov	d9, r0, r1
 8006b96:	4649      	mov	r1, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	f7f9 fffd 	bl	8000b98 <__aeabi_d2iz>
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	f7f9 fce0 	bl	8000564 <__aeabi_i2d>
 8006ba4:	3630      	adds	r6, #48	; 0x30
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fb8b 	bl	80002c8 <__aeabi_dsub>
 8006bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8006bb6:	9b02      	ldr	r3, [sp, #8]
 8006bb8:	429d      	cmp	r5, r3
 8006bba:	4680      	mov	r8, r0
 8006bbc:	4689      	mov	r9, r1
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	d124      	bne.n	8006c0e <_dtoa_r+0x62e>
 8006bc4:	4b1b      	ldr	r3, [pc, #108]	; (8006c34 <_dtoa_r+0x654>)
 8006bc6:	ec51 0b19 	vmov	r0, r1, d9
 8006bca:	f7f9 fb7f 	bl	80002cc <__adddf3>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	f7f9 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d173      	bne.n	8006cc6 <_dtoa_r+0x6e6>
 8006bde:	ec53 2b19 	vmov	r2, r3, d9
 8006be2:	4914      	ldr	r1, [pc, #80]	; (8006c34 <_dtoa_r+0x654>)
 8006be4:	2000      	movs	r0, #0
 8006be6:	f7f9 fb6f 	bl	80002c8 <__aeabi_dsub>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 ff93 	bl	8000b1c <__aeabi_dcmplt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f43f af2f 	beq.w	8006a5a <_dtoa_r+0x47a>
 8006bfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bfe:	1e6b      	subs	r3, r5, #1
 8006c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c06:	2b30      	cmp	r3, #48	; 0x30
 8006c08:	d0f8      	beq.n	8006bfc <_dtoa_r+0x61c>
 8006c0a:	46bb      	mov	fp, r7
 8006c0c:	e04a      	b.n	8006ca4 <_dtoa_r+0x6c4>
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <_dtoa_r+0x648>)
 8006c10:	f7f9 fd12 	bl	8000638 <__aeabi_dmul>
 8006c14:	4680      	mov	r8, r0
 8006c16:	4689      	mov	r9, r1
 8006c18:	e7bd      	b.n	8006b96 <_dtoa_r+0x5b6>
 8006c1a:	bf00      	nop
 8006c1c:	08008650 	.word	0x08008650
 8006c20:	08008628 	.word	0x08008628
 8006c24:	3ff00000 	.word	0x3ff00000
 8006c28:	40240000 	.word	0x40240000
 8006c2c:	401c0000 	.word	0x401c0000
 8006c30:	40140000 	.word	0x40140000
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c3c:	9d00      	ldr	r5, [sp, #0]
 8006c3e:	4642      	mov	r2, r8
 8006c40:	464b      	mov	r3, r9
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 fe21 	bl	800088c <__aeabi_ddiv>
 8006c4a:	f7f9 ffa5 	bl	8000b98 <__aeabi_d2iz>
 8006c4e:	9001      	str	r0, [sp, #4]
 8006c50:	f7f9 fc88 	bl	8000564 <__aeabi_i2d>
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	f7f9 fcee 	bl	8000638 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 fb30 	bl	80002c8 <__aeabi_dsub>
 8006c68:	9e01      	ldr	r6, [sp, #4]
 8006c6a:	9f04      	ldr	r7, [sp, #16]
 8006c6c:	3630      	adds	r6, #48	; 0x30
 8006c6e:	f805 6b01 	strb.w	r6, [r5], #1
 8006c72:	9e00      	ldr	r6, [sp, #0]
 8006c74:	1bae      	subs	r6, r5, r6
 8006c76:	42b7      	cmp	r7, r6
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	d134      	bne.n	8006ce8 <_dtoa_r+0x708>
 8006c7e:	f7f9 fb25 	bl	80002cc <__adddf3>
 8006c82:	4642      	mov	r2, r8
 8006c84:	464b      	mov	r3, r9
 8006c86:	4606      	mov	r6, r0
 8006c88:	460f      	mov	r7, r1
 8006c8a:	f7f9 ff65 	bl	8000b58 <__aeabi_dcmpgt>
 8006c8e:	b9c8      	cbnz	r0, 8006cc4 <_dtoa_r+0x6e4>
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 ff36 	bl	8000b08 <__aeabi_dcmpeq>
 8006c9c:	b110      	cbz	r0, 8006ca4 <_dtoa_r+0x6c4>
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	07db      	lsls	r3, r3, #31
 8006ca2:	d40f      	bmi.n	8006cc4 <_dtoa_r+0x6e4>
 8006ca4:	4651      	mov	r1, sl
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fb18 	bl	80072dc <_Bfree>
 8006cac:	2300      	movs	r3, #0
 8006cae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cb0:	702b      	strb	r3, [r5, #0]
 8006cb2:	f10b 0301 	add.w	r3, fp, #1
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f43f ace2 	beq.w	8006684 <_dtoa_r+0xa4>
 8006cc0:	601d      	str	r5, [r3, #0]
 8006cc2:	e4df      	b.n	8006684 <_dtoa_r+0xa4>
 8006cc4:	465f      	mov	r7, fp
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	461d      	mov	r5, r3
 8006cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cce:	2a39      	cmp	r2, #57	; 0x39
 8006cd0:	d106      	bne.n	8006ce0 <_dtoa_r+0x700>
 8006cd2:	9a00      	ldr	r2, [sp, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1f7      	bne.n	8006cc8 <_dtoa_r+0x6e8>
 8006cd8:	9900      	ldr	r1, [sp, #0]
 8006cda:	2230      	movs	r2, #48	; 0x30
 8006cdc:	3701      	adds	r7, #1
 8006cde:	700a      	strb	r2, [r1, #0]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e790      	b.n	8006c0a <_dtoa_r+0x62a>
 8006ce8:	4ba3      	ldr	r3, [pc, #652]	; (8006f78 <_dtoa_r+0x998>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f7f9 fca4 	bl	8000638 <__aeabi_dmul>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	f7f9 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d09e      	beq.n	8006c3e <_dtoa_r+0x65e>
 8006d00:	e7d0      	b.n	8006ca4 <_dtoa_r+0x6c4>
 8006d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	f000 80ca 	beq.w	8006e9e <_dtoa_r+0x8be>
 8006d0a:	9a07      	ldr	r2, [sp, #28]
 8006d0c:	2a01      	cmp	r2, #1
 8006d0e:	f300 80ad 	bgt.w	8006e6c <_dtoa_r+0x88c>
 8006d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	f000 80a5 	beq.w	8006e64 <_dtoa_r+0x884>
 8006d1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d1e:	9e08      	ldr	r6, [sp, #32]
 8006d20:	9d05      	ldr	r5, [sp, #20]
 8006d22:	9a05      	ldr	r2, [sp, #20]
 8006d24:	441a      	add	r2, r3
 8006d26:	9205      	str	r2, [sp, #20]
 8006d28:	9a06      	ldr	r2, [sp, #24]
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	441a      	add	r2, r3
 8006d2e:	4620      	mov	r0, r4
 8006d30:	9206      	str	r2, [sp, #24]
 8006d32:	f000 fb89 	bl	8007448 <__i2b>
 8006d36:	4607      	mov	r7, r0
 8006d38:	b165      	cbz	r5, 8006d54 <_dtoa_r+0x774>
 8006d3a:	9b06      	ldr	r3, [sp, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd09      	ble.n	8006d54 <_dtoa_r+0x774>
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	9a05      	ldr	r2, [sp, #20]
 8006d44:	bfa8      	it	ge
 8006d46:	462b      	movge	r3, r5
 8006d48:	1ad2      	subs	r2, r2, r3
 8006d4a:	9205      	str	r2, [sp, #20]
 8006d4c:	9a06      	ldr	r2, [sp, #24]
 8006d4e:	1aed      	subs	r5, r5, r3
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	9306      	str	r3, [sp, #24]
 8006d54:	9b08      	ldr	r3, [sp, #32]
 8006d56:	b1f3      	cbz	r3, 8006d96 <_dtoa_r+0x7b6>
 8006d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80a3 	beq.w	8006ea6 <_dtoa_r+0x8c6>
 8006d60:	2e00      	cmp	r6, #0
 8006d62:	dd10      	ble.n	8006d86 <_dtoa_r+0x7a6>
 8006d64:	4639      	mov	r1, r7
 8006d66:	4632      	mov	r2, r6
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fc2d 	bl	80075c8 <__pow5mult>
 8006d6e:	4652      	mov	r2, sl
 8006d70:	4601      	mov	r1, r0
 8006d72:	4607      	mov	r7, r0
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 fb7d 	bl	8007474 <__multiply>
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 faac 	bl	80072dc <_Bfree>
 8006d84:	46c2      	mov	sl, r8
 8006d86:	9b08      	ldr	r3, [sp, #32]
 8006d88:	1b9a      	subs	r2, r3, r6
 8006d8a:	d004      	beq.n	8006d96 <_dtoa_r+0x7b6>
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 fc1a 	bl	80075c8 <__pow5mult>
 8006d94:	4682      	mov	sl, r0
 8006d96:	2101      	movs	r1, #1
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fb55 	bl	8007448 <__i2b>
 8006d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	4606      	mov	r6, r0
 8006da4:	f340 8081 	ble.w	8006eaa <_dtoa_r+0x8ca>
 8006da8:	461a      	mov	r2, r3
 8006daa:	4601      	mov	r1, r0
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fc0b 	bl	80075c8 <__pow5mult>
 8006db2:	9b07      	ldr	r3, [sp, #28]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	4606      	mov	r6, r0
 8006db8:	dd7a      	ble.n	8006eb0 <_dtoa_r+0x8d0>
 8006dba:	f04f 0800 	mov.w	r8, #0
 8006dbe:	6933      	ldr	r3, [r6, #16]
 8006dc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dc4:	6918      	ldr	r0, [r3, #16]
 8006dc6:	f000 faf1 	bl	80073ac <__hi0bits>
 8006dca:	f1c0 0020 	rsb	r0, r0, #32
 8006dce:	9b06      	ldr	r3, [sp, #24]
 8006dd0:	4418      	add	r0, r3
 8006dd2:	f010 001f 	ands.w	r0, r0, #31
 8006dd6:	f000 8094 	beq.w	8006f02 <_dtoa_r+0x922>
 8006dda:	f1c0 0320 	rsb	r3, r0, #32
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	f340 8085 	ble.w	8006eee <_dtoa_r+0x90e>
 8006de4:	9b05      	ldr	r3, [sp, #20]
 8006de6:	f1c0 001c 	rsb	r0, r0, #28
 8006dea:	4403      	add	r3, r0
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	9b06      	ldr	r3, [sp, #24]
 8006df0:	4403      	add	r3, r0
 8006df2:	4405      	add	r5, r0
 8006df4:	9306      	str	r3, [sp, #24]
 8006df6:	9b05      	ldr	r3, [sp, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dd05      	ble.n	8006e08 <_dtoa_r+0x828>
 8006dfc:	4651      	mov	r1, sl
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fc3b 	bl	800767c <__lshift>
 8006e06:	4682      	mov	sl, r0
 8006e08:	9b06      	ldr	r3, [sp, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd05      	ble.n	8006e1a <_dtoa_r+0x83a>
 8006e0e:	4631      	mov	r1, r6
 8006e10:	461a      	mov	r2, r3
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 fc32 	bl	800767c <__lshift>
 8006e18:	4606      	mov	r6, r0
 8006e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d072      	beq.n	8006f06 <_dtoa_r+0x926>
 8006e20:	4631      	mov	r1, r6
 8006e22:	4650      	mov	r0, sl
 8006e24:	f000 fc96 	bl	8007754 <__mcmp>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	da6c      	bge.n	8006f06 <_dtoa_r+0x926>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4651      	mov	r1, sl
 8006e30:	220a      	movs	r2, #10
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fa74 	bl	8007320 <__multadd>
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e3e:	4682      	mov	sl, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 81b0 	beq.w	80071a6 <_dtoa_r+0xbc6>
 8006e46:	2300      	movs	r3, #0
 8006e48:	4639      	mov	r1, r7
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fa67 	bl	8007320 <__multadd>
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	4607      	mov	r7, r0
 8006e58:	f300 8096 	bgt.w	8006f88 <_dtoa_r+0x9a8>
 8006e5c:	9b07      	ldr	r3, [sp, #28]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	dc59      	bgt.n	8006f16 <_dtoa_r+0x936>
 8006e62:	e091      	b.n	8006f88 <_dtoa_r+0x9a8>
 8006e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e6a:	e758      	b.n	8006d1e <_dtoa_r+0x73e>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	1e5e      	subs	r6, r3, #1
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	42b3      	cmp	r3, r6
 8006e74:	bfbf      	itttt	lt
 8006e76:	9b08      	ldrlt	r3, [sp, #32]
 8006e78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e7a:	9608      	strlt	r6, [sp, #32]
 8006e7c:	1af3      	sublt	r3, r6, r3
 8006e7e:	bfb4      	ite	lt
 8006e80:	18d2      	addlt	r2, r2, r3
 8006e82:	1b9e      	subge	r6, r3, r6
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	bfbc      	itt	lt
 8006e88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e8a:	2600      	movlt	r6, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bfb7      	itett	lt
 8006e90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e98:	1a9d      	sublt	r5, r3, r2
 8006e9a:	2300      	movlt	r3, #0
 8006e9c:	e741      	b.n	8006d22 <_dtoa_r+0x742>
 8006e9e:	9e08      	ldr	r6, [sp, #32]
 8006ea0:	9d05      	ldr	r5, [sp, #20]
 8006ea2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ea4:	e748      	b.n	8006d38 <_dtoa_r+0x758>
 8006ea6:	9a08      	ldr	r2, [sp, #32]
 8006ea8:	e770      	b.n	8006d8c <_dtoa_r+0x7ac>
 8006eaa:	9b07      	ldr	r3, [sp, #28]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	dc19      	bgt.n	8006ee4 <_dtoa_r+0x904>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	b9bb      	cbnz	r3, 8006ee4 <_dtoa_r+0x904>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eba:	b99b      	cbnz	r3, 8006ee4 <_dtoa_r+0x904>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	051b      	lsls	r3, r3, #20
 8006ec6:	b183      	cbz	r3, 8006eea <_dtoa_r+0x90a>
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	9b06      	ldr	r3, [sp, #24]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	9306      	str	r3, [sp, #24]
 8006ed4:	f04f 0801 	mov.w	r8, #1
 8006ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f47f af6f 	bne.w	8006dbe <_dtoa_r+0x7de>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	e774      	b.n	8006dce <_dtoa_r+0x7ee>
 8006ee4:	f04f 0800 	mov.w	r8, #0
 8006ee8:	e7f6      	b.n	8006ed8 <_dtoa_r+0x8f8>
 8006eea:	4698      	mov	r8, r3
 8006eec:	e7f4      	b.n	8006ed8 <_dtoa_r+0x8f8>
 8006eee:	d082      	beq.n	8006df6 <_dtoa_r+0x816>
 8006ef0:	9a05      	ldr	r2, [sp, #20]
 8006ef2:	331c      	adds	r3, #28
 8006ef4:	441a      	add	r2, r3
 8006ef6:	9205      	str	r2, [sp, #20]
 8006ef8:	9a06      	ldr	r2, [sp, #24]
 8006efa:	441a      	add	r2, r3
 8006efc:	441d      	add	r5, r3
 8006efe:	9206      	str	r2, [sp, #24]
 8006f00:	e779      	b.n	8006df6 <_dtoa_r+0x816>
 8006f02:	4603      	mov	r3, r0
 8006f04:	e7f4      	b.n	8006ef0 <_dtoa_r+0x910>
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	dc37      	bgt.n	8006f7c <_dtoa_r+0x99c>
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	dd34      	ble.n	8006f7c <_dtoa_r+0x99c>
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	b963      	cbnz	r3, 8006f34 <_dtoa_r+0x954>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 f9fe 	bl	8007320 <__multadd>
 8006f24:	4601      	mov	r1, r0
 8006f26:	4606      	mov	r6, r0
 8006f28:	4650      	mov	r0, sl
 8006f2a:	f000 fc13 	bl	8007754 <__mcmp>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f73f adbb 	bgt.w	8006aaa <_dtoa_r+0x4ca>
 8006f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f36:	9d00      	ldr	r5, [sp, #0]
 8006f38:	ea6f 0b03 	mvn.w	fp, r3
 8006f3c:	f04f 0800 	mov.w	r8, #0
 8006f40:	4631      	mov	r1, r6
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 f9ca 	bl	80072dc <_Bfree>
 8006f48:	2f00      	cmp	r7, #0
 8006f4a:	f43f aeab 	beq.w	8006ca4 <_dtoa_r+0x6c4>
 8006f4e:	f1b8 0f00 	cmp.w	r8, #0
 8006f52:	d005      	beq.n	8006f60 <_dtoa_r+0x980>
 8006f54:	45b8      	cmp	r8, r7
 8006f56:	d003      	beq.n	8006f60 <_dtoa_r+0x980>
 8006f58:	4641      	mov	r1, r8
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 f9be 	bl	80072dc <_Bfree>
 8006f60:	4639      	mov	r1, r7
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 f9ba 	bl	80072dc <_Bfree>
 8006f68:	e69c      	b.n	8006ca4 <_dtoa_r+0x6c4>
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	4637      	mov	r7, r6
 8006f6e:	e7e1      	b.n	8006f34 <_dtoa_r+0x954>
 8006f70:	46bb      	mov	fp, r7
 8006f72:	4637      	mov	r7, r6
 8006f74:	e599      	b.n	8006aaa <_dtoa_r+0x4ca>
 8006f76:	bf00      	nop
 8006f78:	40240000 	.word	0x40240000
 8006f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80c8 	beq.w	8007114 <_dtoa_r+0xb34>
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	2d00      	cmp	r5, #0
 8006f8a:	dd05      	ble.n	8006f98 <_dtoa_r+0x9b8>
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	462a      	mov	r2, r5
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fb73 	bl	800767c <__lshift>
 8006f96:	4607      	mov	r7, r0
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d05b      	beq.n	8007056 <_dtoa_r+0xa76>
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 f95b 	bl	800725c <_Balloc>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <_dtoa_r+0x9d6>
 8006faa:	4b83      	ldr	r3, [pc, #524]	; (80071b8 <_dtoa_r+0xbd8>)
 8006fac:	4602      	mov	r2, r0
 8006fae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fb2:	f7ff bb2e 	b.w	8006612 <_dtoa_r+0x32>
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	3202      	adds	r2, #2
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	f107 010c 	add.w	r1, r7, #12
 8006fc0:	300c      	adds	r0, #12
 8006fc2:	f7ff fa74 	bl	80064ae <memcpy>
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 fb56 	bl	800767c <__lshift>
 8006fd0:	9b00      	ldr	r3, [sp, #0]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fda:	4413      	add	r3, r2
 8006fdc:	9308      	str	r3, [sp, #32]
 8006fde:	9b02      	ldr	r3, [sp, #8]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	46b8      	mov	r8, r7
 8006fe6:	9306      	str	r3, [sp, #24]
 8006fe8:	4607      	mov	r7, r0
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	4631      	mov	r1, r6
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	f7ff fa69 	bl	80064ca <quorem>
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	9002      	str	r0, [sp, #8]
 8006ffc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007000:	4650      	mov	r0, sl
 8007002:	f000 fba7 	bl	8007754 <__mcmp>
 8007006:	463a      	mov	r2, r7
 8007008:	9005      	str	r0, [sp, #20]
 800700a:	4631      	mov	r1, r6
 800700c:	4620      	mov	r0, r4
 800700e:	f000 fbbd 	bl	800778c <__mdiff>
 8007012:	68c2      	ldr	r2, [r0, #12]
 8007014:	4605      	mov	r5, r0
 8007016:	bb02      	cbnz	r2, 800705a <_dtoa_r+0xa7a>
 8007018:	4601      	mov	r1, r0
 800701a:	4650      	mov	r0, sl
 800701c:	f000 fb9a 	bl	8007754 <__mcmp>
 8007020:	4602      	mov	r2, r0
 8007022:	4629      	mov	r1, r5
 8007024:	4620      	mov	r0, r4
 8007026:	9209      	str	r2, [sp, #36]	; 0x24
 8007028:	f000 f958 	bl	80072dc <_Bfree>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007030:	9d04      	ldr	r5, [sp, #16]
 8007032:	ea43 0102 	orr.w	r1, r3, r2
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	4319      	orrs	r1, r3
 800703a:	d110      	bne.n	800705e <_dtoa_r+0xa7e>
 800703c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007040:	d029      	beq.n	8007096 <_dtoa_r+0xab6>
 8007042:	9b05      	ldr	r3, [sp, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	dd02      	ble.n	800704e <_dtoa_r+0xa6e>
 8007048:	9b02      	ldr	r3, [sp, #8]
 800704a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	f883 9000 	strb.w	r9, [r3]
 8007054:	e774      	b.n	8006f40 <_dtoa_r+0x960>
 8007056:	4638      	mov	r0, r7
 8007058:	e7ba      	b.n	8006fd0 <_dtoa_r+0x9f0>
 800705a:	2201      	movs	r2, #1
 800705c:	e7e1      	b.n	8007022 <_dtoa_r+0xa42>
 800705e:	9b05      	ldr	r3, [sp, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	db04      	blt.n	800706e <_dtoa_r+0xa8e>
 8007064:	9907      	ldr	r1, [sp, #28]
 8007066:	430b      	orrs	r3, r1
 8007068:	9906      	ldr	r1, [sp, #24]
 800706a:	430b      	orrs	r3, r1
 800706c:	d120      	bne.n	80070b0 <_dtoa_r+0xad0>
 800706e:	2a00      	cmp	r2, #0
 8007070:	dded      	ble.n	800704e <_dtoa_r+0xa6e>
 8007072:	4651      	mov	r1, sl
 8007074:	2201      	movs	r2, #1
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fb00 	bl	800767c <__lshift>
 800707c:	4631      	mov	r1, r6
 800707e:	4682      	mov	sl, r0
 8007080:	f000 fb68 	bl	8007754 <__mcmp>
 8007084:	2800      	cmp	r0, #0
 8007086:	dc03      	bgt.n	8007090 <_dtoa_r+0xab0>
 8007088:	d1e1      	bne.n	800704e <_dtoa_r+0xa6e>
 800708a:	f019 0f01 	tst.w	r9, #1
 800708e:	d0de      	beq.n	800704e <_dtoa_r+0xa6e>
 8007090:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007094:	d1d8      	bne.n	8007048 <_dtoa_r+0xa68>
 8007096:	9a01      	ldr	r2, [sp, #4]
 8007098:	2339      	movs	r3, #57	; 0x39
 800709a:	7013      	strb	r3, [r2, #0]
 800709c:	462b      	mov	r3, r5
 800709e:	461d      	mov	r5, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070a6:	2a39      	cmp	r2, #57	; 0x39
 80070a8:	d06c      	beq.n	8007184 <_dtoa_r+0xba4>
 80070aa:	3201      	adds	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e747      	b.n	8006f40 <_dtoa_r+0x960>
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	dd07      	ble.n	80070c4 <_dtoa_r+0xae4>
 80070b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070b8:	d0ed      	beq.n	8007096 <_dtoa_r+0xab6>
 80070ba:	9a01      	ldr	r2, [sp, #4]
 80070bc:	f109 0301 	add.w	r3, r9, #1
 80070c0:	7013      	strb	r3, [r2, #0]
 80070c2:	e73d      	b.n	8006f40 <_dtoa_r+0x960>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	9a08      	ldr	r2, [sp, #32]
 80070c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d043      	beq.n	8007158 <_dtoa_r+0xb78>
 80070d0:	4651      	mov	r1, sl
 80070d2:	2300      	movs	r3, #0
 80070d4:	220a      	movs	r2, #10
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f922 	bl	8007320 <__multadd>
 80070dc:	45b8      	cmp	r8, r7
 80070de:	4682      	mov	sl, r0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	f04f 020a 	mov.w	r2, #10
 80070e8:	4641      	mov	r1, r8
 80070ea:	4620      	mov	r0, r4
 80070ec:	d107      	bne.n	80070fe <_dtoa_r+0xb1e>
 80070ee:	f000 f917 	bl	8007320 <__multadd>
 80070f2:	4680      	mov	r8, r0
 80070f4:	4607      	mov	r7, r0
 80070f6:	9b04      	ldr	r3, [sp, #16]
 80070f8:	3301      	adds	r3, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	e775      	b.n	8006fea <_dtoa_r+0xa0a>
 80070fe:	f000 f90f 	bl	8007320 <__multadd>
 8007102:	4639      	mov	r1, r7
 8007104:	4680      	mov	r8, r0
 8007106:	2300      	movs	r3, #0
 8007108:	220a      	movs	r2, #10
 800710a:	4620      	mov	r0, r4
 800710c:	f000 f908 	bl	8007320 <__multadd>
 8007110:	4607      	mov	r7, r0
 8007112:	e7f0      	b.n	80070f6 <_dtoa_r+0xb16>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	9d00      	ldr	r5, [sp, #0]
 800711a:	4631      	mov	r1, r6
 800711c:	4650      	mov	r0, sl
 800711e:	f7ff f9d4 	bl	80064ca <quorem>
 8007122:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007126:	9b00      	ldr	r3, [sp, #0]
 8007128:	f805 9b01 	strb.w	r9, [r5], #1
 800712c:	1aea      	subs	r2, r5, r3
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	4293      	cmp	r3, r2
 8007132:	dd07      	ble.n	8007144 <_dtoa_r+0xb64>
 8007134:	4651      	mov	r1, sl
 8007136:	2300      	movs	r3, #0
 8007138:	220a      	movs	r2, #10
 800713a:	4620      	mov	r0, r4
 800713c:	f000 f8f0 	bl	8007320 <__multadd>
 8007140:	4682      	mov	sl, r0
 8007142:	e7ea      	b.n	800711a <_dtoa_r+0xb3a>
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	bfc8      	it	gt
 800714a:	461d      	movgt	r5, r3
 800714c:	9b00      	ldr	r3, [sp, #0]
 800714e:	bfd8      	it	le
 8007150:	2501      	movle	r5, #1
 8007152:	441d      	add	r5, r3
 8007154:	f04f 0800 	mov.w	r8, #0
 8007158:	4651      	mov	r1, sl
 800715a:	2201      	movs	r2, #1
 800715c:	4620      	mov	r0, r4
 800715e:	f000 fa8d 	bl	800767c <__lshift>
 8007162:	4631      	mov	r1, r6
 8007164:	4682      	mov	sl, r0
 8007166:	f000 faf5 	bl	8007754 <__mcmp>
 800716a:	2800      	cmp	r0, #0
 800716c:	dc96      	bgt.n	800709c <_dtoa_r+0xabc>
 800716e:	d102      	bne.n	8007176 <_dtoa_r+0xb96>
 8007170:	f019 0f01 	tst.w	r9, #1
 8007174:	d192      	bne.n	800709c <_dtoa_r+0xabc>
 8007176:	462b      	mov	r3, r5
 8007178:	461d      	mov	r5, r3
 800717a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800717e:	2a30      	cmp	r2, #48	; 0x30
 8007180:	d0fa      	beq.n	8007178 <_dtoa_r+0xb98>
 8007182:	e6dd      	b.n	8006f40 <_dtoa_r+0x960>
 8007184:	9a00      	ldr	r2, [sp, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d189      	bne.n	800709e <_dtoa_r+0xabe>
 800718a:	f10b 0b01 	add.w	fp, fp, #1
 800718e:	2331      	movs	r3, #49	; 0x31
 8007190:	e796      	b.n	80070c0 <_dtoa_r+0xae0>
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <_dtoa_r+0xbdc>)
 8007194:	f7ff ba99 	b.w	80066ca <_dtoa_r+0xea>
 8007198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800719a:	2b00      	cmp	r3, #0
 800719c:	f47f aa6d 	bne.w	800667a <_dtoa_r+0x9a>
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <_dtoa_r+0xbe0>)
 80071a2:	f7ff ba92 	b.w	80066ca <_dtoa_r+0xea>
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dcb5      	bgt.n	8007118 <_dtoa_r+0xb38>
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	f73f aeb1 	bgt.w	8006f16 <_dtoa_r+0x936>
 80071b4:	e7b0      	b.n	8007118 <_dtoa_r+0xb38>
 80071b6:	bf00      	nop
 80071b8:	080085b8 	.word	0x080085b8
 80071bc:	08008518 	.word	0x08008518
 80071c0:	0800853c 	.word	0x0800853c

080071c4 <_free_r>:
 80071c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c6:	2900      	cmp	r1, #0
 80071c8:	d044      	beq.n	8007254 <_free_r+0x90>
 80071ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ce:	9001      	str	r0, [sp, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f1a1 0404 	sub.w	r4, r1, #4
 80071d6:	bfb8      	it	lt
 80071d8:	18e4      	addlt	r4, r4, r3
 80071da:	f7fe fafd 	bl	80057d8 <__malloc_lock>
 80071de:	4a1e      	ldr	r2, [pc, #120]	; (8007258 <_free_r+0x94>)
 80071e0:	9801      	ldr	r0, [sp, #4]
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	b933      	cbnz	r3, 80071f4 <_free_r+0x30>
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	6014      	str	r4, [r2, #0]
 80071ea:	b003      	add	sp, #12
 80071ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071f0:	f7fe baf8 	b.w	80057e4 <__malloc_unlock>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d908      	bls.n	800720a <_free_r+0x46>
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	1961      	adds	r1, r4, r5
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf01      	itttt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	1949      	addeq	r1, r1, r5
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	e7ed      	b.n	80071e6 <_free_r+0x22>
 800720a:	461a      	mov	r2, r3
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b10b      	cbz	r3, 8007214 <_free_r+0x50>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x46>
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	1855      	adds	r5, r2, r1
 8007218:	42a5      	cmp	r5, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x70>
 800721c:	6824      	ldr	r4, [r4, #0]
 800721e:	4421      	add	r1, r4
 8007220:	1854      	adds	r4, r2, r1
 8007222:	42a3      	cmp	r3, r4
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	d1e0      	bne.n	80071ea <_free_r+0x26>
 8007228:	681c      	ldr	r4, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	6053      	str	r3, [r2, #4]
 800722e:	440c      	add	r4, r1
 8007230:	6014      	str	r4, [r2, #0]
 8007232:	e7da      	b.n	80071ea <_free_r+0x26>
 8007234:	d902      	bls.n	800723c <_free_r+0x78>
 8007236:	230c      	movs	r3, #12
 8007238:	6003      	str	r3, [r0, #0]
 800723a:	e7d6      	b.n	80071ea <_free_r+0x26>
 800723c:	6825      	ldr	r5, [r4, #0]
 800723e:	1961      	adds	r1, r4, r5
 8007240:	428b      	cmp	r3, r1
 8007242:	bf04      	itt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1949      	addeq	r1, r1, r5
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	6054      	str	r4, [r2, #4]
 8007252:	e7ca      	b.n	80071ea <_free_r+0x26>
 8007254:	b003      	add	sp, #12
 8007256:	bd30      	pop	{r4, r5, pc}
 8007258:	20000428 	.word	0x20000428

0800725c <_Balloc>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	69c6      	ldr	r6, [r0, #28]
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
 8007264:	b976      	cbnz	r6, 8007284 <_Balloc+0x28>
 8007266:	2010      	movs	r0, #16
 8007268:	f7fe fa06 	bl	8005678 <malloc>
 800726c:	4602      	mov	r2, r0
 800726e:	61e0      	str	r0, [r4, #28]
 8007270:	b920      	cbnz	r0, 800727c <_Balloc+0x20>
 8007272:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <_Balloc+0x78>)
 8007274:	4818      	ldr	r0, [pc, #96]	; (80072d8 <_Balloc+0x7c>)
 8007276:	216b      	movs	r1, #107	; 0x6b
 8007278:	f000 fd8c 	bl	8007d94 <__assert_func>
 800727c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007280:	6006      	str	r6, [r0, #0]
 8007282:	60c6      	str	r6, [r0, #12]
 8007284:	69e6      	ldr	r6, [r4, #28]
 8007286:	68f3      	ldr	r3, [r6, #12]
 8007288:	b183      	cbz	r3, 80072ac <_Balloc+0x50>
 800728a:	69e3      	ldr	r3, [r4, #28]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007292:	b9b8      	cbnz	r0, 80072c4 <_Balloc+0x68>
 8007294:	2101      	movs	r1, #1
 8007296:	fa01 f605 	lsl.w	r6, r1, r5
 800729a:	1d72      	adds	r2, r6, #5
 800729c:	0092      	lsls	r2, r2, #2
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 fd96 	bl	8007dd0 <_calloc_r>
 80072a4:	b160      	cbz	r0, 80072c0 <_Balloc+0x64>
 80072a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072aa:	e00e      	b.n	80072ca <_Balloc+0x6e>
 80072ac:	2221      	movs	r2, #33	; 0x21
 80072ae:	2104      	movs	r1, #4
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fd8d 	bl	8007dd0 <_calloc_r>
 80072b6:	69e3      	ldr	r3, [r4, #28]
 80072b8:	60f0      	str	r0, [r6, #12]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e4      	bne.n	800728a <_Balloc+0x2e>
 80072c0:	2000      	movs	r0, #0
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	6802      	ldr	r2, [r0, #0]
 80072c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ca:	2300      	movs	r3, #0
 80072cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072d0:	e7f7      	b.n	80072c2 <_Balloc+0x66>
 80072d2:	bf00      	nop
 80072d4:	08008549 	.word	0x08008549
 80072d8:	080085c9 	.word	0x080085c9

080072dc <_Bfree>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	69c6      	ldr	r6, [r0, #28]
 80072e0:	4605      	mov	r5, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	b976      	cbnz	r6, 8007304 <_Bfree+0x28>
 80072e6:	2010      	movs	r0, #16
 80072e8:	f7fe f9c6 	bl	8005678 <malloc>
 80072ec:	4602      	mov	r2, r0
 80072ee:	61e8      	str	r0, [r5, #28]
 80072f0:	b920      	cbnz	r0, 80072fc <_Bfree+0x20>
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <_Bfree+0x3c>)
 80072f4:	4809      	ldr	r0, [pc, #36]	; (800731c <_Bfree+0x40>)
 80072f6:	218f      	movs	r1, #143	; 0x8f
 80072f8:	f000 fd4c 	bl	8007d94 <__assert_func>
 80072fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007300:	6006      	str	r6, [r0, #0]
 8007302:	60c6      	str	r6, [r0, #12]
 8007304:	b13c      	cbz	r4, 8007316 <_Bfree+0x3a>
 8007306:	69eb      	ldr	r3, [r5, #28]
 8007308:	6862      	ldr	r2, [r4, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007310:	6021      	str	r1, [r4, #0]
 8007312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	08008549 	.word	0x08008549
 800731c:	080085c9 	.word	0x080085c9

08007320 <__multadd>:
 8007320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	690d      	ldr	r5, [r1, #16]
 8007326:	4607      	mov	r7, r0
 8007328:	460c      	mov	r4, r1
 800732a:	461e      	mov	r6, r3
 800732c:	f101 0c14 	add.w	ip, r1, #20
 8007330:	2000      	movs	r0, #0
 8007332:	f8dc 3000 	ldr.w	r3, [ip]
 8007336:	b299      	uxth	r1, r3
 8007338:	fb02 6101 	mla	r1, r2, r1, r6
 800733c:	0c1e      	lsrs	r6, r3, #16
 800733e:	0c0b      	lsrs	r3, r1, #16
 8007340:	fb02 3306 	mla	r3, r2, r6, r3
 8007344:	b289      	uxth	r1, r1
 8007346:	3001      	adds	r0, #1
 8007348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800734c:	4285      	cmp	r5, r0
 800734e:	f84c 1b04 	str.w	r1, [ip], #4
 8007352:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007356:	dcec      	bgt.n	8007332 <__multadd+0x12>
 8007358:	b30e      	cbz	r6, 800739e <__multadd+0x7e>
 800735a:	68a3      	ldr	r3, [r4, #8]
 800735c:	42ab      	cmp	r3, r5
 800735e:	dc19      	bgt.n	8007394 <__multadd+0x74>
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4638      	mov	r0, r7
 8007364:	3101      	adds	r1, #1
 8007366:	f7ff ff79 	bl	800725c <_Balloc>
 800736a:	4680      	mov	r8, r0
 800736c:	b928      	cbnz	r0, 800737a <__multadd+0x5a>
 800736e:	4602      	mov	r2, r0
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <__multadd+0x84>)
 8007372:	480d      	ldr	r0, [pc, #52]	; (80073a8 <__multadd+0x88>)
 8007374:	21ba      	movs	r1, #186	; 0xba
 8007376:	f000 fd0d 	bl	8007d94 <__assert_func>
 800737a:	6922      	ldr	r2, [r4, #16]
 800737c:	3202      	adds	r2, #2
 800737e:	f104 010c 	add.w	r1, r4, #12
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	300c      	adds	r0, #12
 8007386:	f7ff f892 	bl	80064ae <memcpy>
 800738a:	4621      	mov	r1, r4
 800738c:	4638      	mov	r0, r7
 800738e:	f7ff ffa5 	bl	80072dc <_Bfree>
 8007392:	4644      	mov	r4, r8
 8007394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007398:	3501      	adds	r5, #1
 800739a:	615e      	str	r6, [r3, #20]
 800739c:	6125      	str	r5, [r4, #16]
 800739e:	4620      	mov	r0, r4
 80073a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a4:	080085b8 	.word	0x080085b8
 80073a8:	080085c9 	.word	0x080085c9

080073ac <__hi0bits>:
 80073ac:	0c03      	lsrs	r3, r0, #16
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	b9d3      	cbnz	r3, 80073e8 <__hi0bits+0x3c>
 80073b2:	0400      	lsls	r0, r0, #16
 80073b4:	2310      	movs	r3, #16
 80073b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073ba:	bf04      	itt	eq
 80073bc:	0200      	lsleq	r0, r0, #8
 80073be:	3308      	addeq	r3, #8
 80073c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073c4:	bf04      	itt	eq
 80073c6:	0100      	lsleq	r0, r0, #4
 80073c8:	3304      	addeq	r3, #4
 80073ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073ce:	bf04      	itt	eq
 80073d0:	0080      	lsleq	r0, r0, #2
 80073d2:	3302      	addeq	r3, #2
 80073d4:	2800      	cmp	r0, #0
 80073d6:	db05      	blt.n	80073e4 <__hi0bits+0x38>
 80073d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073dc:	f103 0301 	add.w	r3, r3, #1
 80073e0:	bf08      	it	eq
 80073e2:	2320      	moveq	r3, #32
 80073e4:	4618      	mov	r0, r3
 80073e6:	4770      	bx	lr
 80073e8:	2300      	movs	r3, #0
 80073ea:	e7e4      	b.n	80073b6 <__hi0bits+0xa>

080073ec <__lo0bits>:
 80073ec:	6803      	ldr	r3, [r0, #0]
 80073ee:	f013 0207 	ands.w	r2, r3, #7
 80073f2:	d00c      	beq.n	800740e <__lo0bits+0x22>
 80073f4:	07d9      	lsls	r1, r3, #31
 80073f6:	d422      	bmi.n	800743e <__lo0bits+0x52>
 80073f8:	079a      	lsls	r2, r3, #30
 80073fa:	bf49      	itett	mi
 80073fc:	085b      	lsrmi	r3, r3, #1
 80073fe:	089b      	lsrpl	r3, r3, #2
 8007400:	6003      	strmi	r3, [r0, #0]
 8007402:	2201      	movmi	r2, #1
 8007404:	bf5c      	itt	pl
 8007406:	6003      	strpl	r3, [r0, #0]
 8007408:	2202      	movpl	r2, #2
 800740a:	4610      	mov	r0, r2
 800740c:	4770      	bx	lr
 800740e:	b299      	uxth	r1, r3
 8007410:	b909      	cbnz	r1, 8007416 <__lo0bits+0x2a>
 8007412:	0c1b      	lsrs	r3, r3, #16
 8007414:	2210      	movs	r2, #16
 8007416:	b2d9      	uxtb	r1, r3
 8007418:	b909      	cbnz	r1, 800741e <__lo0bits+0x32>
 800741a:	3208      	adds	r2, #8
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	0719      	lsls	r1, r3, #28
 8007420:	bf04      	itt	eq
 8007422:	091b      	lsreq	r3, r3, #4
 8007424:	3204      	addeq	r2, #4
 8007426:	0799      	lsls	r1, r3, #30
 8007428:	bf04      	itt	eq
 800742a:	089b      	lsreq	r3, r3, #2
 800742c:	3202      	addeq	r2, #2
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	d403      	bmi.n	800743a <__lo0bits+0x4e>
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	f102 0201 	add.w	r2, r2, #1
 8007438:	d003      	beq.n	8007442 <__lo0bits+0x56>
 800743a:	6003      	str	r3, [r0, #0]
 800743c:	e7e5      	b.n	800740a <__lo0bits+0x1e>
 800743e:	2200      	movs	r2, #0
 8007440:	e7e3      	b.n	800740a <__lo0bits+0x1e>
 8007442:	2220      	movs	r2, #32
 8007444:	e7e1      	b.n	800740a <__lo0bits+0x1e>
	...

08007448 <__i2b>:
 8007448:	b510      	push	{r4, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	2101      	movs	r1, #1
 800744e:	f7ff ff05 	bl	800725c <_Balloc>
 8007452:	4602      	mov	r2, r0
 8007454:	b928      	cbnz	r0, 8007462 <__i2b+0x1a>
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <__i2b+0x24>)
 8007458:	4805      	ldr	r0, [pc, #20]	; (8007470 <__i2b+0x28>)
 800745a:	f240 1145 	movw	r1, #325	; 0x145
 800745e:	f000 fc99 	bl	8007d94 <__assert_func>
 8007462:	2301      	movs	r3, #1
 8007464:	6144      	str	r4, [r0, #20]
 8007466:	6103      	str	r3, [r0, #16]
 8007468:	bd10      	pop	{r4, pc}
 800746a:	bf00      	nop
 800746c:	080085b8 	.word	0x080085b8
 8007470:	080085c9 	.word	0x080085c9

08007474 <__multiply>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	4691      	mov	r9, r2
 800747a:	690a      	ldr	r2, [r1, #16]
 800747c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	bfb8      	it	lt
 8007484:	460b      	movlt	r3, r1
 8007486:	460c      	mov	r4, r1
 8007488:	bfbc      	itt	lt
 800748a:	464c      	movlt	r4, r9
 800748c:	4699      	movlt	r9, r3
 800748e:	6927      	ldr	r7, [r4, #16]
 8007490:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007494:	68a3      	ldr	r3, [r4, #8]
 8007496:	6861      	ldr	r1, [r4, #4]
 8007498:	eb07 060a 	add.w	r6, r7, sl
 800749c:	42b3      	cmp	r3, r6
 800749e:	b085      	sub	sp, #20
 80074a0:	bfb8      	it	lt
 80074a2:	3101      	addlt	r1, #1
 80074a4:	f7ff feda 	bl	800725c <_Balloc>
 80074a8:	b930      	cbnz	r0, 80074b8 <__multiply+0x44>
 80074aa:	4602      	mov	r2, r0
 80074ac:	4b44      	ldr	r3, [pc, #272]	; (80075c0 <__multiply+0x14c>)
 80074ae:	4845      	ldr	r0, [pc, #276]	; (80075c4 <__multiply+0x150>)
 80074b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80074b4:	f000 fc6e 	bl	8007d94 <__assert_func>
 80074b8:	f100 0514 	add.w	r5, r0, #20
 80074bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074c0:	462b      	mov	r3, r5
 80074c2:	2200      	movs	r2, #0
 80074c4:	4543      	cmp	r3, r8
 80074c6:	d321      	bcc.n	800750c <__multiply+0x98>
 80074c8:	f104 0314 	add.w	r3, r4, #20
 80074cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074d0:	f109 0314 	add.w	r3, r9, #20
 80074d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074d8:	9202      	str	r2, [sp, #8]
 80074da:	1b3a      	subs	r2, r7, r4
 80074dc:	3a15      	subs	r2, #21
 80074de:	f022 0203 	bic.w	r2, r2, #3
 80074e2:	3204      	adds	r2, #4
 80074e4:	f104 0115 	add.w	r1, r4, #21
 80074e8:	428f      	cmp	r7, r1
 80074ea:	bf38      	it	cc
 80074ec:	2204      	movcc	r2, #4
 80074ee:	9201      	str	r2, [sp, #4]
 80074f0:	9a02      	ldr	r2, [sp, #8]
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d80c      	bhi.n	8007512 <__multiply+0x9e>
 80074f8:	2e00      	cmp	r6, #0
 80074fa:	dd03      	ble.n	8007504 <__multiply+0x90>
 80074fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05b      	beq.n	80075bc <__multiply+0x148>
 8007504:	6106      	str	r6, [r0, #16]
 8007506:	b005      	add	sp, #20
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	f843 2b04 	str.w	r2, [r3], #4
 8007510:	e7d8      	b.n	80074c4 <__multiply+0x50>
 8007512:	f8b3 a000 	ldrh.w	sl, [r3]
 8007516:	f1ba 0f00 	cmp.w	sl, #0
 800751a:	d024      	beq.n	8007566 <__multiply+0xf2>
 800751c:	f104 0e14 	add.w	lr, r4, #20
 8007520:	46a9      	mov	r9, r5
 8007522:	f04f 0c00 	mov.w	ip, #0
 8007526:	f85e 2b04 	ldr.w	r2, [lr], #4
 800752a:	f8d9 1000 	ldr.w	r1, [r9]
 800752e:	fa1f fb82 	uxth.w	fp, r2
 8007532:	b289      	uxth	r1, r1
 8007534:	fb0a 110b 	mla	r1, sl, fp, r1
 8007538:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800753c:	f8d9 2000 	ldr.w	r2, [r9]
 8007540:	4461      	add	r1, ip
 8007542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007546:	fb0a c20b 	mla	r2, sl, fp, ip
 800754a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800754e:	b289      	uxth	r1, r1
 8007550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007554:	4577      	cmp	r7, lr
 8007556:	f849 1b04 	str.w	r1, [r9], #4
 800755a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800755e:	d8e2      	bhi.n	8007526 <__multiply+0xb2>
 8007560:	9a01      	ldr	r2, [sp, #4]
 8007562:	f845 c002 	str.w	ip, [r5, r2]
 8007566:	9a03      	ldr	r2, [sp, #12]
 8007568:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800756c:	3304      	adds	r3, #4
 800756e:	f1b9 0f00 	cmp.w	r9, #0
 8007572:	d021      	beq.n	80075b8 <__multiply+0x144>
 8007574:	6829      	ldr	r1, [r5, #0]
 8007576:	f104 0c14 	add.w	ip, r4, #20
 800757a:	46ae      	mov	lr, r5
 800757c:	f04f 0a00 	mov.w	sl, #0
 8007580:	f8bc b000 	ldrh.w	fp, [ip]
 8007584:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007588:	fb09 220b 	mla	r2, r9, fp, r2
 800758c:	4452      	add	r2, sl
 800758e:	b289      	uxth	r1, r1
 8007590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007594:	f84e 1b04 	str.w	r1, [lr], #4
 8007598:	f85c 1b04 	ldr.w	r1, [ip], #4
 800759c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075a0:	f8be 1000 	ldrh.w	r1, [lr]
 80075a4:	fb09 110a 	mla	r1, r9, sl, r1
 80075a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80075ac:	4567      	cmp	r7, ip
 80075ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075b2:	d8e5      	bhi.n	8007580 <__multiply+0x10c>
 80075b4:	9a01      	ldr	r2, [sp, #4]
 80075b6:	50a9      	str	r1, [r5, r2]
 80075b8:	3504      	adds	r5, #4
 80075ba:	e799      	b.n	80074f0 <__multiply+0x7c>
 80075bc:	3e01      	subs	r6, #1
 80075be:	e79b      	b.n	80074f8 <__multiply+0x84>
 80075c0:	080085b8 	.word	0x080085b8
 80075c4:	080085c9 	.word	0x080085c9

080075c8 <__pow5mult>:
 80075c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075cc:	4615      	mov	r5, r2
 80075ce:	f012 0203 	ands.w	r2, r2, #3
 80075d2:	4606      	mov	r6, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	d007      	beq.n	80075e8 <__pow5mult+0x20>
 80075d8:	4c25      	ldr	r4, [pc, #148]	; (8007670 <__pow5mult+0xa8>)
 80075da:	3a01      	subs	r2, #1
 80075dc:	2300      	movs	r3, #0
 80075de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075e2:	f7ff fe9d 	bl	8007320 <__multadd>
 80075e6:	4607      	mov	r7, r0
 80075e8:	10ad      	asrs	r5, r5, #2
 80075ea:	d03d      	beq.n	8007668 <__pow5mult+0xa0>
 80075ec:	69f4      	ldr	r4, [r6, #28]
 80075ee:	b97c      	cbnz	r4, 8007610 <__pow5mult+0x48>
 80075f0:	2010      	movs	r0, #16
 80075f2:	f7fe f841 	bl	8005678 <malloc>
 80075f6:	4602      	mov	r2, r0
 80075f8:	61f0      	str	r0, [r6, #28]
 80075fa:	b928      	cbnz	r0, 8007608 <__pow5mult+0x40>
 80075fc:	4b1d      	ldr	r3, [pc, #116]	; (8007674 <__pow5mult+0xac>)
 80075fe:	481e      	ldr	r0, [pc, #120]	; (8007678 <__pow5mult+0xb0>)
 8007600:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007604:	f000 fbc6 	bl	8007d94 <__assert_func>
 8007608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800760c:	6004      	str	r4, [r0, #0]
 800760e:	60c4      	str	r4, [r0, #12]
 8007610:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007618:	b94c      	cbnz	r4, 800762e <__pow5mult+0x66>
 800761a:	f240 2171 	movw	r1, #625	; 0x271
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ff12 	bl	8007448 <__i2b>
 8007624:	2300      	movs	r3, #0
 8007626:	f8c8 0008 	str.w	r0, [r8, #8]
 800762a:	4604      	mov	r4, r0
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	f04f 0900 	mov.w	r9, #0
 8007632:	07eb      	lsls	r3, r5, #31
 8007634:	d50a      	bpl.n	800764c <__pow5mult+0x84>
 8007636:	4639      	mov	r1, r7
 8007638:	4622      	mov	r2, r4
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ff1a 	bl	8007474 <__multiply>
 8007640:	4639      	mov	r1, r7
 8007642:	4680      	mov	r8, r0
 8007644:	4630      	mov	r0, r6
 8007646:	f7ff fe49 	bl	80072dc <_Bfree>
 800764a:	4647      	mov	r7, r8
 800764c:	106d      	asrs	r5, r5, #1
 800764e:	d00b      	beq.n	8007668 <__pow5mult+0xa0>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	b938      	cbnz	r0, 8007664 <__pow5mult+0x9c>
 8007654:	4622      	mov	r2, r4
 8007656:	4621      	mov	r1, r4
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff ff0b 	bl	8007474 <__multiply>
 800765e:	6020      	str	r0, [r4, #0]
 8007660:	f8c0 9000 	str.w	r9, [r0]
 8007664:	4604      	mov	r4, r0
 8007666:	e7e4      	b.n	8007632 <__pow5mult+0x6a>
 8007668:	4638      	mov	r0, r7
 800766a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766e:	bf00      	nop
 8007670:	08008718 	.word	0x08008718
 8007674:	08008549 	.word	0x08008549
 8007678:	080085c9 	.word	0x080085c9

0800767c <__lshift>:
 800767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007680:	460c      	mov	r4, r1
 8007682:	6849      	ldr	r1, [r1, #4]
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	4607      	mov	r7, r0
 800768e:	4691      	mov	r9, r2
 8007690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007694:	f108 0601 	add.w	r6, r8, #1
 8007698:	42b3      	cmp	r3, r6
 800769a:	db0b      	blt.n	80076b4 <__lshift+0x38>
 800769c:	4638      	mov	r0, r7
 800769e:	f7ff fddd 	bl	800725c <_Balloc>
 80076a2:	4605      	mov	r5, r0
 80076a4:	b948      	cbnz	r0, 80076ba <__lshift+0x3e>
 80076a6:	4602      	mov	r2, r0
 80076a8:	4b28      	ldr	r3, [pc, #160]	; (800774c <__lshift+0xd0>)
 80076aa:	4829      	ldr	r0, [pc, #164]	; (8007750 <__lshift+0xd4>)
 80076ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80076b0:	f000 fb70 	bl	8007d94 <__assert_func>
 80076b4:	3101      	adds	r1, #1
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	e7ee      	b.n	8007698 <__lshift+0x1c>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f100 0114 	add.w	r1, r0, #20
 80076c0:	f100 0210 	add.w	r2, r0, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	4553      	cmp	r3, sl
 80076c8:	db33      	blt.n	8007732 <__lshift+0xb6>
 80076ca:	6920      	ldr	r0, [r4, #16]
 80076cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076d0:	f104 0314 	add.w	r3, r4, #20
 80076d4:	f019 091f 	ands.w	r9, r9, #31
 80076d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076e0:	d02b      	beq.n	800773a <__lshift+0xbe>
 80076e2:	f1c9 0e20 	rsb	lr, r9, #32
 80076e6:	468a      	mov	sl, r1
 80076e8:	2200      	movs	r2, #0
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	fa00 f009 	lsl.w	r0, r0, r9
 80076f0:	4310      	orrs	r0, r2
 80076f2:	f84a 0b04 	str.w	r0, [sl], #4
 80076f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fa:	459c      	cmp	ip, r3
 80076fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007700:	d8f3      	bhi.n	80076ea <__lshift+0x6e>
 8007702:	ebac 0304 	sub.w	r3, ip, r4
 8007706:	3b15      	subs	r3, #21
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	3304      	adds	r3, #4
 800770e:	f104 0015 	add.w	r0, r4, #21
 8007712:	4584      	cmp	ip, r0
 8007714:	bf38      	it	cc
 8007716:	2304      	movcc	r3, #4
 8007718:	50ca      	str	r2, [r1, r3]
 800771a:	b10a      	cbz	r2, 8007720 <__lshift+0xa4>
 800771c:	f108 0602 	add.w	r6, r8, #2
 8007720:	3e01      	subs	r6, #1
 8007722:	4638      	mov	r0, r7
 8007724:	612e      	str	r6, [r5, #16]
 8007726:	4621      	mov	r1, r4
 8007728:	f7ff fdd8 	bl	80072dc <_Bfree>
 800772c:	4628      	mov	r0, r5
 800772e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007732:	f842 0f04 	str.w	r0, [r2, #4]!
 8007736:	3301      	adds	r3, #1
 8007738:	e7c5      	b.n	80076c6 <__lshift+0x4a>
 800773a:	3904      	subs	r1, #4
 800773c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007740:	f841 2f04 	str.w	r2, [r1, #4]!
 8007744:	459c      	cmp	ip, r3
 8007746:	d8f9      	bhi.n	800773c <__lshift+0xc0>
 8007748:	e7ea      	b.n	8007720 <__lshift+0xa4>
 800774a:	bf00      	nop
 800774c:	080085b8 	.word	0x080085b8
 8007750:	080085c9 	.word	0x080085c9

08007754 <__mcmp>:
 8007754:	b530      	push	{r4, r5, lr}
 8007756:	6902      	ldr	r2, [r0, #16]
 8007758:	690c      	ldr	r4, [r1, #16]
 800775a:	1b12      	subs	r2, r2, r4
 800775c:	d10e      	bne.n	800777c <__mcmp+0x28>
 800775e:	f100 0314 	add.w	r3, r0, #20
 8007762:	3114      	adds	r1, #20
 8007764:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007768:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800776c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007770:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007774:	42a5      	cmp	r5, r4
 8007776:	d003      	beq.n	8007780 <__mcmp+0x2c>
 8007778:	d305      	bcc.n	8007786 <__mcmp+0x32>
 800777a:	2201      	movs	r2, #1
 800777c:	4610      	mov	r0, r2
 800777e:	bd30      	pop	{r4, r5, pc}
 8007780:	4283      	cmp	r3, r0
 8007782:	d3f3      	bcc.n	800776c <__mcmp+0x18>
 8007784:	e7fa      	b.n	800777c <__mcmp+0x28>
 8007786:	f04f 32ff 	mov.w	r2, #4294967295
 800778a:	e7f7      	b.n	800777c <__mcmp+0x28>

0800778c <__mdiff>:
 800778c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007790:	460c      	mov	r4, r1
 8007792:	4606      	mov	r6, r0
 8007794:	4611      	mov	r1, r2
 8007796:	4620      	mov	r0, r4
 8007798:	4690      	mov	r8, r2
 800779a:	f7ff ffdb 	bl	8007754 <__mcmp>
 800779e:	1e05      	subs	r5, r0, #0
 80077a0:	d110      	bne.n	80077c4 <__mdiff+0x38>
 80077a2:	4629      	mov	r1, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	f7ff fd59 	bl	800725c <_Balloc>
 80077aa:	b930      	cbnz	r0, 80077ba <__mdiff+0x2e>
 80077ac:	4b3a      	ldr	r3, [pc, #232]	; (8007898 <__mdiff+0x10c>)
 80077ae:	4602      	mov	r2, r0
 80077b0:	f240 2137 	movw	r1, #567	; 0x237
 80077b4:	4839      	ldr	r0, [pc, #228]	; (800789c <__mdiff+0x110>)
 80077b6:	f000 faed 	bl	8007d94 <__assert_func>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c4:	bfa4      	itt	ge
 80077c6:	4643      	movge	r3, r8
 80077c8:	46a0      	movge	r8, r4
 80077ca:	4630      	mov	r0, r6
 80077cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077d0:	bfa6      	itte	ge
 80077d2:	461c      	movge	r4, r3
 80077d4:	2500      	movge	r5, #0
 80077d6:	2501      	movlt	r5, #1
 80077d8:	f7ff fd40 	bl	800725c <_Balloc>
 80077dc:	b920      	cbnz	r0, 80077e8 <__mdiff+0x5c>
 80077de:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <__mdiff+0x10c>)
 80077e0:	4602      	mov	r2, r0
 80077e2:	f240 2145 	movw	r1, #581	; 0x245
 80077e6:	e7e5      	b.n	80077b4 <__mdiff+0x28>
 80077e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077ec:	6926      	ldr	r6, [r4, #16]
 80077ee:	60c5      	str	r5, [r0, #12]
 80077f0:	f104 0914 	add.w	r9, r4, #20
 80077f4:	f108 0514 	add.w	r5, r8, #20
 80077f8:	f100 0e14 	add.w	lr, r0, #20
 80077fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007800:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007804:	f108 0210 	add.w	r2, r8, #16
 8007808:	46f2      	mov	sl, lr
 800780a:	2100      	movs	r1, #0
 800780c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007810:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007814:	fa11 f88b 	uxtah	r8, r1, fp
 8007818:	b299      	uxth	r1, r3
 800781a:	0c1b      	lsrs	r3, r3, #16
 800781c:	eba8 0801 	sub.w	r8, r8, r1
 8007820:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007824:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007828:	fa1f f888 	uxth.w	r8, r8
 800782c:	1419      	asrs	r1, r3, #16
 800782e:	454e      	cmp	r6, r9
 8007830:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007834:	f84a 3b04 	str.w	r3, [sl], #4
 8007838:	d8e8      	bhi.n	800780c <__mdiff+0x80>
 800783a:	1b33      	subs	r3, r6, r4
 800783c:	3b15      	subs	r3, #21
 800783e:	f023 0303 	bic.w	r3, r3, #3
 8007842:	3304      	adds	r3, #4
 8007844:	3415      	adds	r4, #21
 8007846:	42a6      	cmp	r6, r4
 8007848:	bf38      	it	cc
 800784a:	2304      	movcc	r3, #4
 800784c:	441d      	add	r5, r3
 800784e:	4473      	add	r3, lr
 8007850:	469e      	mov	lr, r3
 8007852:	462e      	mov	r6, r5
 8007854:	4566      	cmp	r6, ip
 8007856:	d30e      	bcc.n	8007876 <__mdiff+0xea>
 8007858:	f10c 0203 	add.w	r2, ip, #3
 800785c:	1b52      	subs	r2, r2, r5
 800785e:	f022 0203 	bic.w	r2, r2, #3
 8007862:	3d03      	subs	r5, #3
 8007864:	45ac      	cmp	ip, r5
 8007866:	bf38      	it	cc
 8007868:	2200      	movcc	r2, #0
 800786a:	4413      	add	r3, r2
 800786c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007870:	b17a      	cbz	r2, 8007892 <__mdiff+0x106>
 8007872:	6107      	str	r7, [r0, #16]
 8007874:	e7a4      	b.n	80077c0 <__mdiff+0x34>
 8007876:	f856 8b04 	ldr.w	r8, [r6], #4
 800787a:	fa11 f288 	uxtah	r2, r1, r8
 800787e:	1414      	asrs	r4, r2, #16
 8007880:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007884:	b292      	uxth	r2, r2
 8007886:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800788a:	f84e 2b04 	str.w	r2, [lr], #4
 800788e:	1421      	asrs	r1, r4, #16
 8007890:	e7e0      	b.n	8007854 <__mdiff+0xc8>
 8007892:	3f01      	subs	r7, #1
 8007894:	e7ea      	b.n	800786c <__mdiff+0xe0>
 8007896:	bf00      	nop
 8007898:	080085b8 	.word	0x080085b8
 800789c:	080085c9 	.word	0x080085c9

080078a0 <__d2b>:
 80078a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078a4:	460f      	mov	r7, r1
 80078a6:	2101      	movs	r1, #1
 80078a8:	ec59 8b10 	vmov	r8, r9, d0
 80078ac:	4616      	mov	r6, r2
 80078ae:	f7ff fcd5 	bl	800725c <_Balloc>
 80078b2:	4604      	mov	r4, r0
 80078b4:	b930      	cbnz	r0, 80078c4 <__d2b+0x24>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b24      	ldr	r3, [pc, #144]	; (800794c <__d2b+0xac>)
 80078ba:	4825      	ldr	r0, [pc, #148]	; (8007950 <__d2b+0xb0>)
 80078bc:	f240 310f 	movw	r1, #783	; 0x30f
 80078c0:	f000 fa68 	bl	8007d94 <__assert_func>
 80078c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078cc:	bb2d      	cbnz	r5, 800791a <__d2b+0x7a>
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f1b8 0300 	subs.w	r3, r8, #0
 80078d4:	d026      	beq.n	8007924 <__d2b+0x84>
 80078d6:	4668      	mov	r0, sp
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	f7ff fd87 	bl	80073ec <__lo0bits>
 80078de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078e2:	b1e8      	cbz	r0, 8007920 <__d2b+0x80>
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	430b      	orrs	r3, r1
 80078ee:	40c2      	lsrs	r2, r0
 80078f0:	6163      	str	r3, [r4, #20]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9b01      	ldr	r3, [sp, #4]
 80078f6:	61a3      	str	r3, [r4, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf14      	ite	ne
 80078fc:	2202      	movne	r2, #2
 80078fe:	2201      	moveq	r2, #1
 8007900:	6122      	str	r2, [r4, #16]
 8007902:	b1bd      	cbz	r5, 8007934 <__d2b+0x94>
 8007904:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007908:	4405      	add	r5, r0
 800790a:	603d      	str	r5, [r7, #0]
 800790c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4620      	mov	r0, r4
 8007914:	b003      	add	sp, #12
 8007916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800791e:	e7d6      	b.n	80078ce <__d2b+0x2e>
 8007920:	6161      	str	r1, [r4, #20]
 8007922:	e7e7      	b.n	80078f4 <__d2b+0x54>
 8007924:	a801      	add	r0, sp, #4
 8007926:	f7ff fd61 	bl	80073ec <__lo0bits>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	6163      	str	r3, [r4, #20]
 800792e:	3020      	adds	r0, #32
 8007930:	2201      	movs	r2, #1
 8007932:	e7e5      	b.n	8007900 <__d2b+0x60>
 8007934:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007938:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800793c:	6038      	str	r0, [r7, #0]
 800793e:	6918      	ldr	r0, [r3, #16]
 8007940:	f7ff fd34 	bl	80073ac <__hi0bits>
 8007944:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007948:	e7e2      	b.n	8007910 <__d2b+0x70>
 800794a:	bf00      	nop
 800794c:	080085b8 	.word	0x080085b8
 8007950:	080085c9 	.word	0x080085c9

08007954 <__ssputs_r>:
 8007954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007958:	688e      	ldr	r6, [r1, #8]
 800795a:	461f      	mov	r7, r3
 800795c:	42be      	cmp	r6, r7
 800795e:	680b      	ldr	r3, [r1, #0]
 8007960:	4682      	mov	sl, r0
 8007962:	460c      	mov	r4, r1
 8007964:	4690      	mov	r8, r2
 8007966:	d82c      	bhi.n	80079c2 <__ssputs_r+0x6e>
 8007968:	898a      	ldrh	r2, [r1, #12]
 800796a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800796e:	d026      	beq.n	80079be <__ssputs_r+0x6a>
 8007970:	6965      	ldr	r5, [r4, #20]
 8007972:	6909      	ldr	r1, [r1, #16]
 8007974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007978:	eba3 0901 	sub.w	r9, r3, r1
 800797c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007980:	1c7b      	adds	r3, r7, #1
 8007982:	444b      	add	r3, r9
 8007984:	106d      	asrs	r5, r5, #1
 8007986:	429d      	cmp	r5, r3
 8007988:	bf38      	it	cc
 800798a:	461d      	movcc	r5, r3
 800798c:	0553      	lsls	r3, r2, #21
 800798e:	d527      	bpl.n	80079e0 <__ssputs_r+0x8c>
 8007990:	4629      	mov	r1, r5
 8007992:	f7fd fea1 	bl	80056d8 <_malloc_r>
 8007996:	4606      	mov	r6, r0
 8007998:	b360      	cbz	r0, 80079f4 <__ssputs_r+0xa0>
 800799a:	6921      	ldr	r1, [r4, #16]
 800799c:	464a      	mov	r2, r9
 800799e:	f7fe fd86 	bl	80064ae <memcpy>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	6126      	str	r6, [r4, #16]
 80079b0:	6165      	str	r5, [r4, #20]
 80079b2:	444e      	add	r6, r9
 80079b4:	eba5 0509 	sub.w	r5, r5, r9
 80079b8:	6026      	str	r6, [r4, #0]
 80079ba:	60a5      	str	r5, [r4, #8]
 80079bc:	463e      	mov	r6, r7
 80079be:	42be      	cmp	r6, r7
 80079c0:	d900      	bls.n	80079c4 <__ssputs_r+0x70>
 80079c2:	463e      	mov	r6, r7
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	4632      	mov	r2, r6
 80079c8:	4641      	mov	r1, r8
 80079ca:	f000 f9c9 	bl	8007d60 <memmove>
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	1b9b      	subs	r3, r3, r6
 80079d2:	60a3      	str	r3, [r4, #8]
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	4433      	add	r3, r6
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	2000      	movs	r0, #0
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	462a      	mov	r2, r5
 80079e2:	f000 fa1d 	bl	8007e20 <_realloc_r>
 80079e6:	4606      	mov	r6, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d1e0      	bne.n	80079ae <__ssputs_r+0x5a>
 80079ec:	6921      	ldr	r1, [r4, #16]
 80079ee:	4650      	mov	r0, sl
 80079f0:	f7ff fbe8 	bl	80071c4 <_free_r>
 80079f4:	230c      	movs	r3, #12
 80079f6:	f8ca 3000 	str.w	r3, [sl]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295
 8007a06:	e7e9      	b.n	80079dc <__ssputs_r+0x88>

08007a08 <_svfiprintf_r>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	898b      	ldrh	r3, [r1, #12]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	b09d      	sub	sp, #116	; 0x74
 8007a14:	4607      	mov	r7, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	d50e      	bpl.n	8007a3a <_svfiprintf_r+0x32>
 8007a1c:	690b      	ldr	r3, [r1, #16]
 8007a1e:	b963      	cbnz	r3, 8007a3a <_svfiprintf_r+0x32>
 8007a20:	2140      	movs	r1, #64	; 0x40
 8007a22:	f7fd fe59 	bl	80056d8 <_malloc_r>
 8007a26:	6028      	str	r0, [r5, #0]
 8007a28:	6128      	str	r0, [r5, #16]
 8007a2a:	b920      	cbnz	r0, 8007a36 <_svfiprintf_r+0x2e>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e0d0      	b.n	8007bd8 <_svfiprintf_r+0x1d0>
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	616b      	str	r3, [r5, #20]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	2320      	movs	r3, #32
 8007a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a48:	2330      	movs	r3, #48	; 0x30
 8007a4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bf0 <_svfiprintf_r+0x1e8>
 8007a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a52:	f04f 0901 	mov.w	r9, #1
 8007a56:	4623      	mov	r3, r4
 8007a58:	469a      	mov	sl, r3
 8007a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a5e:	b10a      	cbz	r2, 8007a64 <_svfiprintf_r+0x5c>
 8007a60:	2a25      	cmp	r2, #37	; 0x25
 8007a62:	d1f9      	bne.n	8007a58 <_svfiprintf_r+0x50>
 8007a64:	ebba 0b04 	subs.w	fp, sl, r4
 8007a68:	d00b      	beq.n	8007a82 <_svfiprintf_r+0x7a>
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ff6f 	bl	8007954 <__ssputs_r>
 8007a76:	3001      	adds	r0, #1
 8007a78:	f000 80a9 	beq.w	8007bce <_svfiprintf_r+0x1c6>
 8007a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7e:	445a      	add	r2, fp
 8007a80:	9209      	str	r2, [sp, #36]	; 0x24
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80a1 	beq.w	8007bce <_svfiprintf_r+0x1c6>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	9304      	str	r3, [sp, #16]
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	4850      	ldr	r0, [pc, #320]	; (8007bf0 <_svfiprintf_r+0x1e8>)
 8007aae:	f7f8 fbaf 	bl	8000210 <memchr>
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	b9d8      	cbnz	r0, 8007aee <_svfiprintf_r+0xe6>
 8007ab6:	06d0      	lsls	r0, r2, #27
 8007ab8:	bf44      	itt	mi
 8007aba:	2320      	movmi	r3, #32
 8007abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac0:	0711      	lsls	r1, r2, #28
 8007ac2:	bf44      	itt	mi
 8007ac4:	232b      	movmi	r3, #43	; 0x2b
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ace:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad0:	d015      	beq.n	8007afe <_svfiprintf_r+0xf6>
 8007ad2:	9a07      	ldr	r2, [sp, #28]
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f04f 0c0a 	mov.w	ip, #10
 8007adc:	4621      	mov	r1, r4
 8007ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae2:	3b30      	subs	r3, #48	; 0x30
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d94d      	bls.n	8007b84 <_svfiprintf_r+0x17c>
 8007ae8:	b1b0      	cbz	r0, 8007b18 <_svfiprintf_r+0x110>
 8007aea:	9207      	str	r2, [sp, #28]
 8007aec:	e014      	b.n	8007b18 <_svfiprintf_r+0x110>
 8007aee:	eba0 0308 	sub.w	r3, r0, r8
 8007af2:	fa09 f303 	lsl.w	r3, r9, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	46a2      	mov	sl, r4
 8007afc:	e7d2      	b.n	8007aa4 <_svfiprintf_r+0x9c>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9103      	str	r1, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfbb      	ittet	lt
 8007b0a:	425b      	neglt	r3, r3
 8007b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b10:	9307      	strge	r3, [sp, #28]
 8007b12:	9307      	strlt	r3, [sp, #28]
 8007b14:	bfb8      	it	lt
 8007b16:	9204      	strlt	r2, [sp, #16]
 8007b18:	7823      	ldrb	r3, [r4, #0]
 8007b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1c:	d10c      	bne.n	8007b38 <_svfiprintf_r+0x130>
 8007b1e:	7863      	ldrb	r3, [r4, #1]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d134      	bne.n	8007b8e <_svfiprintf_r+0x186>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9203      	str	r2, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfb8      	it	lt
 8007b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b34:	3402      	adds	r4, #2
 8007b36:	9305      	str	r3, [sp, #20]
 8007b38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c00 <_svfiprintf_r+0x1f8>
 8007b3c:	7821      	ldrb	r1, [r4, #0]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	4650      	mov	r0, sl
 8007b42:	f7f8 fb65 	bl	8000210 <memchr>
 8007b46:	b138      	cbz	r0, 8007b58 <_svfiprintf_r+0x150>
 8007b48:	9b04      	ldr	r3, [sp, #16]
 8007b4a:	eba0 000a 	sub.w	r0, r0, sl
 8007b4e:	2240      	movs	r2, #64	; 0x40
 8007b50:	4082      	lsls	r2, r0
 8007b52:	4313      	orrs	r3, r2
 8007b54:	3401      	adds	r4, #1
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5c:	4825      	ldr	r0, [pc, #148]	; (8007bf4 <_svfiprintf_r+0x1ec>)
 8007b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b62:	2206      	movs	r2, #6
 8007b64:	f7f8 fb54 	bl	8000210 <memchr>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d038      	beq.n	8007bde <_svfiprintf_r+0x1d6>
 8007b6c:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <_svfiprintf_r+0x1f0>)
 8007b6e:	bb1b      	cbnz	r3, 8007bb8 <_svfiprintf_r+0x1b0>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	3307      	adds	r3, #7
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	3308      	adds	r3, #8
 8007b7a:	9303      	str	r3, [sp, #12]
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	4433      	add	r3, r6
 8007b80:	9309      	str	r3, [sp, #36]	; 0x24
 8007b82:	e768      	b.n	8007a56 <_svfiprintf_r+0x4e>
 8007b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b88:	460c      	mov	r4, r1
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	e7a6      	b.n	8007adc <_svfiprintf_r+0xd4>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	3401      	adds	r4, #1
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	4619      	mov	r1, r3
 8007b96:	f04f 0c0a 	mov.w	ip, #10
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba0:	3a30      	subs	r2, #48	; 0x30
 8007ba2:	2a09      	cmp	r2, #9
 8007ba4:	d903      	bls.n	8007bae <_svfiprintf_r+0x1a6>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0c6      	beq.n	8007b38 <_svfiprintf_r+0x130>
 8007baa:	9105      	str	r1, [sp, #20]
 8007bac:	e7c4      	b.n	8007b38 <_svfiprintf_r+0x130>
 8007bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e7f0      	b.n	8007b9a <_svfiprintf_r+0x192>
 8007bb8:	ab03      	add	r3, sp, #12
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <_svfiprintf_r+0x1f4>)
 8007bc0:	a904      	add	r1, sp, #16
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7fd feb4 	bl	8005930 <_printf_float>
 8007bc8:	1c42      	adds	r2, r0, #1
 8007bca:	4606      	mov	r6, r0
 8007bcc:	d1d6      	bne.n	8007b7c <_svfiprintf_r+0x174>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	065b      	lsls	r3, r3, #25
 8007bd2:	f53f af2d 	bmi.w	8007a30 <_svfiprintf_r+0x28>
 8007bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd8:	b01d      	add	sp, #116	; 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	462a      	mov	r2, r5
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <_svfiprintf_r+0x1f4>)
 8007be6:	a904      	add	r1, sp, #16
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7fe f945 	bl	8005e78 <_printf_i>
 8007bee:	e7eb      	b.n	8007bc8 <_svfiprintf_r+0x1c0>
 8007bf0:	08008724 	.word	0x08008724
 8007bf4:	0800872e 	.word	0x0800872e
 8007bf8:	08005931 	.word	0x08005931
 8007bfc:	08007955 	.word	0x08007955
 8007c00:	0800872a 	.word	0x0800872a

08007c04 <__sflush_r>:
 8007c04:	898a      	ldrh	r2, [r1, #12]
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	0710      	lsls	r0, r2, #28
 8007c0e:	460c      	mov	r4, r1
 8007c10:	d458      	bmi.n	8007cc4 <__sflush_r+0xc0>
 8007c12:	684b      	ldr	r3, [r1, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc05      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dc02      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d0f9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c30:	682f      	ldr	r7, [r5, #0]
 8007c32:	6a21      	ldr	r1, [r4, #32]
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	d032      	beq.n	8007c9e <__sflush_r+0x9a>
 8007c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	075a      	lsls	r2, r3, #29
 8007c3e:	d505      	bpl.n	8007c4c <__sflush_r+0x48>
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	1ac0      	subs	r0, r0, r3
 8007c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c46:	b10b      	cbz	r3, 8007c4c <__sflush_r+0x48>
 8007c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c4a:	1ac0      	subs	r0, r0, r3
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c52:	6a21      	ldr	r1, [r4, #32]
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b0      	blx	r6
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	d106      	bne.n	8007c6c <__sflush_r+0x68>
 8007c5e:	6829      	ldr	r1, [r5, #0]
 8007c60:	291d      	cmp	r1, #29
 8007c62:	d82b      	bhi.n	8007cbc <__sflush_r+0xb8>
 8007c64:	4a29      	ldr	r2, [pc, #164]	; (8007d0c <__sflush_r+0x108>)
 8007c66:	410a      	asrs	r2, r1
 8007c68:	07d6      	lsls	r6, r2, #31
 8007c6a:	d427      	bmi.n	8007cbc <__sflush_r+0xb8>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	6062      	str	r2, [r4, #4]
 8007c70:	04d9      	lsls	r1, r3, #19
 8007c72:	6922      	ldr	r2, [r4, #16]
 8007c74:	6022      	str	r2, [r4, #0]
 8007c76:	d504      	bpl.n	8007c82 <__sflush_r+0x7e>
 8007c78:	1c42      	adds	r2, r0, #1
 8007c7a:	d101      	bne.n	8007c80 <__sflush_r+0x7c>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b903      	cbnz	r3, 8007c82 <__sflush_r+0x7e>
 8007c80:	6560      	str	r0, [r4, #84]	; 0x54
 8007c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c84:	602f      	str	r7, [r5, #0]
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d0c9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c8e:	4299      	cmp	r1, r3
 8007c90:	d002      	beq.n	8007c98 <__sflush_r+0x94>
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7ff fa96 	bl	80071c4 <_free_r>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9c:	e7c0      	b.n	8007c20 <__sflush_r+0x1c>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b0      	blx	r6
 8007ca4:	1c41      	adds	r1, r0, #1
 8007ca6:	d1c8      	bne.n	8007c3a <__sflush_r+0x36>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c5      	beq.n	8007c3a <__sflush_r+0x36>
 8007cae:	2b1d      	cmp	r3, #29
 8007cb0:	d001      	beq.n	8007cb6 <__sflush_r+0xb2>
 8007cb2:	2b16      	cmp	r3, #22
 8007cb4:	d101      	bne.n	8007cba <__sflush_r+0xb6>
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	e7b1      	b.n	8007c1e <__sflush_r+0x1a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7ad      	b.n	8007c20 <__sflush_r+0x1c>
 8007cc4:	690f      	ldr	r7, [r1, #16]
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	d0a9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007cca:	0793      	lsls	r3, r2, #30
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	bf08      	it	eq
 8007cd0:	694b      	ldreq	r3, [r1, #20]
 8007cd2:	600f      	str	r7, [r1, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	eba6 0807 	sub.w	r8, r6, r7
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	dd9c      	ble.n	8007c1e <__sflush_r+0x1a>
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ce8:	4643      	mov	r3, r8
 8007cea:	463a      	mov	r2, r7
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc06      	bgt.n	8007d02 <__sflush_r+0xfe>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e78e      	b.n	8007c20 <__sflush_r+0x1c>
 8007d02:	4407      	add	r7, r0
 8007d04:	eba8 0800 	sub.w	r8, r8, r0
 8007d08:	e7e9      	b.n	8007cde <__sflush_r+0xda>
 8007d0a:	bf00      	nop
 8007d0c:	dfbffffe 	.word	0xdfbffffe

08007d10 <_fflush_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	690b      	ldr	r3, [r1, #16]
 8007d14:	4605      	mov	r5, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	b913      	cbnz	r3, 8007d20 <_fflush_r+0x10>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	b118      	cbz	r0, 8007d2a <_fflush_r+0x1a>
 8007d22:	6a03      	ldr	r3, [r0, #32]
 8007d24:	b90b      	cbnz	r3, 8007d2a <_fflush_r+0x1a>
 8007d26:	f7fe fa55 	bl	80061d4 <__sinit>
 8007d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f3      	beq.n	8007d1a <_fflush_r+0xa>
 8007d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d34:	07d0      	lsls	r0, r2, #31
 8007d36:	d404      	bmi.n	8007d42 <_fflush_r+0x32>
 8007d38:	0599      	lsls	r1, r3, #22
 8007d3a:	d402      	bmi.n	8007d42 <_fflush_r+0x32>
 8007d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3e:	f7fe fbb4 	bl	80064aa <__retarget_lock_acquire_recursive>
 8007d42:	4628      	mov	r0, r5
 8007d44:	4621      	mov	r1, r4
 8007d46:	f7ff ff5d 	bl	8007c04 <__sflush_r>
 8007d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d4c:	07da      	lsls	r2, r3, #31
 8007d4e:	4605      	mov	r5, r0
 8007d50:	d4e4      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	d4e1      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d5a:	f7fe fba7 	bl	80064ac <__retarget_lock_release_recursive>
 8007d5e:	e7dd      	b.n	8007d1c <_fflush_r+0xc>

08007d60 <memmove>:
 8007d60:	4288      	cmp	r0, r1
 8007d62:	b510      	push	{r4, lr}
 8007d64:	eb01 0402 	add.w	r4, r1, r2
 8007d68:	d902      	bls.n	8007d70 <memmove+0x10>
 8007d6a:	4284      	cmp	r4, r0
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	d807      	bhi.n	8007d80 <memmove+0x20>
 8007d70:	1e43      	subs	r3, r0, #1
 8007d72:	42a1      	cmp	r1, r4
 8007d74:	d008      	beq.n	8007d88 <memmove+0x28>
 8007d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d7e:	e7f8      	b.n	8007d72 <memmove+0x12>
 8007d80:	4402      	add	r2, r0
 8007d82:	4601      	mov	r1, r0
 8007d84:	428a      	cmp	r2, r1
 8007d86:	d100      	bne.n	8007d8a <memmove+0x2a>
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d92:	e7f7      	b.n	8007d84 <memmove+0x24>

08007d94 <__assert_func>:
 8007d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d96:	4614      	mov	r4, r2
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <__assert_func+0x2c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4605      	mov	r5, r0
 8007da0:	68d8      	ldr	r0, [r3, #12]
 8007da2:	b14c      	cbz	r4, 8007db8 <__assert_func+0x24>
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <__assert_func+0x30>)
 8007da6:	9100      	str	r1, [sp, #0]
 8007da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dac:	4906      	ldr	r1, [pc, #24]	; (8007dc8 <__assert_func+0x34>)
 8007dae:	462b      	mov	r3, r5
 8007db0:	f000 f872 	bl	8007e98 <fiprintf>
 8007db4:	f7fd fc58 	bl	8005668 <abort>
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <__assert_func+0x38>)
 8007dba:	461c      	mov	r4, r3
 8007dbc:	e7f3      	b.n	8007da6 <__assert_func+0x12>
 8007dbe:	bf00      	nop
 8007dc0:	20000064 	.word	0x20000064
 8007dc4:	0800873f 	.word	0x0800873f
 8007dc8:	0800874c 	.word	0x0800874c
 8007dcc:	0800877a 	.word	0x0800877a

08007dd0 <_calloc_r>:
 8007dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dd2:	fba1 2402 	umull	r2, r4, r1, r2
 8007dd6:	b94c      	cbnz	r4, 8007dec <_calloc_r+0x1c>
 8007dd8:	4611      	mov	r1, r2
 8007dda:	9201      	str	r2, [sp, #4]
 8007ddc:	f7fd fc7c 	bl	80056d8 <_malloc_r>
 8007de0:	9a01      	ldr	r2, [sp, #4]
 8007de2:	4605      	mov	r5, r0
 8007de4:	b930      	cbnz	r0, 8007df4 <_calloc_r+0x24>
 8007de6:	4628      	mov	r0, r5
 8007de8:	b003      	add	sp, #12
 8007dea:	bd30      	pop	{r4, r5, pc}
 8007dec:	220c      	movs	r2, #12
 8007dee:	6002      	str	r2, [r0, #0]
 8007df0:	2500      	movs	r5, #0
 8007df2:	e7f8      	b.n	8007de6 <_calloc_r+0x16>
 8007df4:	4621      	mov	r1, r4
 8007df6:	f7fe fa86 	bl	8006306 <memset>
 8007dfa:	e7f4      	b.n	8007de6 <_calloc_r+0x16>

08007dfc <__ascii_mbtowc>:
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	b901      	cbnz	r1, 8007e02 <__ascii_mbtowc+0x6>
 8007e00:	a901      	add	r1, sp, #4
 8007e02:	b142      	cbz	r2, 8007e16 <__ascii_mbtowc+0x1a>
 8007e04:	b14b      	cbz	r3, 8007e1a <__ascii_mbtowc+0x1e>
 8007e06:	7813      	ldrb	r3, [r2, #0]
 8007e08:	600b      	str	r3, [r1, #0]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	1e10      	subs	r0, r2, #0
 8007e0e:	bf18      	it	ne
 8007e10:	2001      	movne	r0, #1
 8007e12:	b002      	add	sp, #8
 8007e14:	4770      	bx	lr
 8007e16:	4610      	mov	r0, r2
 8007e18:	e7fb      	b.n	8007e12 <__ascii_mbtowc+0x16>
 8007e1a:	f06f 0001 	mvn.w	r0, #1
 8007e1e:	e7f8      	b.n	8007e12 <__ascii_mbtowc+0x16>

08007e20 <_realloc_r>:
 8007e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e24:	4680      	mov	r8, r0
 8007e26:	4614      	mov	r4, r2
 8007e28:	460e      	mov	r6, r1
 8007e2a:	b921      	cbnz	r1, 8007e36 <_realloc_r+0x16>
 8007e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e30:	4611      	mov	r1, r2
 8007e32:	f7fd bc51 	b.w	80056d8 <_malloc_r>
 8007e36:	b92a      	cbnz	r2, 8007e44 <_realloc_r+0x24>
 8007e38:	f7ff f9c4 	bl	80071c4 <_free_r>
 8007e3c:	4625      	mov	r5, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e44:	f000 f83a 	bl	8007ebc <_malloc_usable_size_r>
 8007e48:	4284      	cmp	r4, r0
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	d802      	bhi.n	8007e54 <_realloc_r+0x34>
 8007e4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e52:	d812      	bhi.n	8007e7a <_realloc_r+0x5a>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7fd fc3e 	bl	80056d8 <_malloc_r>
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d0ed      	beq.n	8007e3e <_realloc_r+0x1e>
 8007e62:	42bc      	cmp	r4, r7
 8007e64:	4622      	mov	r2, r4
 8007e66:	4631      	mov	r1, r6
 8007e68:	bf28      	it	cs
 8007e6a:	463a      	movcs	r2, r7
 8007e6c:	f7fe fb1f 	bl	80064ae <memcpy>
 8007e70:	4631      	mov	r1, r6
 8007e72:	4640      	mov	r0, r8
 8007e74:	f7ff f9a6 	bl	80071c4 <_free_r>
 8007e78:	e7e1      	b.n	8007e3e <_realloc_r+0x1e>
 8007e7a:	4635      	mov	r5, r6
 8007e7c:	e7df      	b.n	8007e3e <_realloc_r+0x1e>

08007e7e <__ascii_wctomb>:
 8007e7e:	b149      	cbz	r1, 8007e94 <__ascii_wctomb+0x16>
 8007e80:	2aff      	cmp	r2, #255	; 0xff
 8007e82:	bf85      	ittet	hi
 8007e84:	238a      	movhi	r3, #138	; 0x8a
 8007e86:	6003      	strhi	r3, [r0, #0]
 8007e88:	700a      	strbls	r2, [r1, #0]
 8007e8a:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e8e:	bf98      	it	ls
 8007e90:	2001      	movls	r0, #1
 8007e92:	4770      	bx	lr
 8007e94:	4608      	mov	r0, r1
 8007e96:	4770      	bx	lr

08007e98 <fiprintf>:
 8007e98:	b40e      	push	{r1, r2, r3}
 8007e9a:	b503      	push	{r0, r1, lr}
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	4805      	ldr	r0, [pc, #20]	; (8007eb8 <fiprintf+0x20>)
 8007ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	f000 f839 	bl	8007f20 <_vfiprintf_r>
 8007eae:	b002      	add	sp, #8
 8007eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	4770      	bx	lr
 8007eb8:	20000064 	.word	0x20000064

08007ebc <_malloc_usable_size_r>:
 8007ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec0:	1f18      	subs	r0, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bfbc      	itt	lt
 8007ec6:	580b      	ldrlt	r3, [r1, r0]
 8007ec8:	18c0      	addlt	r0, r0, r3
 8007eca:	4770      	bx	lr

08007ecc <__sfputc_r>:
 8007ecc:	6893      	ldr	r3, [r2, #8]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	b410      	push	{r4}
 8007ed4:	6093      	str	r3, [r2, #8]
 8007ed6:	da08      	bge.n	8007eea <__sfputc_r+0x1e>
 8007ed8:	6994      	ldr	r4, [r2, #24]
 8007eda:	42a3      	cmp	r3, r4
 8007edc:	db01      	blt.n	8007ee2 <__sfputc_r+0x16>
 8007ede:	290a      	cmp	r1, #10
 8007ee0:	d103      	bne.n	8007eea <__sfputc_r+0x1e>
 8007ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee6:	f000 b935 	b.w	8008154 <__swbuf_r>
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	1c58      	adds	r0, r3, #1
 8007eee:	6010      	str	r0, [r2, #0]
 8007ef0:	7019      	strb	r1, [r3, #0]
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <__sfputs_r>:
 8007efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	4614      	mov	r4, r2
 8007f02:	18d5      	adds	r5, r2, r3
 8007f04:	42ac      	cmp	r4, r5
 8007f06:	d101      	bne.n	8007f0c <__sfputs_r+0x12>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e007      	b.n	8007f1c <__sfputs_r+0x22>
 8007f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f10:	463a      	mov	r2, r7
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff ffda 	bl	8007ecc <__sfputc_r>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d1f3      	bne.n	8007f04 <__sfputs_r+0xa>
 8007f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f20 <_vfiprintf_r>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	460d      	mov	r5, r1
 8007f26:	b09d      	sub	sp, #116	; 0x74
 8007f28:	4614      	mov	r4, r2
 8007f2a:	4698      	mov	r8, r3
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	b118      	cbz	r0, 8007f38 <_vfiprintf_r+0x18>
 8007f30:	6a03      	ldr	r3, [r0, #32]
 8007f32:	b90b      	cbnz	r3, 8007f38 <_vfiprintf_r+0x18>
 8007f34:	f7fe f94e 	bl	80061d4 <__sinit>
 8007f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f3a:	07d9      	lsls	r1, r3, #31
 8007f3c:	d405      	bmi.n	8007f4a <_vfiprintf_r+0x2a>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	059a      	lsls	r2, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_vfiprintf_r+0x2a>
 8007f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f46:	f7fe fab0 	bl	80064aa <__retarget_lock_acquire_recursive>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	071b      	lsls	r3, r3, #28
 8007f4e:	d501      	bpl.n	8007f54 <_vfiprintf_r+0x34>
 8007f50:	692b      	ldr	r3, [r5, #16]
 8007f52:	b99b      	cbnz	r3, 8007f7c <_vfiprintf_r+0x5c>
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f93a 	bl	80081d0 <__swsetup_r>
 8007f5c:	b170      	cbz	r0, 8007f7c <_vfiprintf_r+0x5c>
 8007f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f60:	07dc      	lsls	r4, r3, #31
 8007f62:	d504      	bpl.n	8007f6e <_vfiprintf_r+0x4e>
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	b01d      	add	sp, #116	; 0x74
 8007f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	0598      	lsls	r0, r3, #22
 8007f72:	d4f7      	bmi.n	8007f64 <_vfiprintf_r+0x44>
 8007f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f76:	f7fe fa99 	bl	80064ac <__retarget_lock_release_recursive>
 8007f7a:	e7f3      	b.n	8007f64 <_vfiprintf_r+0x44>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f80:	2320      	movs	r3, #32
 8007f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f8a:	2330      	movs	r3, #48	; 0x30
 8007f8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008140 <_vfiprintf_r+0x220>
 8007f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f94:	f04f 0901 	mov.w	r9, #1
 8007f98:	4623      	mov	r3, r4
 8007f9a:	469a      	mov	sl, r3
 8007f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa0:	b10a      	cbz	r2, 8007fa6 <_vfiprintf_r+0x86>
 8007fa2:	2a25      	cmp	r2, #37	; 0x25
 8007fa4:	d1f9      	bne.n	8007f9a <_vfiprintf_r+0x7a>
 8007fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8007faa:	d00b      	beq.n	8007fc4 <_vfiprintf_r+0xa4>
 8007fac:	465b      	mov	r3, fp
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffa1 	bl	8007efa <__sfputs_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f000 80a9 	beq.w	8008110 <_vfiprintf_r+0x1f0>
 8007fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc0:	445a      	add	r2, fp
 8007fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80a1 	beq.w	8008110 <_vfiprintf_r+0x1f0>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd8:	f10a 0a01 	add.w	sl, sl, #1
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fe6:	4654      	mov	r4, sl
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fee:	4854      	ldr	r0, [pc, #336]	; (8008140 <_vfiprintf_r+0x220>)
 8007ff0:	f7f8 f90e 	bl	8000210 <memchr>
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	b9d8      	cbnz	r0, 8008030 <_vfiprintf_r+0x110>
 8007ff8:	06d1      	lsls	r1, r2, #27
 8007ffa:	bf44      	itt	mi
 8007ffc:	2320      	movmi	r3, #32
 8007ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008002:	0713      	lsls	r3, r2, #28
 8008004:	bf44      	itt	mi
 8008006:	232b      	movmi	r3, #43	; 0x2b
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b2a      	cmp	r3, #42	; 0x2a
 8008012:	d015      	beq.n	8008040 <_vfiprintf_r+0x120>
 8008014:	9a07      	ldr	r2, [sp, #28]
 8008016:	4654      	mov	r4, sl
 8008018:	2000      	movs	r0, #0
 800801a:	f04f 0c0a 	mov.w	ip, #10
 800801e:	4621      	mov	r1, r4
 8008020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008024:	3b30      	subs	r3, #48	; 0x30
 8008026:	2b09      	cmp	r3, #9
 8008028:	d94d      	bls.n	80080c6 <_vfiprintf_r+0x1a6>
 800802a:	b1b0      	cbz	r0, 800805a <_vfiprintf_r+0x13a>
 800802c:	9207      	str	r2, [sp, #28]
 800802e:	e014      	b.n	800805a <_vfiprintf_r+0x13a>
 8008030:	eba0 0308 	sub.w	r3, r0, r8
 8008034:	fa09 f303 	lsl.w	r3, r9, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	46a2      	mov	sl, r4
 800803e:	e7d2      	b.n	8007fe6 <_vfiprintf_r+0xc6>
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	1d19      	adds	r1, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	9103      	str	r1, [sp, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfbb      	ittet	lt
 800804c:	425b      	neglt	r3, r3
 800804e:	f042 0202 	orrlt.w	r2, r2, #2
 8008052:	9307      	strge	r3, [sp, #28]
 8008054:	9307      	strlt	r3, [sp, #28]
 8008056:	bfb8      	it	lt
 8008058:	9204      	strlt	r2, [sp, #16]
 800805a:	7823      	ldrb	r3, [r4, #0]
 800805c:	2b2e      	cmp	r3, #46	; 0x2e
 800805e:	d10c      	bne.n	800807a <_vfiprintf_r+0x15a>
 8008060:	7863      	ldrb	r3, [r4, #1]
 8008062:	2b2a      	cmp	r3, #42	; 0x2a
 8008064:	d134      	bne.n	80080d0 <_vfiprintf_r+0x1b0>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	1d1a      	adds	r2, r3, #4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	9203      	str	r2, [sp, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	bfb8      	it	lt
 8008072:	f04f 33ff 	movlt.w	r3, #4294967295
 8008076:	3402      	adds	r4, #2
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008150 <_vfiprintf_r+0x230>
 800807e:	7821      	ldrb	r1, [r4, #0]
 8008080:	2203      	movs	r2, #3
 8008082:	4650      	mov	r0, sl
 8008084:	f7f8 f8c4 	bl	8000210 <memchr>
 8008088:	b138      	cbz	r0, 800809a <_vfiprintf_r+0x17a>
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	eba0 000a 	sub.w	r0, r0, sl
 8008090:	2240      	movs	r2, #64	; 0x40
 8008092:	4082      	lsls	r2, r0
 8008094:	4313      	orrs	r3, r2
 8008096:	3401      	adds	r4, #1
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809e:	4829      	ldr	r0, [pc, #164]	; (8008144 <_vfiprintf_r+0x224>)
 80080a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080a4:	2206      	movs	r2, #6
 80080a6:	f7f8 f8b3 	bl	8000210 <memchr>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d03f      	beq.n	800812e <_vfiprintf_r+0x20e>
 80080ae:	4b26      	ldr	r3, [pc, #152]	; (8008148 <_vfiprintf_r+0x228>)
 80080b0:	bb1b      	cbnz	r3, 80080fa <_vfiprintf_r+0x1da>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	3307      	adds	r3, #7
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	3308      	adds	r3, #8
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	443b      	add	r3, r7
 80080c2:	9309      	str	r3, [sp, #36]	; 0x24
 80080c4:	e768      	b.n	8007f98 <_vfiprintf_r+0x78>
 80080c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ca:	460c      	mov	r4, r1
 80080cc:	2001      	movs	r0, #1
 80080ce:	e7a6      	b.n	800801e <_vfiprintf_r+0xfe>
 80080d0:	2300      	movs	r3, #0
 80080d2:	3401      	adds	r4, #1
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	4619      	mov	r1, r3
 80080d8:	f04f 0c0a 	mov.w	ip, #10
 80080dc:	4620      	mov	r0, r4
 80080de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e2:	3a30      	subs	r2, #48	; 0x30
 80080e4:	2a09      	cmp	r2, #9
 80080e6:	d903      	bls.n	80080f0 <_vfiprintf_r+0x1d0>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0c6      	beq.n	800807a <_vfiprintf_r+0x15a>
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	e7c4      	b.n	800807a <_vfiprintf_r+0x15a>
 80080f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f4:	4604      	mov	r4, r0
 80080f6:	2301      	movs	r3, #1
 80080f8:	e7f0      	b.n	80080dc <_vfiprintf_r+0x1bc>
 80080fa:	ab03      	add	r3, sp, #12
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	462a      	mov	r2, r5
 8008100:	4b12      	ldr	r3, [pc, #72]	; (800814c <_vfiprintf_r+0x22c>)
 8008102:	a904      	add	r1, sp, #16
 8008104:	4630      	mov	r0, r6
 8008106:	f7fd fc13 	bl	8005930 <_printf_float>
 800810a:	4607      	mov	r7, r0
 800810c:	1c78      	adds	r0, r7, #1
 800810e:	d1d6      	bne.n	80080be <_vfiprintf_r+0x19e>
 8008110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008112:	07d9      	lsls	r1, r3, #31
 8008114:	d405      	bmi.n	8008122 <_vfiprintf_r+0x202>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	059a      	lsls	r2, r3, #22
 800811a:	d402      	bmi.n	8008122 <_vfiprintf_r+0x202>
 800811c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800811e:	f7fe f9c5 	bl	80064ac <__retarget_lock_release_recursive>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	065b      	lsls	r3, r3, #25
 8008126:	f53f af1d 	bmi.w	8007f64 <_vfiprintf_r+0x44>
 800812a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800812c:	e71c      	b.n	8007f68 <_vfiprintf_r+0x48>
 800812e:	ab03      	add	r3, sp, #12
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	462a      	mov	r2, r5
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <_vfiprintf_r+0x22c>)
 8008136:	a904      	add	r1, sp, #16
 8008138:	4630      	mov	r0, r6
 800813a:	f7fd fe9d 	bl	8005e78 <_printf_i>
 800813e:	e7e4      	b.n	800810a <_vfiprintf_r+0x1ea>
 8008140:	08008724 	.word	0x08008724
 8008144:	0800872e 	.word	0x0800872e
 8008148:	08005931 	.word	0x08005931
 800814c:	08007efb 	.word	0x08007efb
 8008150:	0800872a 	.word	0x0800872a

08008154 <__swbuf_r>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	460e      	mov	r6, r1
 8008158:	4614      	mov	r4, r2
 800815a:	4605      	mov	r5, r0
 800815c:	b118      	cbz	r0, 8008166 <__swbuf_r+0x12>
 800815e:	6a03      	ldr	r3, [r0, #32]
 8008160:	b90b      	cbnz	r3, 8008166 <__swbuf_r+0x12>
 8008162:	f7fe f837 	bl	80061d4 <__sinit>
 8008166:	69a3      	ldr	r3, [r4, #24]
 8008168:	60a3      	str	r3, [r4, #8]
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	071a      	lsls	r2, r3, #28
 800816e:	d525      	bpl.n	80081bc <__swbuf_r+0x68>
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	b31b      	cbz	r3, 80081bc <__swbuf_r+0x68>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	6922      	ldr	r2, [r4, #16]
 8008178:	1a98      	subs	r0, r3, r2
 800817a:	6963      	ldr	r3, [r4, #20]
 800817c:	b2f6      	uxtb	r6, r6
 800817e:	4283      	cmp	r3, r0
 8008180:	4637      	mov	r7, r6
 8008182:	dc04      	bgt.n	800818e <__swbuf_r+0x3a>
 8008184:	4621      	mov	r1, r4
 8008186:	4628      	mov	r0, r5
 8008188:	f7ff fdc2 	bl	8007d10 <_fflush_r>
 800818c:	b9e0      	cbnz	r0, 80081c8 <__swbuf_r+0x74>
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	3b01      	subs	r3, #1
 8008192:	60a3      	str	r3, [r4, #8]
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	701e      	strb	r6, [r3, #0]
 800819c:	6962      	ldr	r2, [r4, #20]
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d004      	beq.n	80081ae <__swbuf_r+0x5a>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	07db      	lsls	r3, r3, #31
 80081a8:	d506      	bpl.n	80081b8 <__swbuf_r+0x64>
 80081aa:	2e0a      	cmp	r6, #10
 80081ac:	d104      	bne.n	80081b8 <__swbuf_r+0x64>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f7ff fdad 	bl	8007d10 <_fflush_r>
 80081b6:	b938      	cbnz	r0, 80081c8 <__swbuf_r+0x74>
 80081b8:	4638      	mov	r0, r7
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	4621      	mov	r1, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 f806 	bl	80081d0 <__swsetup_r>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d0d5      	beq.n	8008174 <__swbuf_r+0x20>
 80081c8:	f04f 37ff 	mov.w	r7, #4294967295
 80081cc:	e7f4      	b.n	80081b8 <__swbuf_r+0x64>
	...

080081d0 <__swsetup_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4b2a      	ldr	r3, [pc, #168]	; (800827c <__swsetup_r+0xac>)
 80081d4:	4605      	mov	r5, r0
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	460c      	mov	r4, r1
 80081da:	b118      	cbz	r0, 80081e4 <__swsetup_r+0x14>
 80081dc:	6a03      	ldr	r3, [r0, #32]
 80081de:	b90b      	cbnz	r3, 80081e4 <__swsetup_r+0x14>
 80081e0:	f7fd fff8 	bl	80061d4 <__sinit>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081ea:	0718      	lsls	r0, r3, #28
 80081ec:	d422      	bmi.n	8008234 <__swsetup_r+0x64>
 80081ee:	06d9      	lsls	r1, r3, #27
 80081f0:	d407      	bmi.n	8008202 <__swsetup_r+0x32>
 80081f2:	2309      	movs	r3, #9
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	e034      	b.n	800826c <__swsetup_r+0x9c>
 8008202:	0758      	lsls	r0, r3, #29
 8008204:	d512      	bpl.n	800822c <__swsetup_r+0x5c>
 8008206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008208:	b141      	cbz	r1, 800821c <__swsetup_r+0x4c>
 800820a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800820e:	4299      	cmp	r1, r3
 8008210:	d002      	beq.n	8008218 <__swsetup_r+0x48>
 8008212:	4628      	mov	r0, r5
 8008214:	f7fe ffd6 	bl	80071c4 <_free_r>
 8008218:	2300      	movs	r3, #0
 800821a:	6363      	str	r3, [r4, #52]	; 0x34
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	2300      	movs	r3, #0
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f043 0308 	orr.w	r3, r3, #8
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b94b      	cbnz	r3, 800824c <__swsetup_r+0x7c>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800823e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008242:	d003      	beq.n	800824c <__swsetup_r+0x7c>
 8008244:	4621      	mov	r1, r4
 8008246:	4628      	mov	r0, r5
 8008248:	f000 f840 	bl	80082cc <__smakebuf_r>
 800824c:	89a0      	ldrh	r0, [r4, #12]
 800824e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008252:	f010 0301 	ands.w	r3, r0, #1
 8008256:	d00a      	beq.n	800826e <__swsetup_r+0x9e>
 8008258:	2300      	movs	r3, #0
 800825a:	60a3      	str	r3, [r4, #8]
 800825c:	6963      	ldr	r3, [r4, #20]
 800825e:	425b      	negs	r3, r3
 8008260:	61a3      	str	r3, [r4, #24]
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	b943      	cbnz	r3, 8008278 <__swsetup_r+0xa8>
 8008266:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800826a:	d1c4      	bne.n	80081f6 <__swsetup_r+0x26>
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	0781      	lsls	r1, r0, #30
 8008270:	bf58      	it	pl
 8008272:	6963      	ldrpl	r3, [r4, #20]
 8008274:	60a3      	str	r3, [r4, #8]
 8008276:	e7f4      	b.n	8008262 <__swsetup_r+0x92>
 8008278:	2000      	movs	r0, #0
 800827a:	e7f7      	b.n	800826c <__swsetup_r+0x9c>
 800827c:	20000064 	.word	0x20000064

08008280 <__swhatbuf_r>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	460c      	mov	r4, r1
 8008284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008288:	2900      	cmp	r1, #0
 800828a:	b096      	sub	sp, #88	; 0x58
 800828c:	4615      	mov	r5, r2
 800828e:	461e      	mov	r6, r3
 8008290:	da0d      	bge.n	80082ae <__swhatbuf_r+0x2e>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008298:	f04f 0100 	mov.w	r1, #0
 800829c:	bf0c      	ite	eq
 800829e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80082a2:	2340      	movne	r3, #64	; 0x40
 80082a4:	2000      	movs	r0, #0
 80082a6:	6031      	str	r1, [r6, #0]
 80082a8:	602b      	str	r3, [r5, #0]
 80082aa:	b016      	add	sp, #88	; 0x58
 80082ac:	bd70      	pop	{r4, r5, r6, pc}
 80082ae:	466a      	mov	r2, sp
 80082b0:	f000 f848 	bl	8008344 <_fstat_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	dbec      	blt.n	8008292 <__swhatbuf_r+0x12>
 80082b8:	9901      	ldr	r1, [sp, #4]
 80082ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80082be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80082c2:	4259      	negs	r1, r3
 80082c4:	4159      	adcs	r1, r3
 80082c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ca:	e7eb      	b.n	80082a4 <__swhatbuf_r+0x24>

080082cc <__smakebuf_r>:
 80082cc:	898b      	ldrh	r3, [r1, #12]
 80082ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d0:	079d      	lsls	r5, r3, #30
 80082d2:	4606      	mov	r6, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	d507      	bpl.n	80082e8 <__smakebuf_r+0x1c>
 80082d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	2301      	movs	r3, #1
 80082e2:	6163      	str	r3, [r4, #20]
 80082e4:	b002      	add	sp, #8
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	ab01      	add	r3, sp, #4
 80082ea:	466a      	mov	r2, sp
 80082ec:	f7ff ffc8 	bl	8008280 <__swhatbuf_r>
 80082f0:	9900      	ldr	r1, [sp, #0]
 80082f2:	4605      	mov	r5, r0
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7fd f9ef 	bl	80056d8 <_malloc_r>
 80082fa:	b948      	cbnz	r0, 8008310 <__smakebuf_r+0x44>
 80082fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008300:	059a      	lsls	r2, r3, #22
 8008302:	d4ef      	bmi.n	80082e4 <__smakebuf_r+0x18>
 8008304:	f023 0303 	bic.w	r3, r3, #3
 8008308:	f043 0302 	orr.w	r3, r3, #2
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	e7e3      	b.n	80082d8 <__smakebuf_r+0xc>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	6020      	str	r0, [r4, #0]
 8008314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	9b00      	ldr	r3, [sp, #0]
 800831c:	6163      	str	r3, [r4, #20]
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	6120      	str	r0, [r4, #16]
 8008322:	b15b      	cbz	r3, 800833c <__smakebuf_r+0x70>
 8008324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008328:	4630      	mov	r0, r6
 800832a:	f000 f81d 	bl	8008368 <_isatty_r>
 800832e:	b128      	cbz	r0, 800833c <__smakebuf_r+0x70>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	f043 0301 	orr.w	r3, r3, #1
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	431d      	orrs	r5, r3
 8008340:	81a5      	strh	r5, [r4, #12]
 8008342:	e7cf      	b.n	80082e4 <__smakebuf_r+0x18>

08008344 <_fstat_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	; (8008364 <_fstat_r+0x20>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	f7fa fc72 	bl	8002c3a <_fstat>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d102      	bne.n	8008360 <_fstat_r+0x1c>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	b103      	cbz	r3, 8008360 <_fstat_r+0x1c>
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	2000056c 	.word	0x2000056c

08008368 <_isatty_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d06      	ldr	r5, [pc, #24]	; (8008384 <_isatty_r+0x1c>)
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	f7fa fc71 	bl	8002c5a <_isatty>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_isatty_r+0x1a>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_isatty_r+0x1a>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	2000056c 	.word	0x2000056c

08008388 <_init>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr

08008394 <_fini>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	bf00      	nop
 8008398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839a:	bc08      	pop	{r3}
 800839c:	469e      	mov	lr, r3
 800839e:	4770      	bx	lr
