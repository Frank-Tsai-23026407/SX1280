
OBJ_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08009028  08009028  00019028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800952c  0800952c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009534  08009534  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001d8  08009718  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08009718  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ce0  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000408b  00000000  00000000  00042f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  00046fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101f  00000000  00000000  00048478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d337  00000000  00000000  00049497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001978c  00000000  00000000  000767ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001012aa  00000000  00000000  0008ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b08  00000000  00000000  00191204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00197d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009010 	.word	0x08009010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009010 	.word	0x08009010

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
		return 0;
 8000fdc:	2300      	movs	r3, #0
	}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 8000fea:	b590      	push	{r4, r7, lr}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3344      	adds	r3, #68	; 0x44
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f240 1153 	movw	r1, #339	; 0x153
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	4798      	blx	r3
 8001002:	4603      	mov	r3, r0
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21c      	sxth	r4, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3344      	adds	r3, #68	; 0x44
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
 8001018:	4603      	mov	r3, r0
 800101a:	b21b      	sxth	r3, r3
 800101c:	4323      	orrs	r3, r4
 800101e:	b21b      	sxth	r3, r3
 8001020:	b29b      	uxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}

0800102a <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3334      	adds	r3, #52	; 0x34
 800103c:	681c      	ldr	r4, [r3, #0]
 800103e:	f107 020f 	add.w	r2, r7, #15
 8001042:	2301      	movs	r3, #1
 8001044:	21c0      	movs	r1, #192	; 0xc0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	47a0      	blx	r4
	status.Value = stat;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	733b      	strb	r3, [r7, #12]
	return( status );
 800104e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3330      	adds	r3, #48	; 0x30
 8001084:	681c      	ldr	r4, [r3, #0]
 8001086:	1cfa      	adds	r2, r7, #3
 8001088:	2301      	movs	r3, #1
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d104      	bne.n	80010a0 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2202      	movs	r2, #2
 800109a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 800109e:	e003      	b.n	80010a8 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <_ZN6SX128x5SetRxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_TX, buf, 3 );
	OperatingMode = MODE_TX;
}

void SX128x::SetRx(TickTime_t timeout )
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 80010ba:	783b      	ldrb	r3, [r7, #0]
 80010bc:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	73bb      	strb	r3, [r7, #14]
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
//	}

	HalPostTx();
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3314      	adds	r3, #20
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
	HalPreRx();
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3310      	adds	r3, #16
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	4798      	blx	r3
	WriteCommand( RADIO_SET_RX, buf, 3 );
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3330      	adds	r3, #48	; 0x30
 80010ec:	681c      	ldr	r4, [r3, #0]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	2303      	movs	r3, #3
 80010f4:	2182      	movs	r1, #130	; 0x82
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	47a0      	blx	r4
	OperatingMode = MODE_RX;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2205      	movs	r2, #5
 80010fe:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}

0800110a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 800110a:	b590      	push	{r4, r7, lr}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8001116:	78fa      	ldrb	r2, [r7, #3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3330      	adds	r3, #48	; 0x30
 8001124:	681c      	ldr	r4, [r3, #0]
 8001126:	1cfa      	adds	r2, r7, #3
 8001128:	2301      	movs	r3, #1
 800112a:	218a      	movs	r1, #138	; 0x8a
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	47a0      	blx	r4
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}

08001138 <_ZN6SX128x13GetPacketTypeEb>:

SX128x::RadioPacketTypes_t SX128x::GetPacketType(bool returnLocalCopy )
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
	RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001144:	230f      	movs	r3, #15
 8001146:	73fb      	strb	r3, [r7, #15]
	if (returnLocalCopy == false )
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d114      	bne.n	8001178 <_ZN6SX128x13GetPacketTypeEb+0x40>
	{
		ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3334      	adds	r3, #52	; 0x34
 8001154:	681c      	ldr	r4, [r3, #0]
 8001156:	f107 020f 	add.w	r2, r7, #15
 800115a:	2301      	movs	r3, #1
 800115c:	2103      	movs	r1, #3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	47a0      	blx	r4
		if (this->PacketType != packetType )
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	429a      	cmp	r2, r3
 800116c:	d008      	beq.n	8001180 <_ZN6SX128x13GetPacketTypeEb+0x48>
		{
			this->PacketType = packetType;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001176:	e003      	b.n	8001180 <_ZN6SX128x13GetPacketTypeEb+0x48>
		}
	}
	else
	{
		packetType = this->PacketType;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800117e:	73fb      	strb	r3, [r7, #15]
	}
	return packetType;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}

0800118a <_ZN6SX128x14SetRfFrequencyEm>:

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff f9b3 	bl	8000504 <__aeabi_ui2d>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011a4:	f7ff fb52 	bl	800084c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fcfa 	bl	8000ba8 <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3330      	adds	r3, #48	; 0x30
 80011d4:	681c      	ldr	r4, [r3, #0]
 80011d6:	f107 0208 	add.w	r2, r7, #8
 80011da:	2303      	movs	r3, #3
 80011dc:	2186      	movs	r1, #134	; 0x86
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	47a0      	blx	r4
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}

080011ea <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80011ea:	b590      	push	{r4, r7, lr}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
 80011f6:	4613      	mov	r3, r2
 80011f8:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 80011fe:	78bb      	ldrb	r3, [r7, #2]
 8001200:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3330      	adds	r3, #48	; 0x30
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	2302      	movs	r3, #2
 8001210:	218f      	movs	r1, #143	; 0x8f
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	47a0      	blx	r4
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
	...

08001220 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d005      	beq.n	8001244 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff63 	bl	800110a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d857      	bhi.n	80012fc <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 800124c:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	08001295 	.word	0x08001295
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012a9 	.word	0x080012a9
 8001260:	080012c7 	.word	0x080012c7
 8001264:	080012db 	.word	0x080012db
 8001268:	080012fd 	.word	0x080012fd
 800126c:	080012fd 	.word	0x080012fd
 8001270:	080012fd 	.word	0x080012fd
 8001274:	080012fd 	.word	0x080012fd
 8001278:	080012fd 	.word	0x080012fd
 800127c:	080012fd 	.word	0x080012fd
 8001280:	080012fd 	.word	0x080012fd
 8001284:	080012fd 	.word	0x080012fd
 8001288:	080012fd 	.word	0x080012fd
 800128c:	080012fd 	.word	0x080012fd
 8001290:	080012ef 	.word	0x080012ef
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	785b      	ldrb	r3, [r3, #1]
 8001298:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	73bb      	strb	r3, [r7, #14]
			break;
 80012a6:	e029      	b.n	80012fc <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	795b      	ldrb	r3, [r3, #5]
 80012b2:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	799b      	ldrb	r3, [r3, #6]
 80012b8:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	795a      	ldrb	r2, [r3, #5]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 80012c4:	e01a      	b.n	80012fc <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	79db      	ldrb	r3, [r3, #7]
 80012ca:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	7a1b      	ldrb	r3, [r3, #8]
 80012d0:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	7a5b      	ldrb	r3, [r3, #9]
 80012d6:	73bb      	strb	r3, [r7, #14]
			break;
 80012d8:	e010      	b.n	80012fc <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7a9b      	ldrb	r3, [r3, #10]
 80012de:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	7adb      	ldrb	r3, [r3, #11]
 80012e4:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	7b1b      	ldrb	r3, [r3, #12]
 80012ea:	73bb      	strb	r3, [r7, #14]
			break;
 80012ec:	e006      	b.n	80012fc <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73bb      	strb	r3, [r7, #14]
			break;
 80012fa:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3330      	adds	r3, #48	; 0x30
 8001302:	681c      	ldr	r4, [r3, #0]
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	2303      	movs	r3, #3
 800130a:	218b      	movs	r1, #139	; 0x8b
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	47a0      	blx	r4
	CurrentModParams = modParams;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	33ab      	adds	r3, #171	; 0xab
 8001316:	6814      	ldr	r4, [r2, #0]
 8001318:	6850      	ldr	r0, [r2, #4]
 800131a:	6891      	ldr	r1, [r2, #8]
 800131c:	601c      	str	r4, [r3, #0]
 800131e:	6058      	str	r0, [r3, #4]
 8001320:	6099      	str	r1, [r3, #8]
 8001322:	7b12      	ldrb	r2, [r2, #12]
 8001324:	731a      	strb	r2, [r3, #12]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	bf00      	nop

08001330 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d005      	beq.n	8001354 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fedb 	bl	800110a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	f200 8085 	bhi.w	8001468 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	080013a5 	.word	0x080013a5
 8001368:	080013d1 	.word	0x080013d1
 800136c:	080013d1 	.word	0x080013d1
 8001370:	080013f9 	.word	0x080013f9
 8001374:	08001425 	.word	0x08001425
 8001378:	08001469 	.word	0x08001469
 800137c:	08001469 	.word	0x08001469
 8001380:	08001469 	.word	0x08001469
 8001384:	08001469 	.word	0x08001469
 8001388:	08001469 	.word	0x08001469
 800138c:	08001469 	.word	0x08001469
 8001390:	08001469 	.word	0x08001469
 8001394:	08001469 	.word	0x08001469
 8001398:	08001469 	.word	0x08001469
 800139c:	08001469 	.word	0x08001469
 80013a0:	0800144b 	.word	0x0800144b
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	795b      	ldrb	r3, [r3, #5]
 80013c0:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	799b      	ldrb	r3, [r3, #6]
 80013c6:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	79db      	ldrb	r3, [r3, #7]
 80013cc:	73bb      	strb	r3, [r7, #14]
			break;
 80013ce:	e04b      	b.n	8001468 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	7a1b      	ldrb	r3, [r3, #8]
 80013d4:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7a5b      	ldrb	r3, [r3, #9]
 80013da:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	7a9b      	ldrb	r3, [r3, #10]
 80013e0:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	7adb      	ldrb	r3, [r3, #11]
 80013e6:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7b1b      	ldrb	r3, [r3, #12]
 80013ec:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73bb      	strb	r3, [r7, #14]
			break;
 80013f6:	e037      	b.n	8001468 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	7b5b      	ldrb	r3, [r3, #13]
 80013fc:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7b9b      	ldrb	r3, [r3, #14]
 8001402:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	7bdb      	ldrb	r3, [r3, #15]
 8001408:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7c1b      	ldrb	r3, [r3, #16]
 800140e:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	7c5b      	ldrb	r3, [r3, #17]
 8001414:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	7c9b      	ldrb	r3, [r3, #18]
 800141a:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	7cdb      	ldrb	r3, [r3, #19]
 8001420:	73bb      	strb	r3, [r7, #14]
			break;
 8001422:	e021      	b.n	8001468 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	7d1b      	ldrb	r3, [r3, #20]
 8001428:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	7d5b      	ldrb	r3, [r3, #21]
 800142e:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	7d9b      	ldrb	r3, [r3, #22]
 8001434:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	7ddb      	ldrb	r3, [r3, #23]
 800143a:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	73bb      	strb	r3, [r7, #14]
			break;
 8001448:	e00e      	b.n	8001468 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73bb      	strb	r3, [r7, #14]
			break;
 8001466:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3330      	adds	r3, #48	; 0x30
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	f107 0208 	add.w	r2, r7, #8
 8001474:	2307      	movs	r3, #7
 8001476:	218c      	movs	r1, #140	; 0x8c
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001484:	4615      	mov	r5, r2
 8001486:	6828      	ldr	r0, [r5, #0]
 8001488:	6869      	ldr	r1, [r5, #4]
 800148a:	68aa      	ldr	r2, [r5, #8]
 800148c:	68eb      	ldr	r3, [r5, #12]
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001490:	6928      	ldr	r0, [r5, #16]
 8001492:	6969      	ldr	r1, [r5, #20]
 8001494:	c403      	stmia	r4!, {r0, r1}
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop

080014a0 <_ZN6SX128x17GetRxBufferStatusEPhS0_>:
{
	this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX128x::GetRxBufferStatus(uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	uint8_t status[2];

	ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3334      	adds	r3, #52	; 0x34
 80014b2:	681c      	ldr	r4, [r3, #0]
 80014b4:	f107 0214 	add.w	r2, r7, #20
 80014b8:	2302      	movs	r3, #2
 80014ba:	2117      	movs	r1, #23
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	47a0      	blx	r4

	// In case of LORA fixed header, the rxPayloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if (( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 80014c0:	2101      	movs	r1, #1
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff fe38 	bl	8001138 <_ZN6SX128x13GetPacketTypeEb>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10e      	bne.n	80014ec <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4c>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3344      	adds	r3, #68	; 0x44
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f640 1103 	movw	r1, #2307	; 0x903
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	4798      	blx	r3
 80014de:	4603      	mov	r3, r0
 80014e0:	09db      	lsrs	r3, r3, #7
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4c>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4e>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x6c>
	{
		*rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3344      	adds	r3, #68	; 0x44
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f640 1101 	movw	r1, #2305	; 0x901
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	4798      	blx	r3
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	e014      	b.n	8001536 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x96>
	}
	else if (this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 800150c:	2101      	movs	r1, #1
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff fe12 	bl	8001138 <_ZN6SX128x13GetPacketTypeEb>
 8001514:	4603      	mov	r3, r0
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x90>
	{
		// In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
		// so it is added there
		*rxPayloadLength = status[0] + 2;
 8001524:	7d3b      	ldrb	r3, [r7, #20]
 8001526:	3302      	adds	r3, #2
 8001528:	b2da      	uxtb	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e002      	b.n	8001536 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x96>
	}
	else
	{
		*rxPayloadLength = status[0];
 8001530:	7d3a      	ldrb	r2, [r7, #20]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	701a      	strb	r2, [r3, #0]
	}

	*rxStartBufferPointer = status[1];
 8001536:	7d7a      	ldrb	r2, [r7, #21]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	701a      	strb	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	4608      	mov	r0, r1
 800154e:	4611      	mov	r1, r2
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	817b      	strh	r3, [r7, #10]
 8001556:	460b      	mov	r3, r1
 8001558:	813b      	strh	r3, [r7, #8]
 800155a:	4613      	mov	r3, r2
 800155c:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800155e:	897b      	ldrh	r3, [r7, #10]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001578:	893b      	ldrh	r3, [r7, #8]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800158e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29b      	uxth	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001598:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800159a:	b2db      	uxtb	r3, r3
 800159c:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3330      	adds	r3, #48	; 0x30
 80015a4:	681c      	ldr	r4, [r3, #0]
 80015a6:	f107 0210 	add.w	r2, r7, #16
 80015aa:	2308      	movs	r3, #8
 80015ac:	218d      	movs	r1, #141	; 0x8d
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	47a0      	blx	r4
}
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}

080015ba <_ZN6SX128x14ClearIrqStatusEt>:
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
	return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 80015ba:	b590      	push	{r4, r7, lr}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	681c      	ldr	r4, [r3, #0]
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	2302      	movs	r3, #2
 80015e4:	2197      	movs	r1, #151	; 0x97
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	47a0      	blx	r4
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}

080015f2 <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 80015f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
}
 8001602:	466b      	mov	r3, sp
 8001604:	461e      	mov	r6, r3
	uint8_t useless[size];
 8001606:	88f9      	ldrh	r1, [r7, #6]
 8001608:	460b      	mov	r3, r1
 800160a:	3b01      	subs	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	b28b      	uxth	r3, r1
 8001610:	2200      	movs	r2, #0
 8001612:	4698      	mov	r8, r3
 8001614:	4691      	mov	r9, r2
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800162a:	b28b      	uxth	r3, r1
 800162c:	2200      	movs	r2, #0
 800162e:	461c      	mov	r4, r3
 8001630:	4615      	mov	r5, r2
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	00eb      	lsls	r3, r5, #3
 800163c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001640:	00e2      	lsls	r2, r4, #3
 8001642:	460b      	mov	r3, r1
 8001644:	3307      	adds	r3, #7
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	ebad 0d03 	sub.w	sp, sp, r3
 800164e:	466b      	mov	r3, sp
 8001650:	3300      	adds	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3308      	adds	r3, #8
 800165a:	681c      	ldr	r4, [r3, #0]
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	47a0      	blx	r4
 8001666:	46b5      	mov	sp, r6
}
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001672 <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY));
 800167a:	bf00      	nop
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2101      	movs	r1, #1
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f1      	bne.n	800167c <_ZN6SX128x10WaitOnBusyEv+0xa>
//	HAL_Delay(1);
//	for(int i = 0; i < 100; i++);
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 80016aa:	e002      	b.n	80016b2 <_ZN6SX128x14WaitOnBusyLongEv+0x10>
		HAL_Delay(10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f001 fb6f 	bl	8002d90 <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <_ZN6SX128x14WaitOnBusyLongEv+0xa>
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
	HAL_Delay(10);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f001 fb4d 	bl	8002d90 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3304      	adds	r3, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
	HAL_Delay(10);
 8001706:	200a      	movs	r0, #10
 8001708:	f001 fb42 	bl	8002d90 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3304      	adds	r3, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
	HAL_Delay(10);
 800171c:	200a      	movs	r0, #10
 800171e:	f001 fb37 	bl	8002d90 <HAL_Delay>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2202      	movs	r2, #2
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff57 	bl	80015f2 <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffac 	bl	80016a2 <_ZN6SX128x14WaitOnBusyLongEv>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	461a      	mov	r2, r3
 800175e:	460b      	mov	r3, r1
 8001760:	72fb      	strb	r3, [r7, #11]
 8001762:	4613      	mov	r3, r2
 8001764:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 8001766:	893b      	ldrh	r3, [r7, #8]
 8001768:	3301      	adds	r3, #1
 800176a:	3307      	adds	r3, #7
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	ebad 0d03 	sub.w	sp, sp, r3
 8001774:	466b      	mov	r3, sp
 8001776:	3307      	adds	r3, #7
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	7afa      	ldrb	r2, [r7, #11]
 8001782:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	893a      	ldrh	r2, [r7, #8]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f005 fcd4 	bl	800713a <memcpy>

	WaitOnBusy();
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7ff ff6d 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 8001798:	893b      	ldrh	r3, [r7, #8]
 800179a:	3301      	adds	r3, #1
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff ff25 	bl	80015f2 <_ZN6SX128x11HalSpiWriteEPKht>
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	461a      	mov	r2, r3
 80017bc:	460b      	mov	r3, r1
 80017be:	72fb      	strb	r3, [r7, #11]
 80017c0:	4613      	mov	r3, r2
 80017c2:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 80017c4:	7afb      	ldrb	r3, [r7, #11]
 80017c6:	2bc0      	cmp	r3, #192	; 0xc0
 80017c8:	d11a      	bne.n	8001800 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	2100      	movs	r1, #0
 80017d0:	460a      	mov	r2, r1
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	460a      	mov	r2, r1
 80017d6:	709a      	strb	r2, [r3, #2]
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff ff48 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3308      	adds	r3, #8
 80017e8:	681c      	ldr	r4, [r3, #0]
 80017ea:	f107 0218 	add.w	r2, r7, #24
 80017ee:	f107 0114 	add.w	r1, r7, #20
 80017f2:	2303      	movs	r3, #3
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 80017f8:	7d3a      	ldrb	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 80017fe:	e035      	b.n	800186c <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 8001800:	893b      	ldrh	r3, [r7, #8]
 8001802:	3302      	adds	r3, #2
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3307      	adds	r3, #7
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	ebad 0d03 	sub.w	sp, sp, r3
 8001812:	466b      	mov	r3, sp
 8001814:	3307      	adds	r3, #7
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	3307      	adds	r3, #7
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	ebad 0d03 	sub.w	sp, sp, r3
 8001828:	466b      	mov	r3, sp
 800182a:	3307      	adds	r3, #7
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	461a      	mov	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	6a38      	ldr	r0, [r7, #32]
 800183a:	f005 fbaa 	bl	8006f92 <memset>
		buf_out[0] = opcode;
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	7afa      	ldrb	r2, [r7, #11]
 8001842:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff ff14 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3308      	adds	r3, #8
 8001850:	681c      	ldr	r4, [r3, #0]
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	b29b      	uxth	r3, r3
 8001856:	6a3a      	ldr	r2, [r7, #32]
 8001858:	69f9      	ldr	r1, [r7, #28]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3302      	adds	r3, #2
 8001862:	893a      	ldrh	r2, [r7, #8]
 8001864:	4619      	mov	r1, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f005 fc67 	bl	800713a <memcpy>
}
 800186c:	bf00      	nop
 800186e:	372c      	adds	r7, #44	; 0x2c
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	461a      	mov	r2, r3
 8001880:	460b      	mov	r3, r1
 8001882:	817b      	strh	r3, [r7, #10]
 8001884:	4613      	mov	r3, r2
 8001886:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	3303      	adds	r3, #3
 800188c:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3307      	adds	r3, #7
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	ebad 0d03 	sub.w	sp, sp, r3
 800189a:	466b      	mov	r3, sp
 800189c:	3307      	adds	r3, #7
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2218      	movs	r2, #24
 80018a8:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	3302      	adds	r3, #2
 80018bc:	897a      	ldrh	r2, [r7, #10]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3303      	adds	r3, #3
 80018c6:	893a      	ldrh	r2, [r7, #8]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f005 fc35 	bl	800713a <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fece 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	6939      	ldr	r1, [r7, #16]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff fe87 	bl	80015f2 <_ZN6SX128x11HalSpiWriteEPKht>
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3338      	adds	r3, #56	; 0x38
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	1c7a      	adds	r2, r7, #1
 8001906:	8879      	ldrh	r1, [r7, #2]
 8001908:	2301      	movs	r3, #1
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	47a0      	blx	r4
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001916:	b590      	push	{r4, r7, lr}
 8001918:	b089      	sub	sp, #36	; 0x24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	461a      	mov	r2, r3
 8001922:	460b      	mov	r3, r1
 8001924:	817b      	strh	r3, [r7, #10]
 8001926:	4613      	mov	r3, r2
 8001928:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 800192a:	893b      	ldrh	r3, [r7, #8]
 800192c:	3304      	adds	r3, #4
 800192e:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3307      	adds	r3, #7
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	ebad 0d03 	sub.w	sp, sp, r3
 800193c:	466b      	mov	r3, sp
 800193e:	3307      	adds	r3, #7
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3307      	adds	r3, #7
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	ebad 0d03 	sub.w	sp, sp, r3
 8001952:	466b      	mov	r3, sp
 8001954:	3307      	adds	r3, #7
 8001956:	08db      	lsrs	r3, r3, #3
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	461a      	mov	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	69b8      	ldr	r0, [r7, #24]
 8001964:	f005 fb15 	bl	8006f92 <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2219      	movs	r2, #25
 800196c:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 800196e:	897b      	ldrh	r3, [r7, #10]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b29a      	uxth	r2, r3
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	3301      	adds	r3, #1
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	3302      	adds	r3, #2
 8001980:	897a      	ldrh	r2, [r7, #10]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff fe73 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3308      	adds	r3, #8
 8001992:	681c      	ldr	r4, [r3, #0]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	b29b      	uxth	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	6979      	ldr	r1, [r7, #20]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3304      	adds	r3, #4
 80019a4:	893a      	ldrh	r2, [r7, #8]
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f005 fbc6 	bl	800713a <memcpy>
}
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}

080019b6 <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3340      	adds	r3, #64	; 0x40
 80019c8:	681c      	ldr	r4, [r3, #0]
 80019ca:	f107 020f 	add.w	r2, r7, #15
 80019ce:	8879      	ldrh	r1, [r7, #2]
 80019d0:	2301      	movs	r3, #1
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	47a0      	blx	r4
	return data;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	460b      	mov	r3, r1
 80019ee:	72fb      	strb	r3, [r7, #11]
 80019f0:	4613      	mov	r3, r2
 80019f2:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 80019f4:	7abb      	ldrb	r3, [r7, #10]
 80019f6:	3302      	adds	r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3307      	adds	r3, #7
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	ebad 0d03 	sub.w	sp, sp, r3
 8001a06:	466b      	mov	r3, sp
 8001a08:	3307      	adds	r3, #7
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	221a      	movs	r2, #26
 8001a14:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	7afa      	ldrb	r2, [r7, #11]
 8001a1c:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	3302      	adds	r3, #2
 8001a22:	7aba      	ldrb	r2, [r7, #10]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 fb87 	bl	800713a <memcpy>
	
	WaitOnBusy();
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff fe20 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	6939      	ldr	r1, [r7, #16]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fdd9 	bl	80015f2 <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001a40:	bf00      	nop
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	460b      	mov	r3, r1
 8001a56:	72fb      	strb	r3, [r7, #11]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 8001a5c:	7abb      	ldrb	r3, [r7, #10]
 8001a5e:	3303      	adds	r3, #3
 8001a60:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3307      	adds	r3, #7
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001a6e:	466b      	mov	r3, sp
 8001a70:	3307      	adds	r3, #7
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3307      	adds	r3, #7
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	ebad 0d03 	sub.w	sp, sp, r3
 8001a84:	466b      	mov	r3, sp
 8001a86:	3307      	adds	r3, #7
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	461a      	mov	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	69b8      	ldr	r0, [r7, #24]
 8001a96:	f005 fa7c 	bl	8006f92 <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	221b      	movs	r2, #27
 8001a9e:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	7afa      	ldrb	r2, [r7, #11]
 8001aa6:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fde2 	bl	8001672 <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	681c      	ldr	r4, [r3, #0]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	7aba      	ldrb	r2, [r7, #10]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f005 fb35 	bl	800713a <memcpy>
}
 8001ad0:	bf00      	nop
 8001ad2:	3724      	adds	r7, #36	; 0x24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_OBJ::CommonTransceiverSetting()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fac4 	bl	8001072 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fb0b 	bl	800110a <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff fb43 	bl	800118a <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb6d 	bl	80011ea <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7ff fb80 	bl	8001220 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f7ff fc00 	bl	8001330 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_ZN10SX128x_OBJ4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_OBJ::Init()
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	Reset();
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3328      	adds	r3, #40	; 0x28
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b56:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 8001b58:	f107 0210 	add.w	r2, r7, #16
 8001b5c:	f107 0114 	add.w	r1, r7, #20
 8001b60:	2302      	movs	r3, #2
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa7a 	bl	800205c <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>
	RadioStatus_t status;
	status = GetStatus();
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3358      	adds	r3, #88	; 0x58
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4610      	mov	r0, r2
 8001b74:	4798      	blx	r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 8001b7a:	7b3b      	ldrb	r3, [r7, #12]
 8001b7c:	f003 031c 	and.w	r3, r3, #28
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d001      	beq.n	8001b8a <_ZN10SX128x_OBJ4InitEv+0x52>
		return 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00b      	b.n	8001ba2 <_ZN10SX128x_OBJ4InitEv+0x6a>
	if(status.Fields.ChipMode != 0x03)
 8001b8a:	7b3b      	ldrb	r3, [r7, #12]
 8001b8c:	f023 031f 	bic.w	r3, r3, #31
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b60      	cmp	r3, #96	; 0x60
 8001b94:	d001      	beq.n	8001b9a <_ZN10SX128x_OBJ4InitEv+0x62>
		return 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e003      	b.n	8001ba2 <_ZN10SX128x_OBJ4InitEv+0x6a>

	CommonTransceiverSetting();
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff9c 	bl	8001ad8 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>
	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f964 	bl	8001e82 <_ZNSt8functionIFvvEEC1Ev>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f95f 	bl	8001e82 <_ZNSt8functionIFvvEEC1Ev>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3320      	adds	r3, #32
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f95a 	bl	8001e82 <_ZNSt8functionIFvvEEC1Ev>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3330      	adds	r3, #48	; 0x30
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f955 	bl	8001e82 <_ZNSt8functionIFvvEEC1Ev>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3340      	adds	r3, #64	; 0x40
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f950 	bl	8001e82 <_ZNSt8functionIFvvEEC1Ev>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3350      	adds	r3, #80	; 0x50
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f94b 	bl	8001e82 <_ZNSt8functionIFvvEEC1Ev>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3360      	adds	r3, #96	; 0x60
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 f95c 	bl	8001eae <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3370      	adds	r3, #112	; 0x70
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f96d 	bl	8001eda <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3380      	adds	r3, #128	; 0x80
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f97e 	bl	8001f06 <_ZNSt8functionIFvbEEC1Ev>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0000      	movs	r0, r0
	...

08001c18 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <_ZN6SX128xC1Ev+0x88>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	a31b      	add	r3, pc, #108	; (adr r3, 8001c98 <_ZN6SX128xC1Ev+0x80>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	741a      	strb	r2, [r3, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3e:	825a      	strh	r2, [r3, #18]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	751a      	strb	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	82da      	strh	r2, [r3, #22]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3318      	adds	r3, #24
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ffaa 	bl	8001baa <_ZN6SX128xUt0_C1Ev>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	220f      	movs	r2, #15
 8001c62:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	220a      	movs	r2, #10
 8001c6a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	33ab      	adds	r3, #171	; 0xab
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	731a      	strb	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	33b8      	adds	r3, #184	; 0xb8
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	615a      	str	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	4068cba8 	.word	0x4068cba8
 8001ca0:	080090b4 	.word	0x080090b4

08001ca4 <_ZN10SX128x_OBJC1Ev>:

SX128x_OBJ::SX128x_OBJ()
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ffb2 	bl	8001c18 <_ZN6SX128xC1Ev>
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <_ZN10SX128x_OBJC1Ev+0xb0>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	33d0      	adds	r3, #208	; 0xd0
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f005 f965 	bl	8006f92 <memset>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <_ZN10SX128x_OBJC1Ev+0xb4>)
 8001cf4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF7;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2270      	movs	r2, #112	; 0x70
 8001d04:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2218      	movs	r2, #24
 8001d0c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2240      	movs	r2, #64	; 0x40
 8001d2c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	220c      	movs	r2, #12
 8001d44:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08009118 	.word	0x08009118
 8001d58:	8f0d1800 	.word	0x8f0d1800

08001d5c <_ZN10SX128x_OBJ9RxSettingEv>:
	SendPayload(tx_sprt, PACKET_SIZE, t, 0x80);

}

void SX128x_OBJ::RxSetting()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	6078      	str	r0, [r7, #4]
//	SetTxParams(13, RADIO_RAMP_02_US);
//	InterruptSetting();
	SetDioIrqParams(0x4023, 0x0001, 0x0002, 0x4020);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f244 0320 	movw	r3, #16416	; 0x4020
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f244 0123 	movw	r1, #16419	; 0x4023
 8001d74:	f7ff fbe6 	bl	8001544 <_ZN6SX128x15SetDioIrqParamsEtttt>
//	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN10SX128x_OBJ10RxBlockingEPhh>:

uint8_t SX128x_OBJ::RxBlocking(uint8_t* data_in, uint8_t max_len)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b08b      	sub	sp, #44	; 0x2c
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	71fb      	strb	r3, [r7, #7]
	// set tx mode
	TickTime_t timeout;
	timeout.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	timeout.PeriodBaseCount = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	84fb      	strh	r3, [r7, #38]	; 0x26
	SetRx(timeout);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f987 	bl	80010b0 <_ZN6SX128x5SetRxENS_10TickTime_sE>

	// wait message
	// while(!HAL_GPIO_ReadPin(GPIOA, GPIO_Pin_8));
	uint8_t tx[7] = {};
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2100      	movs	r1, #0
 8001dac:	460a      	mov	r2, r1
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	460a      	mov	r2, r1
 8001db2:	709a      	strb	r2, [r3, #2]
	uint8_t rx[7] = {};
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	709a      	strb	r2, [r3, #2]
	while(1)
	{
		*(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	2215      	movs	r2, #21
 8001dcc:	601a      	str	r2, [r3, #0]
		HalSpiTransfer(rx, tx, 4);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	f107 021c 	add.w	r2, r7, #28
 8001dda:	f107 0114 	add.w	r1, r7, #20
 8001dde:	2304      	movs	r3, #4
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	47a0      	blx	r4
		if(rx[3] & 0x02) break;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d100      	bne.n	8001df0 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x70>
		*(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001dee:	e7ea      	b.n	8001dc6 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x46>
		if(rx[3] & 0x02) break;
 8001df0:	bf00      	nop
	}

	// GetPacketStatus
	*(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	221d      	movs	r2, #29
 8001df8:	601a      	str	r2, [r3, #0]
	*(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	3304      	adds	r3, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	HalSpiTransfer(rx, tx, 7);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3308      	adds	r3, #8
 8001e0a:	681c      	ldr	r4, [r3, #0]
 8001e0c:	f107 021c 	add.w	r2, r7, #28
 8001e10:	f107 0114 	add.w	r1, r7, #20
 8001e14:	2307      	movs	r3, #7
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	47a0      	blx	r4

	// ClrIrqStatus
	ClearIrqStatus(IRQ_RX_DONE);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbcb 	bl	80015ba <_ZN6SX128x14ClearIrqStatusEt>

	// GetRxBufferStatus
	uint8_t payload_length, rx_pointer;
	GetRxBufferStatus(&payload_length, &rx_pointer);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f107 0212 	add.w	r2, r7, #18
 8001e2a:	f107 0113 	add.w	r1, r7, #19
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fb36 	bl	80014a0 <_ZN6SX128x17GetRxBufferStatusEPhS0_>

	// ReadBuffer
	if(payload_length > max_len) return 0;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d201      	bcs.n	8001e40 <_ZN10SX128x_OBJ10RxBlockingEPhh+0xc0>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e009      	b.n	8001e54 <_ZN10SX128x_OBJ10RxBlockingEPhh+0xd4>
	ReadBuffer(rx_pointer, data_in, payload_length);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	334c      	adds	r3, #76	; 0x4c
 8001e48:	681c      	ldr	r4, [r3, #0]
 8001e4a:	7cb9      	ldrb	r1, [r7, #18]
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	47a0      	blx	r4

	// FrequencyError

	return payload_length;
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	372c      	adds	r7, #44	; 0x2c
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	6053      	str	r3, [r2, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	6053      	str	r3, [r2, #4]
 8001e94:	6093      	str	r3, [r2, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ffdf 	bl	8001e5c <_ZNSt14_Function_baseC1Ev>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	6053      	str	r3, [r2, #4]
 8001ec0:	6093      	str	r3, [r2, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ffc9 	bl	8001e5c <_ZNSt14_Function_baseC1Ev>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	6053      	str	r3, [r2, #4]
 8001eec:	6093      	str	r3, [r2, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ffb3 	bl	8001e5c <_ZNSt14_Function_baseC1Ev>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	6053      	str	r3, [r2, #4]
 8001f18:	6093      	str	r3, [r2, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff9d 	bl	8001e5c <_ZNSt14_Function_baseC1Ev>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4798      	blx	r3
    }
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE>:

#elif defined NUCLEO_L476
extern SPI_HandleTypeDef hspi1;

uint8_t SX128x_OBJ::HalGpioRead(GpioPinFunction_t func)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
	switch (func)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d820      	bhi.n	8001fac <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f85 	.word	0x08001f85
 8001f74:	08001f91 	.word	0x08001f91
 8001f78:	08001fa1 	.word	0x08001fa1
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	08001fa9 	.word	0x08001fa9
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001f88:	f001 f9b6 	bl	80032f8 <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	e00e      	b.n	8001fae <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8001f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f98:	f001 f9ae 	bl	80032f8 <HAL_GPIO_ReadPin>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	e006      	b.n	8001fae <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO1:
			return 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e004      	b.n	8001fae <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO2:
			return 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e002      	b.n	8001fae <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO3:
			return 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		default:
			return 0;
 8001fac:	2300      	movs	r3, #0
	}
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	48000800 	.word	0x48000800

08001fbc <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_OBJ::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	460a      	mov	r2, r1
 8001fc8:	70fa      	strb	r2, [r7, #3]
	switch (func)
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	2a04      	cmp	r2, #4
 8001fce:	d81b      	bhi.n	8002008 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
 8001fd0:	a101      	add	r1, pc, #4	; (adr r1, 8001fd8 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 8001fd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08001fed 	.word	0x08001fed
 8001fdc:	08001ff9 	.word	0x08001ff9
 8001fe0:	08002009 	.word	0x08002009
 8001fe4:	08002009 	.word	0x08002009
 8001fe8:	08002009 	.word	0x08002009
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 8001fec:	461a      	mov	r2, r3
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 8001ff2:	f001 f999 	bl	8003328 <HAL_GPIO_WritePin>
		break;
 8001ff6:	e008      	b.n	800200a <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002002:	f001 f991 	bl	8003328 <HAL_GPIO_WritePin>
		break;
 8002006:	e000      	b.n	800200a <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 8002008:	bf00      	nop
	}
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	48000800 	.word	0x48000800

08002018 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht>:

void SX128x_OBJ::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	807b      	strh	r3, [r7, #2]
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2140      	movs	r1, #64	; 0x40
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 800202c:	f001 f97c 	bl	8003328 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 10);
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	220a      	movs	r2, #10
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x40>)
 800203c:	f002 fd4f 	bl	8004ade <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_SET);
 8002040:	2201      	movs	r2, #1
 8002042:	2140      	movs	r1, #64	; 0x40
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 8002046:	f001 f96f 	bl	8003328 <HAL_GPIO_WritePin>
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	48000400 	.word	0x48000400
 8002058:	200001f4 	.word	0x200001f4

0800205c <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>:

void SX128x_OBJ::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	807b      	strh	r3, [r7, #2]
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
//	HAL_Delay(10);
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
//	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2140      	movs	r1, #64	; 0x40
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8002070:	f001 f95a 	bl	8003328 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f000 fe8b 	bl	8002d90 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 10);
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	220a      	movs	r2, #10
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x44>)
 8002086:	f002 fd2a 	bl	8004ade <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8002090:	f001 f94a 	bl	8003328 <HAL_GPIO_WritePin>
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	48000400 	.word	0x48000400
 80020a0:	200001f4 	.word	0x200001f4

080020a4 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff3f 	bl	8001f32 <_ZNSt14_Function_baseD1Ev>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff32 	bl	8001f32 <_ZNSt14_Function_baseD1Ev>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff25 	bl	8001f32 <_ZNSt14_Function_baseD1Ev>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_ZNSt8functionIFvbEED1Ev>:
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff18 	bl	8001f32 <_ZNSt14_Function_baseD1Ev>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN6SX128xUt0_D1Ev>:
	struct {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3380      	adds	r3, #128	; 0x80
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ffea 	bl	80020f2 <_ZNSt8functionIFvbEED1Ev>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3370      	adds	r3, #112	; 0x70
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ffd8 	bl	80020d8 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3360      	adds	r3, #96	; 0x60
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ffc6 	bl	80020be <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3350      	adds	r3, #80	; 0x50
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ffb4 	bl	80020a4 <_ZNSt8functionIFvvEED1Ev>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3340      	adds	r3, #64	; 0x40
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffaf 	bl	80020a4 <_ZNSt8functionIFvvEED1Ev>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3330      	adds	r3, #48	; 0x30
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ffaa 	bl	80020a4 <_ZNSt8functionIFvvEED1Ev>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3320      	adds	r3, #32
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ffa5 	bl	80020a4 <_ZNSt8functionIFvvEED1Ev>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3310      	adds	r3, #16
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ffa0 	bl	80020a4 <_ZNSt8functionIFvvEED1Ev>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff9c 	bl	80020a4 <_ZNSt8functionIFvvEED1Ev>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <_ZN6SX128xD1Ev+0x24>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3318      	adds	r3, #24
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffbe 	bl	800210c <_ZN6SX128xUt0_D1Ev>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	080090b4 	.word	0x080090b4

080021a0 <_ZN6SX128xD0Ev>:
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffe5 	bl	8002178 <_ZN6SX128xD1Ev>
 80021ae:	21d0      	movs	r1, #208	; 0xd0
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 f89c 	bl	80062ee <_ZdlPvj>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN10SX128x_OBJD1Ev>:

#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX

class SX128x_OBJ : public SX128x
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <_ZN10SX128x_OBJD1Ev+0x20>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffd1 	bl	8002178 <_ZN6SX128xD1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	08009118 	.word	0x08009118

080021e4 <_ZN10SX128x_OBJD0Ev>:
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_ZN10SX128x_OBJD1Ev>
 80021f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 f879 	bl	80062ee <_ZdlPvj>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b0c0      	sub	sp, #256	; 0x100
 800220c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220e:	f000 fd43 	bl	8002c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002212:	f000 f92d 	bl	8002470 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002216:	f000 fa63 	bl	80026e0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800221a:	f000 fa2d 	bl	8002678 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 800221e:	f000 f987 	bl	8002530 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8002222:	f000 f9c7 	bl	80025b4 <_ZL12MX_TIM1_Initv>
    int received;
    // for status
    uint8_t re;

    // print
    uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 8002226:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800222a:	4989      	ldr	r1, [pc, #548]	; (8002450 <main+0x248>)
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fe4d 	bl	8006ecc <siprintf>
 8002232:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800223a:	b29a      	uxth	r2, r3
 800223c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002240:	2364      	movs	r3, #100	; 0x64
 8002242:	4884      	ldr	r0, [pc, #528]	; (8002454 <main+0x24c>)
 8002244:	f003 fafc 	bl	8005840 <HAL_UART_Transmit>

    // initialize and transceive setting
    re = sx1280.Init();
 8002248:	4883      	ldr	r0, [pc, #524]	; (8002458 <main+0x250>)
 800224a:	f7ff fc75 	bl	8001b38 <_ZN10SX128x_OBJ4InitEv>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    if (re == 0)
 8002254:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002258:	2b00      	cmp	r3, #0
 800225a:	d12f      	bne.n	80022bc <main+0xb4>
    {
        uart_buf_len = sprintf(uart_buf, "SX1280 Initialize success\r\n");
 800225c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002260:	497e      	ldr	r1, [pc, #504]	; (800245c <main+0x254>)
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fe32 	bl	8006ecc <siprintf>
 8002268:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800226c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002270:	b29a      	uxth	r2, r3
 8002272:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002276:	2364      	movs	r3, #100	; 0x64
 8002278:	4876      	ldr	r0, [pc, #472]	; (8002454 <main+0x24c>)
 800227a:	f003 fae1 	bl	8005840 <HAL_UART_Transmit>
        while (1)
            ;
    }

    // Rx setting
    sx1280.RxSetting();
 800227e:	4876      	ldr	r0, [pc, #472]	; (8002458 <main+0x250>)
 8002280:	f7ff fd6c 	bl	8001d5c <_ZN10SX128x_OBJ9RxSettingEv>

    // receive
    rx_length = sx1280.RxBlocking(rx_buffer, 8);
 8002284:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002288:	2208      	movs	r2, #8
 800228a:	4619      	mov	r1, r3
 800228c:	4872      	ldr	r0, [pc, #456]	; (8002458 <main+0x250>)
 800228e:	f7ff fd77 	bl	8001d80 <_ZN10SX128x_OBJ10RxBlockingEPhh>
 8002292:	4603      	mov	r3, r0
 8002294:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    int time_temp = HAL_GetTick();
 8002298:	f000 fd6e 	bl	8002d78 <HAL_GetTick>
 800229c:	4603      	mov	r3, r0
 800229e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t received_arr[100] = {0};
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2260      	movs	r2, #96	; 0x60
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 fe6f 	bl	8006f92 <memset>
    int pre_get = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80022ba:	e011      	b.n	80022e0 <main+0xd8>
        uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
 80022bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022c0:	4967      	ldr	r1, [pc, #412]	; (8002460 <main+0x258>)
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 fe02 	bl	8006ecc <siprintf>
 80022c8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80022cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	485e      	ldr	r0, [pc, #376]	; (8002454 <main+0x24c>)
 80022da:	f003 fab1 	bl	8005840 <HAL_UART_Transmit>
        while (1)
 80022de:	e7fe      	b.n	80022de <main+0xd6>
    uint8_t sum;
    float bps;
    while (1)
    {
        // receive
        rx_length = sx1280.RxBlocking(rx_buffer, 8);
 80022e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022e4:	2208      	movs	r2, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	485b      	ldr	r0, [pc, #364]	; (8002458 <main+0x250>)
 80022ea:	f7ff fd49 	bl	8001d80 <_ZN10SX128x_OBJ10RxBlockingEPhh>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
        received = rx_buffer[0] + (rx_buffer[1] << 8);
 80022f4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80022f8:	461a      	mov	r2, r3
 80022fa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4413      	add	r3, r2
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // print
        uart_buf_len = sprintf(uart_buf, "RX: %d %d\r\n", *(rx_buffer), *(rx_buffer + 1));
 8002306:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800230a:	461a      	mov	r2, r3
 800230c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002310:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002314:	4953      	ldr	r1, [pc, #332]	; (8002464 <main+0x25c>)
 8002316:	f004 fdd9 	bl	8006ecc <siprintf>
 800231a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
        HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800231e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002322:	b29a      	uxth	r2, r3
 8002324:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002328:	2364      	movs	r3, #100	; 0x64
 800232a:	484a      	ldr	r0, [pc, #296]	; (8002454 <main+0x24c>)
 800232c:	f003 fa88 	bl	8005840 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if (received < 100 && received >= 0) // valid
 8002330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002334:	2b63      	cmp	r3, #99	; 0x63
 8002336:	dcd3      	bgt.n	80022e0 <main+0xd8>
 8002338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800233c:	2b00      	cmp	r3, #0
 800233e:	dbcf      	blt.n	80022e0 <main+0xd8>
        {
            if (pre_get > received)
 8002340:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002348:	429a      	cmp	r2, r3
 800234a:	dd76      	ble.n	800243a <main+0x232>
            {
                time_temp = HAL_GetTick() - time_temp;
 800234c:	f000 fd14 	bl	8002d78 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                sum = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
                for (int i = 0; i < 100; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002368:	e010      	b.n	800238c <main+0x184>
                {
                    if (received_arr[i] == 1)
 800236a:	1d3a      	adds	r2, r7, #4
 800236c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d104      	bne.n	8002382 <main+0x17a>
                    {
                        sum++;
 8002378:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800237c:	3301      	adds	r3, #1
 800237e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
                for (int i = 0; i < 100; i++)
 8002382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002386:	3301      	adds	r3, #1
 8002388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800238c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002390:	2b63      	cmp	r3, #99	; 0x63
 8002392:	ddea      	ble.n	800236a <main+0x162>
                    }
                }
                bps = sum * 8 * 8 * 1000. / time_temp;
 8002394:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8c2 	bl	8000524 <__aeabi_i2d>
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <main+0x260>)
 80023a6:	f7fe f927 	bl	80005f8 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	461d      	mov	r5, r3
 80023b2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80023b6:	f7fe f8b5 	bl	8000524 <__aeabi_i2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fa43 	bl	800084c <__aeabi_ddiv>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fc0b 	bl	8000be8 <__aeabi_d2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                uart_buf_len = sprintf(uart_buf, "Bit Rate: %15.5f bps, sum: %03d\r\n", bps, sum);
 80023d8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80023dc:	f7fe f8b4 	bl	8000548 <__aeabi_f2d>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	f897 10ef 	ldrb.w	r1, [r7, #239]	; 0xef
 80023e8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80023ec:	9100      	str	r1, [sp, #0]
 80023ee:	491f      	ldr	r1, [pc, #124]	; (800246c <main+0x264>)
 80023f0:	f004 fd6c 	bl	8006ecc <siprintf>
 80023f4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
                HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002402:	2364      	movs	r3, #100	; 0x64
 8002404:	4813      	ldr	r0, [pc, #76]	; (8002454 <main+0x24c>)
 8002406:	f003 fa1b 	bl	8005840 <HAL_UART_Transmit>

                // end
                for (int i = 0; i < 100; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002410:	e00a      	b.n	8002428 <main+0x220>
                {
                    received_arr[i] = 0;
 8002412:	1d3a      	adds	r2, r7, #4
 8002414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002418:	4413      	add	r3, r2
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 100; i++)
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002422:	3301      	adds	r3, #1
 8002424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242c:	2b63      	cmp	r3, #99	; 0x63
 800242e:	ddf0      	ble.n	8002412 <main+0x20a>
                }
                time_temp = HAL_GetTick();
 8002430:	f000 fca2 	bl	8002d78 <HAL_GetTick>
 8002434:	4603      	mov	r3, r0
 8002436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            }
            pre_get = received;
 800243a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800243e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            received_arr[received] = 1;
 8002442:	1d3a      	adds	r2, r7, #4
 8002444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002448:	4413      	add	r3, r2
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
        }
    }
 800244e:	e747      	b.n	80022e0 <main+0xd8>
 8002450:	08009028 	.word	0x08009028
 8002454:	200002a4 	.word	0x200002a4
 8002458:	20000330 	.word	0x20000330
 800245c:	08009044 	.word	0x08009044
 8002460:	08009060 	.word	0x08009060
 8002464:	0800907c 	.word	0x0800907c
 8002468:	408f4000 	.word	0x408f4000
 800246c:	08009088 	.word	0x08009088

08002470 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b096      	sub	sp, #88	; 0x58
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	2244      	movs	r2, #68	; 0x44
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fd87 	bl	8006f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	463b      	mov	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002492:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002496:	f000 ff6d 	bl	8003374 <HAL_PWREx_ControlVoltageScaling>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80024aa:	f000 f9af 	bl	800280c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ae:	2302      	movs	r3, #2
 80024b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b8:	2310      	movs	r3, #16
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024bc:	2302      	movs	r3, #2
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024c0:	2302      	movs	r3, #2
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80024c8:	230a      	movs	r3, #10
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80024cc:	2307      	movs	r3, #7
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024d0:	2302      	movs	r3, #2
 80024d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 ff9f 	bl	8003420 <HAL_RCC_OscConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80024f2:	f000 f98b 	bl	800280c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f6:	230f      	movs	r3, #15
 80024f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fa:	2303      	movs	r3, #3
 80024fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800250a:	463b      	mov	r3, r7
 800250c:	2104      	movs	r1, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f001 fb62 	bl	8003bd8 <HAL_RCC_ClockConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002524:	f000 f972 	bl	800280c <Error_Handler>
  }
}
 8002528:	bf00      	nop
 800252a:	3758      	adds	r7, #88	; 0x58
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <_ZL12MX_SPI1_Initv+0x80>)
 8002538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 800253c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 800254a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800254e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002558:	2200      	movs	r2, #0
 800255a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 800255e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002562:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002566:	2218      	movs	r2, #24
 8002568:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 800256c:	2200      	movs	r2, #0
 800256e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002572:	2200      	movs	r2, #0
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002578:	2200      	movs	r2, #0
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 800257e:	2207      	movs	r2, #7
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 800258a:	2208      	movs	r2, #8
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <_ZL12MX_SPI1_Initv+0x7c>)
 8002590:	f002 fa02 	bl	8004998 <HAL_SPI_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80025a4:	f000 f932 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200001f4 	.word	0x200001f4
 80025b0:	40013000 	.word	0x40013000

080025b4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025d4:	4a27      	ldr	r2, [pc, #156]	; (8002674 <_ZL12MX_TIM1_Initv+0xc0>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025da:	224f      	movs	r2, #79	; 0x4f
 80025dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025fe:	481c      	ldr	r0, [pc, #112]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 8002600:	f002 fdf4 	bl	80051ec <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002614:	f000 f8fa 	bl	800280c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	4619      	mov	r1, r3
 8002624:	4812      	ldr	r0, [pc, #72]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 8002626:	f002 fe38 	bl	800529a <HAL_TIM_ConfigClockSource>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800263a:	f000 f8e7 	bl	800280c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4808      	ldr	r0, [pc, #32]	; (8002670 <_ZL12MX_TIM1_Initv+0xbc>)
 8002650:	f003 f820 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002664:	f000 f8d2 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000258 	.word	0x20000258
 8002674:	40012c00 	.word	0x40012c00

08002678 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <_ZL19MX_USART2_UART_Initv+0x64>)
 8002680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ba:	4807      	ldr	r0, [pc, #28]	; (80026d8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80026bc:	f003 f872 	bl	80057a4 <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80026d0:	f000 f89c 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200002a4 	.word	0x200002a4
 80026dc:	40004400 	.word	0x40004400

080026e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	4b42      	ldr	r3, [pc, #264]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	4a41      	ldr	r2, [pc, #260]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002702:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a35      	ldr	r2, [pc, #212]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4b30      	ldr	r3, [pc, #192]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a2f      	ldr	r2, [pc, #188]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <_ZL12MX_GPIO_Initv+0x120>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002756:	2201      	movs	r2, #1
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	482a      	ldr	r0, [pc, #168]	; (8002804 <_ZL12MX_GPIO_Initv+0x124>)
 800275c:	f000 fde4 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	4828      	ldr	r0, [pc, #160]	; (8002808 <_ZL12MX_GPIO_Initv+0x128>)
 8002766:	f000 fddf 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800276a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002770:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4820      	ldr	r0, [pc, #128]	; (8002804 <_ZL12MX_GPIO_Initv+0x124>)
 8002782:	f000 fc0f 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4819      	ldr	r0, [pc, #100]	; (8002804 <_ZL12MX_GPIO_Initv+0x124>)
 800279e:	f000 fc01 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027bc:	f000 fbf2 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 80027c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d8:	f000 fbe4 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 80027dc:	2340      	movs	r3, #64	; 0x40
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <_ZL12MX_GPIO_Initv+0x128>)
 80027f4:	f000 fbd6 	bl	8002fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	48000800 	.word	0x48000800
 8002808:	48000400 	.word	0x48000400

0800280c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002814:	e7fe      	b.n	8002814 <Error_Handler+0x8>
	...

08002818 <_Z41__static_initialization_and_destruction_0ii>:
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_OBJ sx1280;
 8002832:	4809      	ldr	r0, [pc, #36]	; (8002858 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002834:	f7ff fa36 	bl	8001ca4 <_ZN10SX128x_OBJC1Ev>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002844:	4293      	cmp	r3, r2
 8002846:	d102      	bne.n	800284e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002848:	4803      	ldr	r0, [pc, #12]	; (8002858 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800284a:	f7ff fcb9 	bl	80021c0 <_ZN10SX128x_OBJD1Ev>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000330 	.word	0x20000330

0800285c <_GLOBAL__sub_I_hspi1>:
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
 8002860:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff ffd7 	bl	8002818 <_Z41__static_initialization_and_destruction_0ii>
 800286a:	bd80      	pop	{r7, pc}

0800286c <_GLOBAL__sub_D_hspi1>:
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
 8002870:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff ffcf 	bl	8002818 <_Z41__static_initialization_and_destruction_0ii>
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_MspInit+0x44>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_MspInit+0x44>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6613      	str	r3, [r2, #96]	; 0x60
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_MspInit+0x44>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_MspInit+0x44>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_MspInit+0x44>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6593      	str	r3, [r2, #88]	; 0x58
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_MspInit+0x44>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_SPI_MspInit+0x7c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d128      	bne.n	8002938 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_SPI_MspInit+0x80>)
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_SPI_MspInit+0x80>)
 80028ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f0:	6613      	str	r3, [r2, #96]	; 0x60
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_SPI_MspInit+0x80>)
 80028f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_SPI_MspInit+0x80>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_SPI_MspInit+0x80>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_SPI_MspInit+0x80>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002916:	23e0      	movs	r3, #224	; 0xe0
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800291e:	2302      	movs	r3, #2
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002926:	2305      	movs	r3, #5
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f000 fb36 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40013000 	.word	0x40013000
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_TIM_Base_MspInit+0x38>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10b      	bne.n	8002972 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_TIM_Base_MspInit+0x3c>)
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_TIM_Base_MspInit+0x3c>)
 8002960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002964:	6613      	str	r3, [r2, #96]	; 0x60
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_TIM_Base_MspInit+0x3c>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b0ac      	sub	sp, #176	; 0xb0
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2288      	movs	r2, #136	; 0x88
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 faf2 	bl	8006f92 <memset>
  if(huart->Instance==USART2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_UART_MspInit+0xb0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d13b      	bne.n	8002a30 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029b8:	2302      	movs	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029bc:	2300      	movs	r3, #0
 80029be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 fb2b 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029d0:	f7ff ff1c 	bl	800280c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_UART_MspInit+0xb4>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_UART_MspInit+0xb4>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029de:	6593      	str	r3, [r2, #88]	; 0x58
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_UART_MspInit+0xb4>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_UART_MspInit+0xb4>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <HAL_UART_MspInit+0xb4>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_UART_MspInit+0xb4>)
 80029fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a04:	230c      	movs	r3, #12
 8002a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2c:	f000 faba 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	37b0      	adds	r7, #176	; 0xb0
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40004400 	.word	0x40004400
 8002a3c:	40021000 	.word	0x40021000

08002a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <NMI_Handler+0x4>

08002a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <HardFault_Handler+0x4>

08002a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <MemManage_Handler+0x4>

08002a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <BusFault_Handler+0x4>

08002a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <UsageFault_Handler+0x4>

08002a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8c:	f000 f960 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aae:	f004 fb17 	bl	80070e0 <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2216      	movs	r2, #22
 8002ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_exit>:

void _exit (int status)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe7 	bl	8002aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ad6:	e7fe      	b.n	8002ad6 <_exit+0x12>

08002ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00a      	b.n	8002b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aea:	f3af 8000 	nop.w
 8002aee:	4601      	mov	r1, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	60ba      	str	r2, [r7, #8]
 8002af6:	b2ca      	uxtb	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf0      	blt.n	8002aea <_read+0x12>
  }

  return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e009      	b.n	8002b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbf1      	blt.n	8002b24 <_write+0x12>
  }
  return len;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_close>:

int _close(int file)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	605a      	str	r2, [r3, #4]
  return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <_isatty>:

int _isatty(int file)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f004 fa7c 	bl	80070e0 <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20018000 	.word	0x20018000
 8002c14:	00000400 	.word	0x00000400
 8002c18:	20000478 	.word	0x20000478
 8002c1c:	200005d0 	.word	0x200005d0

08002c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <SystemInit+0x20>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <SystemInit+0x20>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c48:	f7ff ffea 	bl	8002c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c4c:	480c      	ldr	r0, [pc, #48]	; (8002c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c4e:	490d      	ldr	r1, [pc, #52]	; (8002c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <LoopForever+0xe>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <LoopForever+0x16>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c72:	f004 fa3b 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c76:	f7ff fac7 	bl	8002208 <main>

08002c7a <LoopForever>:

LoopForever:
    b LoopForever
 8002c7a:	e7fe      	b.n	8002c7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c88:	08009544 	.word	0x08009544
  ldr r2, =_sbss
 8002c8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002c90:	200005cc 	.word	0x200005cc

08002c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c94:	e7fe      	b.n	8002c94 <ADC1_2_IRQHandler>
	...

08002c98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_Init+0x3c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <HAL_Init+0x3c>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cae:	2003      	movs	r0, #3
 8002cb0:	f000 f944 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f000 f80f 	bl	8002cd8 <HAL_InitTick>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	71fb      	strb	r3, [r7, #7]
 8002cc4:	e001      	b.n	8002cca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cc6:	f7ff fdd9 	bl	800287c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cca:	79fb      	ldrb	r3, [r7, #7]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40022000 	.word	0x40022000

08002cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_InitTick+0x6c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_InitTick+0x70>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_InitTick+0x6c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f941 	bl	8002f8a <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d809      	bhi.n	8002d28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 f919 	bl	8002f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_InitTick+0x74>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e004      	b.n	8002d38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e001      	b.n	8002d38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000008 	.word	0x20000008
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x20>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_IncTick+0x24>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000008 	.word	0x20000008
 8002d74:	2000047c 	.word	0x2000047c

08002d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_GetTick+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	2000047c 	.word	0x2000047c

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002db6:	bf00      	nop
 8002db8:	f7ff ffde 	bl	8002d78 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
  {
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008

08002dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0a:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	; (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff47 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff5c 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffb0 	bl	8002ef8 <SysTick_Config>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb2:	e17f      	b.n	80032b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8171 	beq.w	80032ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d005      	beq.n	8002fe4 <HAL_GPIO_Init+0x40>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d130      	bne.n	8003046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301a:	2201      	movs	r2, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0201 	and.w	r2, r3, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b03      	cmp	r3, #3
 8003050:	d118      	bne.n	8003084 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	6939      	ldr	r1, [r7, #16]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80ac 	beq.w	80032ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <HAL_GPIO_Init+0x330>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_GPIO_Init+0x330>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6613      	str	r3, [r2, #96]	; 0x60
 8003162:	4b5c      	ldr	r3, [pc, #368]	; (80032d4 <HAL_GPIO_Init+0x330>)
 8003164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800316e:	4a5a      	ldr	r2, [pc, #360]	; (80032d8 <HAL_GPIO_Init+0x334>)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x242>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4f      	ldr	r2, [pc, #316]	; (80032dc <HAL_GPIO_Init+0x338>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x23e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4e      	ldr	r2, [pc, #312]	; (80032e0 <HAL_GPIO_Init+0x33c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x23a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4d      	ldr	r2, [pc, #308]	; (80032e4 <HAL_GPIO_Init+0x340>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x236>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4c      	ldr	r2, [pc, #304]	; (80032e8 <HAL_GPIO_Init+0x344>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x232>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4b      	ldr	r2, [pc, #300]	; (80032ec <HAL_GPIO_Init+0x348>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x22e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <HAL_GPIO_Init+0x34c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x22a>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e00c      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031ce:	2307      	movs	r3, #7
 80031d0:	e00a      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031d2:	2305      	movs	r3, #5
 80031d4:	e008      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031d6:	2304      	movs	r3, #4
 80031d8:	e006      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031da:	2303      	movs	r3, #3
 80031dc:	e004      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031de:	2302      	movs	r3, #2
 80031e0:	e002      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_GPIO_Init+0x244>
 80031e6:	2300      	movs	r3, #0
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	f002 0203 	and.w	r2, r2, #3
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	4093      	lsls	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031f8:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_GPIO_Init+0x334>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	3302      	adds	r3, #2
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800322a:	4a32      	ldr	r2, [pc, #200]	; (80032f4 <HAL_GPIO_Init+0x350>)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_GPIO_Init+0x350>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <HAL_GPIO_Init+0x350>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f47f ae78 	bne.w	8002fb4 <HAL_GPIO_Init+0x10>
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40010000 	.word	0x40010000
 80032dc:	48000400 	.word	0x48000400
 80032e0:	48000800 	.word	0x48000800
 80032e4:	48000c00 	.word	0x48000c00
 80032e8:	48001000 	.word	0x48001000
 80032ec:	48001400 	.word	0x48001400
 80032f0:	48001800 	.word	0x48001800
 80032f4:	40010400 	.word	0x40010400

080032f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e001      	b.n	800331a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003344:	e002      	b.n	800334c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_PWREx_GetVoltageRange+0x18>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000

08003374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d130      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d038      	beq.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b8:	e002      	b.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d102      	bne.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f2      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d110      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00f      	b.n	8003406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d007      	beq.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40007000 	.word	0x40007000
 8003418:	20000000 	.word	0x20000000
 800341c:	431bde83 	.word	0x431bde83

08003420 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e3ca      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003432:	4b97      	ldr	r3, [pc, #604]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343c:	4b94      	ldr	r3, [pc, #592]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80e4 	beq.w	800361c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_RCC_OscConfig+0x4a>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	f040 808b 	bne.w	8003578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 8087 	bne.w	8003578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800346a:	4b89      	ldr	r3, [pc, #548]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x62>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e3a2      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	4b82      	ldr	r3, [pc, #520]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_RCC_OscConfig+0x7c>
 8003492:	4b7f      	ldr	r3, [pc, #508]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349a:	e005      	b.n	80034a8 <HAL_RCC_OscConfig+0x88>
 800349c:	4b7c      	ldr	r3, [pc, #496]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d223      	bcs.n	80034f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fd55 	bl	8003f60 <RCC_SetFlashLatencyFromMSIRange>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e383      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c0:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a72      	ldr	r2, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b70      	ldr	r3, [pc, #448]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	496d      	ldr	r1, [pc, #436]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034de:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	4968      	ldr	r1, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e025      	b.n	8003540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a65      	ldr	r2, [pc, #404]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4960      	ldr	r1, [pc, #384]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003512:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	495b      	ldr	r1, [pc, #364]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fd15 	bl	8003f60 <RCC_SetFlashLatencyFromMSIRange>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e343      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003540:	f000 fc4a 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b52      	ldr	r3, [pc, #328]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	4950      	ldr	r1, [pc, #320]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <HAL_RCC_OscConfig+0x278>)
 800355e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003560:	4b4e      	ldr	r3, [pc, #312]	; (800369c <HAL_RCC_OscConfig+0x27c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fbb7 	bl	8002cd8 <HAL_InitTick>
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d052      	beq.n	800361a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	e327      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d032      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a42      	ldr	r2, [pc, #264]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800358c:	f7ff fbf4 	bl	8002d78 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003594:	f7ff fbf0 	bl	8002d78 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e310      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a36      	ldr	r2, [pc, #216]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4931      	ldr	r1, [pc, #196]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d0:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	492c      	ldr	r1, [pc, #176]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
 80035e4:	e01a      	b.n	800361c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035f2:	f7ff fbc1 	bl	8002d78 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035fa:	f7ff fbbd 	bl	8002d78 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e2dd      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800360c:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x1da>
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800361a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d074      	beq.n	8003712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x21a>
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d10e      	bne.n	8003652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d10b      	bne.n	8003652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d064      	beq.n	8003710 <HAL_RCC_OscConfig+0x2f0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d160      	bne.n	8003710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e2ba      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x24a>
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e026      	b.n	80036b8 <HAL_RCC_OscConfig+0x298>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003672:	d115      	bne.n	80036a0 <HAL_RCC_OscConfig+0x280>
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a05      	ldr	r2, [pc, #20]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 800367a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a02      	ldr	r2, [pc, #8]	; (8003690 <HAL_RCC_OscConfig+0x270>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e014      	b.n	80036b8 <HAL_RCC_OscConfig+0x298>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	08009174 	.word	0x08009174
 8003698:	20000000 	.word	0x20000000
 800369c:	20000004 	.word	0x20000004
 80036a0:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a9f      	ldr	r2, [pc, #636]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b9d      	ldr	r3, [pc, #628]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a9c      	ldr	r2, [pc, #624]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7ff fb5a 	bl	8002d78 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7ff fb56 	bl	8002d78 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e276      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036da:	4b92      	ldr	r3, [pc, #584]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2a8>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7ff fb46 	bl	8002d78 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7ff fb42 	bl	8002d78 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e262      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003702:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2d0>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d060      	beq.n	80037e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d005      	beq.n	8003730 <HAL_RCC_OscConfig+0x310>
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d119      	bne.n	800375e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d116      	bne.n	800375e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003730:	4b7c      	ldr	r3, [pc, #496]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_OscConfig+0x328>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e23f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b76      	ldr	r3, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	4973      	ldr	r1, [pc, #460]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375c:	e040      	b.n	80037e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d023      	beq.n	80037ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003766:	4b6f      	ldr	r3, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7ff fb01 	bl	8002d78 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377a:	f7ff fafd 	bl	8002d78 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e21d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800378c:	4b65      	ldr	r3, [pc, #404]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b62      	ldr	r3, [pc, #392]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	495f      	ldr	r1, [pc, #380]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e018      	b.n	80037e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ae:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a5c      	ldr	r2, [pc, #368]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7ff fadd 	bl	8002d78 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff fad9 	bl	8002d78 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1f9      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d03c      	beq.n	8003866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01c      	beq.n	800382e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f4:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7ff fab8 	bl	8002d78 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7ff fab4 	bl	8002d78 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1d4      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ef      	beq.n	800380c <HAL_RCC_OscConfig+0x3ec>
 800382c:	e01b      	b.n	8003866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003834:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7ff fa9b 	bl	8002d78 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003846:	f7ff fa97 	bl	8002d78 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e1b7      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800385a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ef      	bne.n	8003846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80a6 	beq.w	80039c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	4a26      	ldr	r2, [pc, #152]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388e:	6593      	str	r3, [r2, #88]	; 0x58
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a0:	4b21      	ldr	r3, [pc, #132]	; (8003928 <HAL_RCC_OscConfig+0x508>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d118      	bne.n	80038de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCC_OscConfig+0x508>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_RCC_OscConfig+0x508>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b8:	f7ff fa5e 	bl	8002d78 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c0:	f7ff fa5a 	bl	8002d78 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e17a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x508>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4d8>
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f6:	e029      	b.n	800394c <HAL_RCC_OscConfig+0x52c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d115      	bne.n	800392c <HAL_RCC_OscConfig+0x50c>
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_RCC_OscConfig+0x504>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003920:	e014      	b.n	800394c <HAL_RCC_OscConfig+0x52c>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	40007000 	.word	0x40007000
 800392c:	4b9c      	ldr	r3, [pc, #624]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a9b      	ldr	r2, [pc, #620]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	4b98      	ldr	r3, [pc, #608]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	4a97      	ldr	r2, [pc, #604]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d016      	beq.n	8003982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7ff fa10 	bl	8002d78 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7ff fa0c 	bl	8002d78 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e12a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003972:	4b8b      	ldr	r3, [pc, #556]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ed      	beq.n	800395c <HAL_RCC_OscConfig+0x53c>
 8003980:	e015      	b.n	80039ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7ff f9f9 	bl	8002d78 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7ff f9f5 	bl	8002d78 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	; 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e113      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a0:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ed      	bne.n	800398a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b4:	4b7a      	ldr	r3, [pc, #488]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	4a79      	ldr	r2, [pc, #484]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 80039ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80fe 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	f040 80d0 	bne.w	8003b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039d4:	4b72      	ldr	r3, [pc, #456]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d130      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	3b01      	subs	r3, #1
 80039f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d127      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d11f      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a14:	2a07      	cmp	r2, #7
 8003a16:	bf14      	ite	ne
 8003a18:	2201      	movne	r2, #1
 8003a1a:	2200      	moveq	r2, #0
 8003a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d113      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d06e      	beq.n	8003b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d069      	beq.n	8003b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0ad      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4b      	ldr	r2, [pc, #300]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a78:	f7ff f97e 	bl	8002d78 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7ff f97a 	bl	8002d78 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e09a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a92:	4b43      	ldr	r3, [pc, #268]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <HAL_RCC_OscConfig+0x784>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aae:	3a01      	subs	r2, #1
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ab8:	0212      	lsls	r2, r2, #8
 8003aba:	4311      	orrs	r1, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ac0:	0852      	lsrs	r2, r2, #1
 8003ac2:	3a01      	subs	r2, #1
 8003ac4:	0552      	lsls	r2, r2, #21
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003acc:	0852      	lsrs	r2, r2, #1
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	0652      	lsls	r2, r2, #25
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad8:	0912      	lsrs	r2, r2, #4
 8003ada:	0452      	lsls	r2, r2, #17
 8003adc:	430a      	orrs	r2, r1
 8003ade:	4930      	ldr	r1, [pc, #192]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003afc:	f7ff f93c 	bl	8002d78 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7ff f938 	bl	8002d78 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e058      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b22:	e050      	b.n	8003bc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e04f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d148      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b4c:	f7ff f914 	bl	8002d78 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7ff f910 	bl	8002d78 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e030      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x734>
 8003b72:	e028      	b.n	8003bc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d023      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <HAL_RCC_OscConfig+0x780>)
 8003b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7ff f8f7 	bl	8002d78 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8c:	e00c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7ff f8f3 	bl	8002d78 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d905      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e013      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_OscConfig+0x7b0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ec      	bne.n	8003b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x7b0>)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4905      	ldr	r1, [pc, #20]	; (8003bd0 <HAL_RCC_OscConfig+0x7b0>)
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCC_OscConfig+0x7b4>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60cb      	str	r3, [r1, #12]
 8003bc0:	e001      	b.n	8003bc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	feeefffc 	.word	0xfeeefffc

08003bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0e7      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d910      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0207 	bic.w	r2, r3, #7
 8003c02:	4970      	ldr	r1, [pc, #448]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b6e      	ldr	r3, [pc, #440]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cf      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d908      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4960      	ldr	r1, [pc, #384]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04c      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5e:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d121      	bne.n	8003cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0a6      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c76:	4b54      	ldr	r3, [pc, #336]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d115      	bne.n	8003cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e09a      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c8e:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e08e      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e086      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4943      	ldr	r1, [pc, #268]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7ff f85a 	bl	8002d78 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7ff f856 	bl	8002d78 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e06e      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d208      	bcs.n	8003d1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d0c:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	492b      	ldr	r1, [pc, #172]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1e:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d210      	bcs.n	8003d4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 0207 	bic.w	r2, r3, #7
 8003d34:	4923      	ldr	r1, [pc, #140]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e036      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4918      	ldr	r1, [pc, #96]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4910      	ldr	r1, [pc, #64]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d8c:	f000 f824 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	490b      	ldr	r1, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x1f4>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1f8>)
 8003daa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1fc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe ff91 	bl	8002cd8 <HAL_InitTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dba:	7afb      	ldrb	r3, [r7, #11]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08009174 	.word	0x08009174
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x34>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d121      	bne.n	8003e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d11e      	bne.n	8003e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e0c:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e18:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e005      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e28:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e34:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10d      	bne.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d102      	bne.n	8003e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e004      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <HAL_RCC_GetSysClockFreq+0x114>)
 8003e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d134      	bne.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0xac>
 8003e7c:	e005      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e80:	617b      	str	r3, [r7, #20]
      break;
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_GetSysClockFreq+0x114>)
 8003e86:	617b      	str	r3, [r7, #20]
      break;
 8003e88:	e002      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	617b      	str	r3, [r7, #20]
      break;
 8003e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	fb03 f202 	mul.w	r2, r3, r2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	0e5b      	lsrs	r3, r3, #25
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800918c 	.word	0x0800918c
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f0c:	f7ff fff0 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	08009184 	.word	0x08009184

08003f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f38:	f7ff ffda 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0adb      	lsrs	r3, r3, #11
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4904      	ldr	r1, [pc, #16]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08009184 	.word	0x08009184

08003f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f78:	f7ff f9ee 	bl	8003358 <HAL_PWREx_GetVoltageRange>
 8003f7c:	6178      	str	r0, [r7, #20]
 8003f7e:	e014      	b.n	8003faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b25      	ldr	r3, [pc, #148]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f9de 	bl	8003358 <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d10b      	bne.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d919      	bls.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2ba0      	cmp	r3, #160	; 0xa0
 8003fbc:	d902      	bls.n	8003fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	e013      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	e010      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d902      	bls.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e00a      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d102      	bne.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fdc:	2302      	movs	r3, #2
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e004      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d101      	bne.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe8:	2301      	movs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	4909      	ldr	r1, [pc, #36]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	40022000 	.word	0x40022000

08004020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004028:	2300      	movs	r3, #0
 800402a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800402c:	2300      	movs	r3, #0
 800402e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d041      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004040:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004044:	d02a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004046:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800404a:	d824      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800404c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004050:	d008      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004056:	d81e      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800405c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004060:	d010      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004062:	e018      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004064:	4b86      	ldr	r3, [pc, #536]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a85      	ldr	r2, [pc, #532]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004070:	e015      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fabb 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3320      	adds	r3, #32
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fba6 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	74fb      	strb	r3, [r7, #19]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b2:	4973      	ldr	r1, [pc, #460]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d041      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040d4:	d02a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040da:	d824      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e0:	d008      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e6:	d81e      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f0:	d010      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040f2:	e018      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040f4:	4b62      	ldr	r3, [pc, #392]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004100:	e015      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fa73 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004112:	e00c      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3320      	adds	r3, #32
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fb5e 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004124:	e003      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	74fb      	strb	r3, [r7, #19]
      break;
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800412c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004134:	4b52      	ldr	r3, [pc, #328]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004142:	494f      	ldr	r1, [pc, #316]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a0 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	4a40      	ldr	r2, [pc, #256]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6593      	str	r3, [r2, #88]	; 0x58
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004190:	2301      	movs	r3, #1
 8004192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004194:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3a      	ldr	r2, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a0:	f7fe fdea 	bl	8002d78 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a6:	e009      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fe fde6 	bl	8002d78 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	74fb      	strb	r3, [r7, #19]
        break;
 80041ba:	e005      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d15c      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d019      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fe fda5 	bl	8002d78 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004230:	e00b      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fe fda1 	bl	8002d78 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
            break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ec      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426e:	4904      	ldr	r1, [pc, #16]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004276:	e009      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	74bb      	strb	r3, [r7, #18]
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428c:	7c7b      	ldrb	r3, [r7, #17]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4b9e      	ldr	r3, [pc, #632]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4a9d      	ldr	r2, [pc, #628]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042aa:	4b98      	ldr	r3, [pc, #608]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0203 	bic.w	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	4994      	ldr	r1, [pc, #592]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042cc:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 020c 	bic.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	498c      	ldr	r1, [pc, #560]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ee:	4b87      	ldr	r3, [pc, #540]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	4983      	ldr	r1, [pc, #524]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004310:	4b7e      	ldr	r3, [pc, #504]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	497b      	ldr	r1, [pc, #492]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004332:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	4972      	ldr	r1, [pc, #456]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	496a      	ldr	r1, [pc, #424]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	4961      	ldr	r1, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004398:	4b5c      	ldr	r3, [pc, #368]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	4959      	ldr	r1, [pc, #356]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ba:	4b54      	ldr	r3, [pc, #336]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	4950      	ldr	r1, [pc, #320]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043dc:	4b4b      	ldr	r3, [pc, #300]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	4948      	ldr	r1, [pc, #288]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	493f      	ldr	r1, [pc, #252]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d028      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004420:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442e:	4937      	ldr	r1, [pc, #220]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d106      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a31      	ldr	r2, [pc, #196]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444a:	60d3      	str	r3, [r2, #12]
 800444c:	e011      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004456:	d10c      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f8c8 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d028      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800447e:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	491f      	ldr	r1, [pc, #124]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800449c:	d106      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449e:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a8:	60d3      	str	r3, [r2, #12]
 80044aa:	e011      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f899 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02b      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fa:	d109      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004506:	60d3      	str	r3, [r2, #12]
 8004508:	e014      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f867 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02f      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454e:	4928      	ldr	r1, [pc, #160]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800455e:	d10d      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f844 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3320      	adds	r3, #32
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f925 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ba:	490d      	ldr	r1, [pc, #52]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000

080045f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004602:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800460e:	4b72      	ldr	r3, [pc, #456]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0203 	and.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10d      	bne.n	800463a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
       ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004626:	4b6c      	ldr	r3, [pc, #432]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
       ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d047      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e044      	b.n	80046ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d018      	beq.n	800467a <RCCEx_PLLSAI1_Config+0x86>
 8004648:	2b03      	cmp	r3, #3
 800464a:	d825      	bhi.n	8004698 <RCCEx_PLLSAI1_Config+0xa4>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0x62>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d009      	beq.n	8004668 <RCCEx_PLLSAI1_Config+0x74>
 8004654:	e020      	b.n	8004698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004656:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11d      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004666:	e01a      	b.n	800469e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004668:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e013      	b.n	80046a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467a:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004686:	4b54      	ldr	r3, [pc, #336]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004696:	e006      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e004      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ae:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	430b      	orrs	r3, r1
 80046c4:	4944      	ldr	r1, [pc, #272]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d17d      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046d0:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a40      	ldr	r2, [pc, #256]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fe fb4c 	bl	8002d78 <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e2:	e009      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e4:	f7fe fb48 	bl	8002d78 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d902      	bls.n	80046f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	73fb      	strb	r3, [r7, #15]
        break;
 80046f6:	e005      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f8:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ef      	bne.n	80046e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d160      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d111      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	0211      	lsls	r1, r2, #8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	0912      	lsrs	r2, r2, #4
 8004728:	0452      	lsls	r2, r2, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	492a      	ldr	r1, [pc, #168]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
 8004732:	e027      	b.n	8004784 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d112      	bne.n	8004760 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6892      	ldr	r2, [r2, #8]
 800474a:	0211      	lsls	r1, r2, #8
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6912      	ldr	r2, [r2, #16]
 8004750:	0852      	lsrs	r2, r2, #1
 8004752:	3a01      	subs	r2, #1
 8004754:	0552      	lsls	r2, r2, #21
 8004756:	430a      	orrs	r2, r1
 8004758:	491f      	ldr	r1, [pc, #124]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	610b      	str	r3, [r1, #16]
 800475e:	e011      	b.n	8004784 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6952      	ldr	r2, [r2, #20]
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	430a      	orrs	r2, r1
 800477e:	4916      	ldr	r1, [pc, #88]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800478e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fe faf2 	bl	8002d78 <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004796:	e009      	b.n	80047ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004798:	f7fe faee 	bl	8002d78 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	73fb      	strb	r3, [r7, #15]
          break;
 80047aa:	e005      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	4904      	ldr	r1, [pc, #16]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000

080047dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ea:	4b6a      	ldr	r3, [pc, #424]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047f6:	4b67      	ldr	r3, [pc, #412]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d10d      	bne.n	8004822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
       ||
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800480e:	4b61      	ldr	r3, [pc, #388]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
       ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d047      	beq.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
 8004826:	e044      	b.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d018      	beq.n	8004862 <RCCEx_PLLSAI2_Config+0x86>
 8004830:	2b03      	cmp	r3, #3
 8004832:	d825      	bhi.n	8004880 <RCCEx_PLLSAI2_Config+0xa4>
 8004834:	2b01      	cmp	r3, #1
 8004836:	d002      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x62>
 8004838:	2b02      	cmp	r3, #2
 800483a:	d009      	beq.n	8004850 <RCCEx_PLLSAI2_Config+0x74>
 800483c:	e020      	b.n	8004880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800483e:	4b55      	ldr	r3, [pc, #340]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11d      	bne.n	8004886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484e:	e01a      	b.n	8004886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004850:	4b50      	ldr	r3, [pc, #320]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004860:	e013      	b.n	800488a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004862:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800486e:	4b49      	ldr	r3, [pc, #292]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800487e:	e006      	b.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e004      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004896:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	430b      	orrs	r3, r1
 80048ac:	4939      	ldr	r1, [pc, #228]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d167      	bne.n	8004988 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a35      	ldr	r2, [pc, #212]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c4:	f7fe fa58 	bl	8002d78 <HAL_GetTick>
 80048c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ca:	e009      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048cc:	f7fe fa54 	bl	8002d78 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	73fb      	strb	r3, [r7, #15]
        break;
 80048de:	e005      	b.n	80048ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ef      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d14a      	bne.n	8004988 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d111      	bne.n	800491c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6892      	ldr	r2, [r2, #8]
 8004908:	0211      	lsls	r1, r2, #8
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	0912      	lsrs	r2, r2, #4
 8004910:	0452      	lsls	r2, r2, #17
 8004912:	430a      	orrs	r2, r1
 8004914:	491f      	ldr	r1, [pc, #124]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	614b      	str	r3, [r1, #20]
 800491a:	e011      	b.n	8004940 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6892      	ldr	r2, [r2, #8]
 800492c:	0211      	lsls	r1, r2, #8
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6912      	ldr	r2, [r2, #16]
 8004932:	0852      	lsrs	r2, r2, #1
 8004934:	3a01      	subs	r2, #1
 8004936:	0652      	lsls	r2, r2, #25
 8004938:	430a      	orrs	r2, r1
 800493a:	4916      	ldr	r1, [pc, #88]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fe fa14 	bl	8002d78 <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004952:	e009      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004954:	f7fe fa10 	bl	8002d78 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
          break;
 8004966:	e005      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ef      	beq.n	8004954 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4904      	ldr	r1, [pc, #16]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	4313      	orrs	r3, r2
 8004986:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e095      	b.n	8004ad6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d009      	beq.n	80049d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
 80049c2:	e005      	b.n	80049d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd ff6a 	bl	80028c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a10:	d902      	bls.n	8004a18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e002      	b.n	8004a1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a26:	d007      	beq.n	8004a38 <HAL_SPI_Init+0xa0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	ea42 0103 	orr.w	r1, r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	f003 0204 	and.w	r2, r3, #4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b08a      	sub	sp, #40	; 0x28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x26>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e20a      	b.n	8004f1a <HAL_SPI_TransmitReceive+0x43c>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0c:	f7fe f934 	bl	8002d78 <HAL_GetTick>
 8004b10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b20:	887b      	ldrh	r3, [r7, #2]
 8004b22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b28:	7efb      	ldrb	r3, [r7, #27]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d00e      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x6e>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x66>
 8004b3e:	7efb      	ldrb	r3, [r7, #27]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d003      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b4a:	e1e0      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x80>
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b64:	e1d3      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d003      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2205      	movs	r2, #5
 8004b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	887a      	ldrh	r2, [r7, #2]
 8004b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	887a      	ldrh	r2, [r7, #2]
 8004b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	887a      	ldrh	r2, [r7, #2]
 8004ba6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bbc:	d802      	bhi.n	8004bc4 <HAL_SPI_TransmitReceive+0xe6>
 8004bbe:	8a3b      	ldrh	r3, [r7, #16]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d908      	bls.n	8004bd6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	e007      	b.n	8004be6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	f240 8081 	bls.w	8004d12 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x140>
 8004c18:	8a7b      	ldrh	r3, [r7, #18]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d16d      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c42:	e05a      	b.n	8004cfa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d11b      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x1ac>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d016      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x1ac>
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d113      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	881a      	ldrh	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11c      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x1f4>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cd2:	f7fe f851 	bl	8002d78 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d80b      	bhi.n	8004cfa <HAL_SPI_TransmitReceive+0x21c>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d007      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004cf8:	e109      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d19f      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x166>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d199      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x166>
 8004d10:	e0e3      	b.n	8004eda <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x244>
 8004d1a:	8a7b      	ldrh	r3, [r7, #18]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	f040 80cf 	bne.w	8004ec0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d912      	bls.n	8004d52 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b02      	subs	r3, #2
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d50:	e0b6      	b.n	8004ec0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d78:	e0a2      	b.n	8004ec0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d134      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x314>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02f      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x314>
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d12c      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d912      	bls.n	8004dc8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	1c9a      	adds	r2, r3, #2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b02      	subs	r3, #2
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc6:	e012      	b.n	8004dee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d148      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x3b4>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d042      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d923      	bls.n	8004e60 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	b292      	uxth	r2, r2
 8004e24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b02      	subs	r3, #2
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d81f      	bhi.n	8004e8e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	e016      	b.n	8004e8e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f103 020c 	add.w	r2, r3, #12
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e92:	f7fd ff71 	bl	8002d78 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d803      	bhi.n	8004eaa <HAL_SPI_TransmitReceive+0x3cc>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x3d2>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d107      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004ebe:	e026      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f47f af57 	bne.w	8004d7a <HAL_SPI_TransmitReceive+0x29c>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f47f af50 	bne.w	8004d7a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f93e 	bl	8005160 <SPI_EndRxTxTransaction>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f04:	e003      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f34:	f7fd ff20 	bl	8002d78 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f44:	f7fd ff18 	bl	8002d78 <HAL_GetTick>
 8004f48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f4a:	4b39      	ldr	r3, [pc, #228]	; (8005030 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	0d1b      	lsrs	r3, r3, #20
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5a:	e054      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d050      	beq.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f64:	f7fd ff08 	bl	8002d78 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d902      	bls.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d13d      	bne.n	8004ff6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f92:	d111      	bne.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9c:	d004      	beq.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d107      	bne.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d10f      	bne.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e017      	b.n	8005026 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3b01      	subs	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d19b      	bne.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000000 	.word	0x20000000

08005034 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005046:	f7fd fe97 	bl	8002d78 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4413      	add	r3, r2
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005056:	f7fd fe8f 	bl	8002d78 <HAL_GetTick>
 800505a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005064:	4b3d      	ldr	r3, [pc, #244]	; (800515c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00da      	lsls	r2, r3, #3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	0d1b      	lsrs	r3, r3, #20
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800507c:	e060      	b.n	8005140 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005084:	d107      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005094:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d050      	beq.n	8005140 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800509e:	f7fd fe6b 	bl	8002d78 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d902      	bls.n	80050b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13d      	bne.n	8005130 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050cc:	d111      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d004      	beq.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e0:	d107      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	d10f      	bne.n	800511c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e010      	b.n	8005152 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	3b01      	subs	r3, #1
 800513e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d196      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3728      	adds	r7, #40	; 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000000 	.word	0x20000000

08005160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff ff5b 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e027      	b.n	80051e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fec0 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e014      	b.n	80051e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff ff34 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e000      	b.n	80051e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e049      	b.n	8005292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fb98 	bl	8002948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f000 f8fe 	bl	800542c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_ConfigClockSource+0x1c>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e0b6      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x18a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f2:	d03e      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0xd8>
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f8:	f200 8087 	bhi.w	800540a <HAL_TIM_ConfigClockSource+0x170>
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005300:	f000 8086 	beq.w	8005410 <HAL_TIM_ConfigClockSource+0x176>
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005308:	d87f      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 800530a:	2b70      	cmp	r3, #112	; 0x70
 800530c:	d01a      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0xaa>
 800530e:	2b70      	cmp	r3, #112	; 0x70
 8005310:	d87b      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 8005312:	2b60      	cmp	r3, #96	; 0x60
 8005314:	d050      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0x11e>
 8005316:	2b60      	cmp	r3, #96	; 0x60
 8005318:	d877      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 800531a:	2b50      	cmp	r3, #80	; 0x50
 800531c:	d03c      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0xfe>
 800531e:	2b50      	cmp	r3, #80	; 0x50
 8005320:	d873      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d058      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x13e>
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d86f      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 800532a:	2b30      	cmp	r3, #48	; 0x30
 800532c:	d064      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0x15e>
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d86b      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 8005332:	2b20      	cmp	r3, #32
 8005334:	d060      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0x15e>
 8005336:	2b20      	cmp	r3, #32
 8005338:	d867      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x170>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d05c      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0x15e>
 800533e:	2b10      	cmp	r3, #16
 8005340:	d05a      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0x15e>
 8005342:	e062      	b.n	800540a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005354:	f000 f97e 	bl	8005654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005366:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]
      break;
 8005370:	e04f      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	f000 f967 	bl	8005654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005394:	609a      	str	r2, [r3, #8]
      break;
 8005396:	e03c      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a4:	461a      	mov	r2, r3
 80053a6:	f000 f8db 	bl	8005560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2150      	movs	r1, #80	; 0x50
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f934 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 80053b6:	e02c      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c4:	461a      	mov	r2, r3
 80053c6:	f000 f8fa 	bl	80055be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2160      	movs	r1, #96	; 0x60
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f924 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 80053d6:	e01c      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e4:	461a      	mov	r2, r3
 80053e6:	f000 f8bb 	bl	8005560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2140      	movs	r1, #64	; 0x40
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f914 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 80053f6:	e00c      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f000 f90b 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8005408:	e003      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	e000      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a40      	ldr	r2, [pc, #256]	; (8005540 <TIM_Base_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d00f      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3d      	ldr	r2, [pc, #244]	; (8005544 <TIM_Base_SetConfig+0x118>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3c      	ldr	r2, [pc, #240]	; (8005548 <TIM_Base_SetConfig+0x11c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3b      	ldr	r2, [pc, #236]	; (800554c <TIM_Base_SetConfig+0x120>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3a      	ldr	r2, [pc, #232]	; (8005550 <TIM_Base_SetConfig+0x124>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d108      	bne.n	800547e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2f      	ldr	r2, [pc, #188]	; (8005540 <TIM_Base_SetConfig+0x114>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01f      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2c      	ldr	r2, [pc, #176]	; (8005544 <TIM_Base_SetConfig+0x118>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <TIM_Base_SetConfig+0x11c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <TIM_Base_SetConfig+0x120>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <TIM_Base_SetConfig+0x124>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a28      	ldr	r2, [pc, #160]	; (8005554 <TIM_Base_SetConfig+0x128>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a27      	ldr	r2, [pc, #156]	; (8005558 <TIM_Base_SetConfig+0x12c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a26      	ldr	r2, [pc, #152]	; (800555c <TIM_Base_SetConfig+0x130>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <TIM_Base_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a12      	ldr	r2, [pc, #72]	; (8005550 <TIM_Base_SetConfig+0x124>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a11      	ldr	r2, [pc, #68]	; (8005554 <TIM_Base_SetConfig+0x128>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a10      	ldr	r2, [pc, #64]	; (8005558 <TIM_Base_SetConfig+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0xf8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a0f      	ldr	r2, [pc, #60]	; (800555c <TIM_Base_SetConfig+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	615a      	str	r2, [r3, #20]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40013400 	.word	0x40013400
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 030a 	bic.w	r3, r3, #10
 800559c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055be:	b480      	push	{r7}
 80055c0:	b087      	sub	sp, #28
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f023 0210 	bic.w	r2, r3, #16
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	031b      	lsls	r3, r3, #12
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	f043 0307 	orr.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	431a      	orrs	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e068      	b.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2e      	ldr	r2, [pc, #184]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1e      	ldr	r2, [pc, #120]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d018      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1b      	ldr	r2, [pc, #108]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1a      	ldr	r2, [pc, #104]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a18      	ldr	r2, [pc, #96]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10c      	bne.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4313      	orrs	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40013400 	.word	0x40013400
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40014000 	.word	0x40014000

080057a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e040      	b.n	8005838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fd f8de 	bl	8002988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0201 	bic.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fb6a 	bl	8005ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8af 	bl	8005954 <UART_SetConfig>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e01b      	b.n	8005838 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800580e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800581e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fbe9 	bl	8006008 <UART_CheckIdleState>
 8005836:	4603      	mov	r3, r0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005854:	2b20      	cmp	r3, #32
 8005856:	d178      	bne.n	800594a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Transmit+0x24>
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e071      	b.n	800594c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2221      	movs	r2, #33	; 0x21
 8005874:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005876:	f7fd fa7f 	bl	8002d78 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	d108      	bne.n	80058a8 <HAL_UART_Transmit+0x68>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e003      	b.n	80058b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058b0:	e030      	b.n	8005914 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fc4b 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e03c      	b.n	800594c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e4:	b292      	uxth	r2, r2
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	3302      	adds	r3, #2
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	e008      	b.n	8005902 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	b292      	uxth	r2, r2
 80058fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	3301      	adds	r3, #1
 8005900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1c8      	bne.n	80058b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2200      	movs	r2, #0
 8005928:	2140      	movs	r1, #64	; 0x40
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fc14 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e005      	b.n	800594c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e000      	b.n	800594c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b08a      	sub	sp, #40	; 0x28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4ba4      	ldr	r3, [pc, #656]	; (8005c14 <UART_SetConfig+0x2c0>)
 8005984:	4013      	ands	r3, r2
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a99      	ldr	r2, [pc, #612]	; (8005c18 <UART_SetConfig+0x2c4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	4313      	orrs	r3, r2
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a90      	ldr	r2, [pc, #576]	; (8005c1c <UART_SetConfig+0x2c8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d126      	bne.n	8005a2c <UART_SetConfig+0xd8>
 80059de:	4b90      	ldr	r3, [pc, #576]	; (8005c20 <UART_SetConfig+0x2cc>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d81b      	bhi.n	8005a24 <UART_SetConfig+0xd0>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0xa0>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e116      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e112      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e10e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e10a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e106      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a7c      	ldr	r2, [pc, #496]	; (8005c24 <UART_SetConfig+0x2d0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d138      	bne.n	8005aa8 <UART_SetConfig+0x154>
 8005a36:	4b7a      	ldr	r3, [pc, #488]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d82d      	bhi.n	8005aa0 <UART_SetConfig+0x14c>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0xf8>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e0d8      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e0d4      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e0d0      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9e:	e0cc      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa6:	e0c8      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5e      	ldr	r2, [pc, #376]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d125      	bne.n	8005afe <UART_SetConfig+0x1aa>
 8005ab2:	4b5b      	ldr	r3, [pc, #364]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d016      	beq.n	8005aee <UART_SetConfig+0x19a>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d818      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d00a      	beq.n	8005ade <UART_SetConfig+0x18a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d814      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <UART_SetConfig+0x182>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d008      	beq.n	8005ae6 <UART_SetConfig+0x192>
 8005ad4:	e00f      	b.n	8005af6 <UART_SetConfig+0x1a2>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005adc:	e0ad      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae4:	e0a9      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aec:	e0a5      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005aee:	2308      	movs	r3, #8
 8005af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af4:	e0a1      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005af6:	2310      	movs	r3, #16
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afc:	e09d      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <UART_SetConfig+0x2d8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0x200>
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b12:	2bc0      	cmp	r3, #192	; 0xc0
 8005b14:	d016      	beq.n	8005b44 <UART_SetConfig+0x1f0>
 8005b16:	2bc0      	cmp	r3, #192	; 0xc0
 8005b18:	d818      	bhi.n	8005b4c <UART_SetConfig+0x1f8>
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d00a      	beq.n	8005b34 <UART_SetConfig+0x1e0>
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d814      	bhi.n	8005b4c <UART_SetConfig+0x1f8>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <UART_SetConfig+0x1d8>
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d008      	beq.n	8005b3c <UART_SetConfig+0x1e8>
 8005b2a:	e00f      	b.n	8005b4c <UART_SetConfig+0x1f8>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b32:	e082      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b34:	2302      	movs	r3, #2
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e07e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e07a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b44:	2308      	movs	r3, #8
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4a:	e076      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b52:	e072      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <UART_SetConfig+0x2dc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d12a      	bne.n	8005bb4 <UART_SetConfig+0x260>
 8005b5e:	4b30      	ldr	r3, [pc, #192]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b6c:	d01a      	beq.n	8005ba4 <UART_SetConfig+0x250>
 8005b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b72:	d81b      	bhi.n	8005bac <UART_SetConfig+0x258>
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b78:	d00c      	beq.n	8005b94 <UART_SetConfig+0x240>
 8005b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7e:	d815      	bhi.n	8005bac <UART_SetConfig+0x258>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <UART_SetConfig+0x238>
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b88:	d008      	beq.n	8005b9c <UART_SetConfig+0x248>
 8005b8a:	e00f      	b.n	8005bac <UART_SetConfig+0x258>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b92:	e052      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b94:	2302      	movs	r3, #2
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9a:	e04e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba2:	e04a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005baa:	e046      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb2:	e042      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <UART_SetConfig+0x2c4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d13a      	bne.n	8005c34 <UART_SetConfig+0x2e0>
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <UART_SetConfig+0x2cc>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bcc:	d01a      	beq.n	8005c04 <UART_SetConfig+0x2b0>
 8005bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd2:	d81b      	bhi.n	8005c0c <UART_SetConfig+0x2b8>
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd8:	d00c      	beq.n	8005bf4 <UART_SetConfig+0x2a0>
 8005bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bde:	d815      	bhi.n	8005c0c <UART_SetConfig+0x2b8>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <UART_SetConfig+0x298>
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d008      	beq.n	8005bfc <UART_SetConfig+0x2a8>
 8005bea:	e00f      	b.n	8005c0c <UART_SetConfig+0x2b8>
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf2:	e022      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfa:	e01e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c02:	e01a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c0a:	e016      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c12:	e012      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005c14:	efff69f3 	.word	0xefff69f3
 8005c18:	40008000 	.word	0x40008000
 8005c1c:	40013800 	.word	0x40013800
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40004400 	.word	0x40004400
 8005c28:	40004800 	.word	0x40004800
 8005c2c:	40004c00 	.word	0x40004c00
 8005c30:	40005000 	.word	0x40005000
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a9f      	ldr	r2, [pc, #636]	; (8005ebc <UART_SetConfig+0x568>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d17a      	bne.n	8005d3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d824      	bhi.n	8005c96 <UART_SetConfig+0x342>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x300>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c87 	.word	0x08005c87
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005c97 	.word	0x08005c97
 8005c74:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7fe f946 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b8f      	ldr	r3, [pc, #572]	; (8005ec0 <UART_SetConfig+0x56c>)
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe f8a7 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61f8      	str	r0, [r7, #28]
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80fb 	beq.w	8005ea0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d305      	bcc.n	8005cc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d903      	bls.n	8005cce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ccc:	e0e8      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	022b      	lsls	r3, r5, #8
 8005ce0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ce4:	0222      	lsls	r2, r4, #8
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	6849      	ldr	r1, [r1, #4]
 8005cea:	0849      	lsrs	r1, r1, #1
 8005cec:	2000      	movs	r0, #0
 8005cee:	4688      	mov	r8, r1
 8005cf0:	4681      	mov	r9, r0
 8005cf2:	eb12 0a08 	adds.w	sl, r2, r8
 8005cf6:	eb43 0b09 	adc.w	fp, r3, r9
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d08:	4650      	mov	r0, sl
 8005d0a:	4659      	mov	r1, fp
 8005d0c:	f7fa ffbc 	bl	8000c88 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1e:	d308      	bcc.n	8005d32 <UART_SetConfig+0x3de>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d26:	d204      	bcs.n	8005d32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	e0b6      	b.n	8005ea0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d38:	e0b2      	b.n	8005ea0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d42:	d15e      	bne.n	8005e02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d828      	bhi.n	8005d9e <UART_SetConfig+0x44a>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <UART_SetConfig+0x400>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005d97 	.word	0x08005d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d78:	f7fe f8c6 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8005d7c:	61f8      	str	r0, [r7, #28]
        break;
 8005d7e:	e014      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe f8d8 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8005d84:	61f8      	str	r0, [r7, #28]
        break;
 8005d86:	e010      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <UART_SetConfig+0x56c>)
 8005d8a:	61fb      	str	r3, [r7, #28]
        break;
 8005d8c:	e00d      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7fe f823 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8005d92:	61f8      	str	r0, [r7, #28]
        break;
 8005d94:	e009      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9a:	61fb      	str	r3, [r7, #28]
        break;
 8005d9c:	e005      	b.n	8005daa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d077      	beq.n	8005ea0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	005a      	lsls	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d916      	bls.n	8005dfa <UART_SetConfig+0x4a6>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d212      	bcs.n	8005dfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f023 030f 	bic.w	r3, r3, #15
 8005ddc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	8afb      	ldrh	r3, [r7, #22]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	8afa      	ldrh	r2, [r7, #22]
 8005df6:	60da      	str	r2, [r3, #12]
 8005df8:	e052      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e00:	e04e      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d827      	bhi.n	8005e5a <UART_SetConfig+0x506>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <UART_SetConfig+0x4bc>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	08005e5b 	.word	0x08005e5b
 8005e20:	08005e4b 	.word	0x08005e4b
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e5b 	.word	0x08005e5b
 8005e2c:	08005e5b 	.word	0x08005e5b
 8005e30:	08005e53 	.word	0x08005e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e34:	f7fe f868 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e014      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fe f87a 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8005e40:	61f8      	str	r0, [r7, #28]
        break;
 8005e42:	e010      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <UART_SetConfig+0x56c>)
 8005e46:	61fb      	str	r3, [r7, #28]
        break;
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fd ffc5 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8005e4e:	61f8      	str	r0, [r7, #28]
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e56:	61fb      	str	r3, [r7, #28]
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e64:	bf00      	nop
    }

    if (pclk != 0U)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d019      	beq.n	8005ea0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	085a      	lsrs	r2, r3, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b0f      	cmp	r3, #15
 8005e84:	d909      	bls.n	8005e9a <UART_SetConfig+0x546>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d205      	bcs.n	8005e9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	e002      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005eac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eba:	bf00      	nop
 8005ebc:	40008000 	.word	0x40008000
 8005ec0:	00f42400 	.word	0x00f42400

08005ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc2:	d10a      	bne.n	8005fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b098      	sub	sp, #96	; 0x60
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006018:	f7fc feae 	bl	8002d78 <HAL_GetTick>
 800601c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d12e      	bne.n	800608a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006034:	2200      	movs	r2, #0
 8006036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f88c 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d021      	beq.n	800608a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605a:	653b      	str	r3, [r7, #80]	; 0x50
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
 8006066:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800606a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e062      	b.n	8006150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d149      	bne.n	800612c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a0:	2200      	movs	r2, #0
 80060a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f856 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d03c      	beq.n	800612c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	623b      	str	r3, [r7, #32]
   return(result);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	633b      	str	r3, [r7, #48]	; 0x30
 80060d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e6      	bne.n	80060b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3308      	adds	r3, #8
 80060ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e011      	b.n	8006150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3758      	adds	r7, #88	; 0x58
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006168:	e049      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d045      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006172:	f7fc fe01 	bl	8002d78 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <UART_WaitOnFlagUntilTimeout+0x30>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e048      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d031      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d110      	bne.n	80061ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2208      	movs	r2, #8
 80061ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f838 	bl	8006226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2208      	movs	r2, #8
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e029      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d111      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f81e 	bl	8006226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e00f      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4013      	ands	r3, r2
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	429a      	cmp	r2, r3
 800621a:	d0a6      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006226:	b480      	push	{r7}
 8006228:	b095      	sub	sp, #84	; 0x54
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624c:	643b      	str	r3, [r7, #64]	; 0x40
 800624e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e6      	bne.n	800622e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006298:	2b01      	cmp	r3, #1
 800629a:	d118      	bne.n	80062ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0310 	bic.w	r3, r3, #16
 80062b0:	647b      	str	r3, [r7, #68]	; 0x44
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	613b      	str	r3, [r7, #16]
   return(result);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062e2:	bf00      	nop
 80062e4:	3754      	adds	r7, #84	; 0x54
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <_ZdlPvj>:
 80062ee:	f000 b800 	b.w	80062f2 <_ZdlPv>

080062f2 <_ZdlPv>:
 80062f2:	f000 b80f 	b.w	8006314 <free>

080062f6 <abort>:
 80062f6:	b508      	push	{r3, lr}
 80062f8:	2006      	movs	r0, #6
 80062fa:	f000 fe7b 	bl	8006ff4 <raise>
 80062fe:	2001      	movs	r0, #1
 8006300:	f7fc fbe0 	bl	8002ac4 <_exit>

08006304 <malloc>:
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <malloc+0xc>)
 8006306:	4601      	mov	r1, r0
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f000 b82b 	b.w	8006364 <_malloc_r>
 800630e:	bf00      	nop
 8006310:	20000064 	.word	0x20000064

08006314 <free>:
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <free+0xc>)
 8006316:	4601      	mov	r1, r0
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	f001 bd97 	b.w	8007e4c <_free_r>
 800631e:	bf00      	nop
 8006320:	20000064 	.word	0x20000064

08006324 <sbrk_aligned>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	4e0e      	ldr	r6, [pc, #56]	; (8006360 <sbrk_aligned+0x3c>)
 8006328:	460c      	mov	r4, r1
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	4605      	mov	r5, r0
 800632e:	b911      	cbnz	r1, 8006336 <sbrk_aligned+0x12>
 8006330:	f000 feb4 	bl	800709c <_sbrk_r>
 8006334:	6030      	str	r0, [r6, #0]
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 feaf 	bl	800709c <_sbrk_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d00a      	beq.n	8006358 <sbrk_aligned+0x34>
 8006342:	1cc4      	adds	r4, r0, #3
 8006344:	f024 0403 	bic.w	r4, r4, #3
 8006348:	42a0      	cmp	r0, r4
 800634a:	d007      	beq.n	800635c <sbrk_aligned+0x38>
 800634c:	1a21      	subs	r1, r4, r0
 800634e:	4628      	mov	r0, r5
 8006350:	f000 fea4 	bl	800709c <_sbrk_r>
 8006354:	3001      	adds	r0, #1
 8006356:	d101      	bne.n	800635c <sbrk_aligned+0x38>
 8006358:	f04f 34ff 	mov.w	r4, #4294967295
 800635c:	4620      	mov	r0, r4
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	20000484 	.word	0x20000484

08006364 <_malloc_r>:
 8006364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006368:	1ccd      	adds	r5, r1, #3
 800636a:	f025 0503 	bic.w	r5, r5, #3
 800636e:	3508      	adds	r5, #8
 8006370:	2d0c      	cmp	r5, #12
 8006372:	bf38      	it	cc
 8006374:	250c      	movcc	r5, #12
 8006376:	2d00      	cmp	r5, #0
 8006378:	4607      	mov	r7, r0
 800637a:	db01      	blt.n	8006380 <_malloc_r+0x1c>
 800637c:	42a9      	cmp	r1, r5
 800637e:	d905      	bls.n	800638c <_malloc_r+0x28>
 8006380:	230c      	movs	r3, #12
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	2600      	movs	r6, #0
 8006386:	4630      	mov	r0, r6
 8006388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006460 <_malloc_r+0xfc>
 8006390:	f000 f868 	bl	8006464 <__malloc_lock>
 8006394:	f8d8 3000 	ldr.w	r3, [r8]
 8006398:	461c      	mov	r4, r3
 800639a:	bb5c      	cbnz	r4, 80063f4 <_malloc_r+0x90>
 800639c:	4629      	mov	r1, r5
 800639e:	4638      	mov	r0, r7
 80063a0:	f7ff ffc0 	bl	8006324 <sbrk_aligned>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	4604      	mov	r4, r0
 80063a8:	d155      	bne.n	8006456 <_malloc_r+0xf2>
 80063aa:	f8d8 4000 	ldr.w	r4, [r8]
 80063ae:	4626      	mov	r6, r4
 80063b0:	2e00      	cmp	r6, #0
 80063b2:	d145      	bne.n	8006440 <_malloc_r+0xdc>
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	d048      	beq.n	800644a <_malloc_r+0xe6>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	4631      	mov	r1, r6
 80063bc:	4638      	mov	r0, r7
 80063be:	eb04 0903 	add.w	r9, r4, r3
 80063c2:	f000 fe6b 	bl	800709c <_sbrk_r>
 80063c6:	4581      	cmp	r9, r0
 80063c8:	d13f      	bne.n	800644a <_malloc_r+0xe6>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	1a6d      	subs	r5, r5, r1
 80063ce:	4629      	mov	r1, r5
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ffa7 	bl	8006324 <sbrk_aligned>
 80063d6:	3001      	adds	r0, #1
 80063d8:	d037      	beq.n	800644a <_malloc_r+0xe6>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	442b      	add	r3, r5
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	f8d8 3000 	ldr.w	r3, [r8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d038      	beq.n	800645a <_malloc_r+0xf6>
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	42a2      	cmp	r2, r4
 80063ec:	d12b      	bne.n	8006446 <_malloc_r+0xe2>
 80063ee:	2200      	movs	r2, #0
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	e00f      	b.n	8006414 <_malloc_r+0xb0>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	1b52      	subs	r2, r2, r5
 80063f8:	d41f      	bmi.n	800643a <_malloc_r+0xd6>
 80063fa:	2a0b      	cmp	r2, #11
 80063fc:	d917      	bls.n	800642e <_malloc_r+0xca>
 80063fe:	1961      	adds	r1, r4, r5
 8006400:	42a3      	cmp	r3, r4
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	6059      	strne	r1, [r3, #4]
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	bf08      	it	eq
 800640c:	f8c8 1000 	streq.w	r1, [r8]
 8006410:	5162      	str	r2, [r4, r5]
 8006412:	604b      	str	r3, [r1, #4]
 8006414:	4638      	mov	r0, r7
 8006416:	f104 060b 	add.w	r6, r4, #11
 800641a:	f000 f829 	bl	8006470 <__malloc_unlock>
 800641e:	f026 0607 	bic.w	r6, r6, #7
 8006422:	1d23      	adds	r3, r4, #4
 8006424:	1af2      	subs	r2, r6, r3
 8006426:	d0ae      	beq.n	8006386 <_malloc_r+0x22>
 8006428:	1b9b      	subs	r3, r3, r6
 800642a:	50a3      	str	r3, [r4, r2]
 800642c:	e7ab      	b.n	8006386 <_malloc_r+0x22>
 800642e:	42a3      	cmp	r3, r4
 8006430:	6862      	ldr	r2, [r4, #4]
 8006432:	d1dd      	bne.n	80063f0 <_malloc_r+0x8c>
 8006434:	f8c8 2000 	str.w	r2, [r8]
 8006438:	e7ec      	b.n	8006414 <_malloc_r+0xb0>
 800643a:	4623      	mov	r3, r4
 800643c:	6864      	ldr	r4, [r4, #4]
 800643e:	e7ac      	b.n	800639a <_malloc_r+0x36>
 8006440:	4634      	mov	r4, r6
 8006442:	6876      	ldr	r6, [r6, #4]
 8006444:	e7b4      	b.n	80063b0 <_malloc_r+0x4c>
 8006446:	4613      	mov	r3, r2
 8006448:	e7cc      	b.n	80063e4 <_malloc_r+0x80>
 800644a:	230c      	movs	r3, #12
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4638      	mov	r0, r7
 8006450:	f000 f80e 	bl	8006470 <__malloc_unlock>
 8006454:	e797      	b.n	8006386 <_malloc_r+0x22>
 8006456:	6025      	str	r5, [r4, #0]
 8006458:	e7dc      	b.n	8006414 <_malloc_r+0xb0>
 800645a:	605b      	str	r3, [r3, #4]
 800645c:	deff      	udf	#255	; 0xff
 800645e:	bf00      	nop
 8006460:	20000480 	.word	0x20000480

08006464 <__malloc_lock>:
 8006464:	4801      	ldr	r0, [pc, #4]	; (800646c <__malloc_lock+0x8>)
 8006466:	f000 be66 	b.w	8007136 <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	200005c8 	.word	0x200005c8

08006470 <__malloc_unlock>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__malloc_unlock+0x8>)
 8006472:	f000 be61 	b.w	8007138 <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	200005c8 	.word	0x200005c8

0800647c <__cvt>:
 800647c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	ec55 4b10 	vmov	r4, r5, d0
 8006484:	2d00      	cmp	r5, #0
 8006486:	460e      	mov	r6, r1
 8006488:	4619      	mov	r1, r3
 800648a:	462b      	mov	r3, r5
 800648c:	bfbb      	ittet	lt
 800648e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006492:	461d      	movlt	r5, r3
 8006494:	2300      	movge	r3, #0
 8006496:	232d      	movlt	r3, #45	; 0x2d
 8006498:	700b      	strb	r3, [r1, #0]
 800649a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800649c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064a0:	4691      	mov	r9, r2
 80064a2:	f023 0820 	bic.w	r8, r3, #32
 80064a6:	bfbc      	itt	lt
 80064a8:	4622      	movlt	r2, r4
 80064aa:	4614      	movlt	r4, r2
 80064ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064b0:	d005      	beq.n	80064be <__cvt+0x42>
 80064b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064b6:	d100      	bne.n	80064ba <__cvt+0x3e>
 80064b8:	3601      	adds	r6, #1
 80064ba:	2102      	movs	r1, #2
 80064bc:	e000      	b.n	80064c0 <__cvt+0x44>
 80064be:	2103      	movs	r1, #3
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	ab02      	add	r3, sp, #8
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	ec45 4b10 	vmov	d0, r4, r5
 80064cc:	4653      	mov	r3, sl
 80064ce:	4632      	mov	r2, r6
 80064d0:	f000 feca 	bl	8007268 <_dtoa_r>
 80064d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064d8:	4607      	mov	r7, r0
 80064da:	d102      	bne.n	80064e2 <__cvt+0x66>
 80064dc:	f019 0f01 	tst.w	r9, #1
 80064e0:	d022      	beq.n	8006528 <__cvt+0xac>
 80064e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064e6:	eb07 0906 	add.w	r9, r7, r6
 80064ea:	d110      	bne.n	800650e <__cvt+0x92>
 80064ec:	783b      	ldrb	r3, [r7, #0]
 80064ee:	2b30      	cmp	r3, #48	; 0x30
 80064f0:	d10a      	bne.n	8006508 <__cvt+0x8c>
 80064f2:	2200      	movs	r2, #0
 80064f4:	2300      	movs	r3, #0
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80064fe:	b918      	cbnz	r0, 8006508 <__cvt+0x8c>
 8006500:	f1c6 0601 	rsb	r6, r6, #1
 8006504:	f8ca 6000 	str.w	r6, [sl]
 8006508:	f8da 3000 	ldr.w	r3, [sl]
 800650c:	4499      	add	r9, r3
 800650e:	2200      	movs	r2, #0
 8006510:	2300      	movs	r3, #0
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7fa fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800651a:	b108      	cbz	r0, 8006520 <__cvt+0xa4>
 800651c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006520:	2230      	movs	r2, #48	; 0x30
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	454b      	cmp	r3, r9
 8006526:	d307      	bcc.n	8006538 <__cvt+0xbc>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800652c:	1bdb      	subs	r3, r3, r7
 800652e:	4638      	mov	r0, r7
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	b004      	add	sp, #16
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	9103      	str	r1, [sp, #12]
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e7f0      	b.n	8006522 <__cvt+0xa6>

08006540 <__exponent>:
 8006540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006542:	4603      	mov	r3, r0
 8006544:	2900      	cmp	r1, #0
 8006546:	bfb8      	it	lt
 8006548:	4249      	neglt	r1, r1
 800654a:	f803 2b02 	strb.w	r2, [r3], #2
 800654e:	bfb4      	ite	lt
 8006550:	222d      	movlt	r2, #45	; 0x2d
 8006552:	222b      	movge	r2, #43	; 0x2b
 8006554:	2909      	cmp	r1, #9
 8006556:	7042      	strb	r2, [r0, #1]
 8006558:	dd2a      	ble.n	80065b0 <__exponent+0x70>
 800655a:	f10d 0207 	add.w	r2, sp, #7
 800655e:	4617      	mov	r7, r2
 8006560:	260a      	movs	r6, #10
 8006562:	4694      	mov	ip, r2
 8006564:	fb91 f5f6 	sdiv	r5, r1, r6
 8006568:	fb06 1415 	mls	r4, r6, r5, r1
 800656c:	3430      	adds	r4, #48	; 0x30
 800656e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006572:	460c      	mov	r4, r1
 8006574:	2c63      	cmp	r4, #99	; 0x63
 8006576:	f102 32ff 	add.w	r2, r2, #4294967295
 800657a:	4629      	mov	r1, r5
 800657c:	dcf1      	bgt.n	8006562 <__exponent+0x22>
 800657e:	3130      	adds	r1, #48	; 0x30
 8006580:	f1ac 0402 	sub.w	r4, ip, #2
 8006584:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006588:	1c41      	adds	r1, r0, #1
 800658a:	4622      	mov	r2, r4
 800658c:	42ba      	cmp	r2, r7
 800658e:	d30a      	bcc.n	80065a6 <__exponent+0x66>
 8006590:	f10d 0209 	add.w	r2, sp, #9
 8006594:	eba2 020c 	sub.w	r2, r2, ip
 8006598:	42bc      	cmp	r4, r7
 800659a:	bf88      	it	hi
 800659c:	2200      	movhi	r2, #0
 800659e:	4413      	add	r3, r2
 80065a0:	1a18      	subs	r0, r3, r0
 80065a2:	b003      	add	sp, #12
 80065a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80065aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80065ae:	e7ed      	b.n	800658c <__exponent+0x4c>
 80065b0:	2330      	movs	r3, #48	; 0x30
 80065b2:	3130      	adds	r1, #48	; 0x30
 80065b4:	7083      	strb	r3, [r0, #2]
 80065b6:	70c1      	strb	r1, [r0, #3]
 80065b8:	1d03      	adds	r3, r0, #4
 80065ba:	e7f1      	b.n	80065a0 <__exponent+0x60>

080065bc <_printf_float>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	ed2d 8b02 	vpush	{d8}
 80065c4:	b08d      	sub	sp, #52	; 0x34
 80065c6:	460c      	mov	r4, r1
 80065c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065cc:	4616      	mov	r6, r2
 80065ce:	461f      	mov	r7, r3
 80065d0:	4605      	mov	r5, r0
 80065d2:	f000 fd17 	bl	8007004 <_localeconv_r>
 80065d6:	f8d0 a000 	ldr.w	sl, [r0]
 80065da:	4650      	mov	r0, sl
 80065dc:	f7f9 fe48 	bl	8000270 <strlen>
 80065e0:	2300      	movs	r3, #0
 80065e2:	930a      	str	r3, [sp, #40]	; 0x28
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	9305      	str	r3, [sp, #20]
 80065e8:	f8d8 3000 	ldr.w	r3, [r8]
 80065ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065f0:	3307      	adds	r3, #7
 80065f2:	f023 0307 	bic.w	r3, r3, #7
 80065f6:	f103 0208 	add.w	r2, r3, #8
 80065fa:	f8c8 2000 	str.w	r2, [r8]
 80065fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006606:	9307      	str	r3, [sp, #28]
 8006608:	f8cd 8018 	str.w	r8, [sp, #24]
 800660c:	ee08 0a10 	vmov	s16, r0
 8006610:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006614:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006618:	4b9e      	ldr	r3, [pc, #632]	; (8006894 <_printf_float+0x2d8>)
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	f7fa fa85 	bl	8000b2c <__aeabi_dcmpun>
 8006622:	bb88      	cbnz	r0, 8006688 <_printf_float+0xcc>
 8006624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006628:	4b9a      	ldr	r3, [pc, #616]	; (8006894 <_printf_float+0x2d8>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	f7fa fa5f 	bl	8000af0 <__aeabi_dcmple>
 8006632:	bb48      	cbnz	r0, 8006688 <_printf_float+0xcc>
 8006634:	2200      	movs	r2, #0
 8006636:	2300      	movs	r3, #0
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7fa fa4e 	bl	8000adc <__aeabi_dcmplt>
 8006640:	b110      	cbz	r0, 8006648 <_printf_float+0x8c>
 8006642:	232d      	movs	r3, #45	; 0x2d
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	4a93      	ldr	r2, [pc, #588]	; (8006898 <_printf_float+0x2dc>)
 800664a:	4b94      	ldr	r3, [pc, #592]	; (800689c <_printf_float+0x2e0>)
 800664c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006650:	bf94      	ite	ls
 8006652:	4690      	movls	r8, r2
 8006654:	4698      	movhi	r8, r3
 8006656:	2303      	movs	r3, #3
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	9b05      	ldr	r3, [sp, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	f04f 0900 	mov.w	r9, #0
 8006666:	9700      	str	r7, [sp, #0]
 8006668:	4633      	mov	r3, r6
 800666a:	aa0b      	add	r2, sp, #44	; 0x2c
 800666c:	4621      	mov	r1, r4
 800666e:	4628      	mov	r0, r5
 8006670:	f000 f9da 	bl	8006a28 <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	f040 8090 	bne.w	800679a <_printf_float+0x1de>
 800667a:	f04f 30ff 	mov.w	r0, #4294967295
 800667e:	b00d      	add	sp, #52	; 0x34
 8006680:	ecbd 8b02 	vpop	{d8}
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	4640      	mov	r0, r8
 800668e:	4649      	mov	r1, r9
 8006690:	f7fa fa4c 	bl	8000b2c <__aeabi_dcmpun>
 8006694:	b140      	cbz	r0, 80066a8 <_printf_float+0xec>
 8006696:	464b      	mov	r3, r9
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfbc      	itt	lt
 800669c:	232d      	movlt	r3, #45	; 0x2d
 800669e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066a2:	4a7f      	ldr	r2, [pc, #508]	; (80068a0 <_printf_float+0x2e4>)
 80066a4:	4b7f      	ldr	r3, [pc, #508]	; (80068a4 <_printf_float+0x2e8>)
 80066a6:	e7d1      	b.n	800664c <_printf_float+0x90>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066ae:	9206      	str	r2, [sp, #24]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	d13f      	bne.n	8006734 <_printf_float+0x178>
 80066b4:	2306      	movs	r3, #6
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	9b05      	ldr	r3, [sp, #20]
 80066ba:	6861      	ldr	r1, [r4, #4]
 80066bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066c0:	2300      	movs	r3, #0
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	ab0a      	add	r3, sp, #40	; 0x28
 80066c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066ca:	ab09      	add	r3, sp, #36	; 0x24
 80066cc:	ec49 8b10 	vmov	d0, r8, r9
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff fecf 	bl	800647c <__cvt>
 80066de:	9b06      	ldr	r3, [sp, #24]
 80066e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e2:	2b47      	cmp	r3, #71	; 0x47
 80066e4:	4680      	mov	r8, r0
 80066e6:	d108      	bne.n	80066fa <_printf_float+0x13e>
 80066e8:	1cc8      	adds	r0, r1, #3
 80066ea:	db02      	blt.n	80066f2 <_printf_float+0x136>
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	4299      	cmp	r1, r3
 80066f0:	dd41      	ble.n	8006776 <_printf_float+0x1ba>
 80066f2:	f1ab 0302 	sub.w	r3, fp, #2
 80066f6:	fa5f fb83 	uxtb.w	fp, r3
 80066fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066fe:	d820      	bhi.n	8006742 <_printf_float+0x186>
 8006700:	3901      	subs	r1, #1
 8006702:	465a      	mov	r2, fp
 8006704:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006708:	9109      	str	r1, [sp, #36]	; 0x24
 800670a:	f7ff ff19 	bl	8006540 <__exponent>
 800670e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006710:	1813      	adds	r3, r2, r0
 8006712:	2a01      	cmp	r2, #1
 8006714:	4681      	mov	r9, r0
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	dc02      	bgt.n	8006720 <_printf_float+0x164>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	07d2      	lsls	r2, r2, #31
 800671e:	d501      	bpl.n	8006724 <_printf_float+0x168>
 8006720:	3301      	adds	r3, #1
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006728:	2b00      	cmp	r3, #0
 800672a:	d09c      	beq.n	8006666 <_printf_float+0xaa>
 800672c:	232d      	movs	r3, #45	; 0x2d
 800672e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006732:	e798      	b.n	8006666 <_printf_float+0xaa>
 8006734:	9a06      	ldr	r2, [sp, #24]
 8006736:	2a47      	cmp	r2, #71	; 0x47
 8006738:	d1be      	bne.n	80066b8 <_printf_float+0xfc>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1bc      	bne.n	80066b8 <_printf_float+0xfc>
 800673e:	2301      	movs	r3, #1
 8006740:	e7b9      	b.n	80066b6 <_printf_float+0xfa>
 8006742:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006746:	d118      	bne.n	800677a <_printf_float+0x1be>
 8006748:	2900      	cmp	r1, #0
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	dd0b      	ble.n	8006766 <_printf_float+0x1aa>
 800674e:	6121      	str	r1, [r4, #16]
 8006750:	b913      	cbnz	r3, 8006758 <_printf_float+0x19c>
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	07d0      	lsls	r0, r2, #31
 8006756:	d502      	bpl.n	800675e <_printf_float+0x1a2>
 8006758:	3301      	adds	r3, #1
 800675a:	440b      	add	r3, r1
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006760:	f04f 0900 	mov.w	r9, #0
 8006764:	e7de      	b.n	8006724 <_printf_float+0x168>
 8006766:	b913      	cbnz	r3, 800676e <_printf_float+0x1b2>
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	07d2      	lsls	r2, r2, #31
 800676c:	d501      	bpl.n	8006772 <_printf_float+0x1b6>
 800676e:	3302      	adds	r3, #2
 8006770:	e7f4      	b.n	800675c <_printf_float+0x1a0>
 8006772:	2301      	movs	r3, #1
 8006774:	e7f2      	b.n	800675c <_printf_float+0x1a0>
 8006776:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800677a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677c:	4299      	cmp	r1, r3
 800677e:	db05      	blt.n	800678c <_printf_float+0x1d0>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	6121      	str	r1, [r4, #16]
 8006784:	07d8      	lsls	r0, r3, #31
 8006786:	d5ea      	bpl.n	800675e <_printf_float+0x1a2>
 8006788:	1c4b      	adds	r3, r1, #1
 800678a:	e7e7      	b.n	800675c <_printf_float+0x1a0>
 800678c:	2900      	cmp	r1, #0
 800678e:	bfd4      	ite	le
 8006790:	f1c1 0202 	rsble	r2, r1, #2
 8006794:	2201      	movgt	r2, #1
 8006796:	4413      	add	r3, r2
 8006798:	e7e0      	b.n	800675c <_printf_float+0x1a0>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	055a      	lsls	r2, r3, #21
 800679e:	d407      	bmi.n	80067b0 <_printf_float+0x1f4>
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	4642      	mov	r2, r8
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	d12c      	bne.n	8006808 <_printf_float+0x24c>
 80067ae:	e764      	b.n	800667a <_printf_float+0xbe>
 80067b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067b4:	f240 80e0 	bls.w	8006978 <_printf_float+0x3bc>
 80067b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067bc:	2200      	movs	r2, #0
 80067be:	2300      	movs	r3, #0
 80067c0:	f7fa f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d034      	beq.n	8006832 <_printf_float+0x276>
 80067c8:	4a37      	ldr	r2, [pc, #220]	; (80068a8 <_printf_float+0x2ec>)
 80067ca:	2301      	movs	r3, #1
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af51 	beq.w	800667a <_printf_float+0xbe>
 80067d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067dc:	429a      	cmp	r2, r3
 80067de:	db02      	blt.n	80067e6 <_printf_float+0x22a>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	07d8      	lsls	r0, r3, #31
 80067e4:	d510      	bpl.n	8006808 <_printf_float+0x24c>
 80067e6:	ee18 3a10 	vmov	r3, s16
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f af41 	beq.w	800667a <_printf_float+0xbe>
 80067f8:	f04f 0800 	mov.w	r8, #0
 80067fc:	f104 091a 	add.w	r9, r4, #26
 8006800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	4543      	cmp	r3, r8
 8006806:	dc09      	bgt.n	800681c <_printf_float+0x260>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	079b      	lsls	r3, r3, #30
 800680c:	f100 8107 	bmi.w	8006a1e <_printf_float+0x462>
 8006810:	68e0      	ldr	r0, [r4, #12]
 8006812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006814:	4298      	cmp	r0, r3
 8006816:	bfb8      	it	lt
 8006818:	4618      	movlt	r0, r3
 800681a:	e730      	b.n	800667e <_printf_float+0xc2>
 800681c:	2301      	movs	r3, #1
 800681e:	464a      	mov	r2, r9
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f af27 	beq.w	800667a <_printf_float+0xbe>
 800682c:	f108 0801 	add.w	r8, r8, #1
 8006830:	e7e6      	b.n	8006800 <_printf_float+0x244>
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc39      	bgt.n	80068ac <_printf_float+0x2f0>
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <_printf_float+0x2ec>)
 800683a:	2301      	movs	r3, #1
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af19 	beq.w	800667a <_printf_float+0xbe>
 8006848:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800684c:	4313      	orrs	r3, r2
 800684e:	d102      	bne.n	8006856 <_printf_float+0x29a>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07d9      	lsls	r1, r3, #31
 8006854:	d5d8      	bpl.n	8006808 <_printf_float+0x24c>
 8006856:	ee18 3a10 	vmov	r3, s16
 800685a:	4652      	mov	r2, sl
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af09 	beq.w	800667a <_printf_float+0xbe>
 8006868:	f04f 0900 	mov.w	r9, #0
 800686c:	f104 0a1a 	add.w	sl, r4, #26
 8006870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006872:	425b      	negs	r3, r3
 8006874:	454b      	cmp	r3, r9
 8006876:	dc01      	bgt.n	800687c <_printf_float+0x2c0>
 8006878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687a:	e792      	b.n	80067a2 <_printf_float+0x1e6>
 800687c:	2301      	movs	r3, #1
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f aef7 	beq.w	800667a <_printf_float+0xbe>
 800688c:	f109 0901 	add.w	r9, r9, #1
 8006890:	e7ee      	b.n	8006870 <_printf_float+0x2b4>
 8006892:	bf00      	nop
 8006894:	7fefffff 	.word	0x7fefffff
 8006898:	080091bc 	.word	0x080091bc
 800689c:	080091c0 	.word	0x080091c0
 80068a0:	080091c4 	.word	0x080091c4
 80068a4:	080091c8 	.word	0x080091c8
 80068a8:	080091cc 	.word	0x080091cc
 80068ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bfa8      	it	ge
 80068b4:	461a      	movge	r2, r3
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	4691      	mov	r9, r2
 80068ba:	dc37      	bgt.n	800692c <_printf_float+0x370>
 80068bc:	f04f 0b00 	mov.w	fp, #0
 80068c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068c4:	f104 021a 	add.w	r2, r4, #26
 80068c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	eba3 0309 	sub.w	r3, r3, r9
 80068d0:	455b      	cmp	r3, fp
 80068d2:	dc33      	bgt.n	800693c <_printf_float+0x380>
 80068d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068d8:	429a      	cmp	r2, r3
 80068da:	db3b      	blt.n	8006954 <_printf_float+0x398>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	07da      	lsls	r2, r3, #31
 80068e0:	d438      	bmi.n	8006954 <_printf_float+0x398>
 80068e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068e6:	eba2 0903 	sub.w	r9, r2, r3
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	4591      	cmp	r9, r2
 80068f0:	bfa8      	it	ge
 80068f2:	4691      	movge	r9, r2
 80068f4:	f1b9 0f00 	cmp.w	r9, #0
 80068f8:	dc35      	bgt.n	8006966 <_printf_float+0x3aa>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006902:	f104 0a1a 	add.w	sl, r4, #26
 8006906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	eba3 0309 	sub.w	r3, r3, r9
 8006910:	4543      	cmp	r3, r8
 8006912:	f77f af79 	ble.w	8006808 <_printf_float+0x24c>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f aeaa 	beq.w	800667a <_printf_float+0xbe>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	e7ec      	b.n	8006906 <_printf_float+0x34a>
 800692c:	4613      	mov	r3, r2
 800692e:	4631      	mov	r1, r6
 8006930:	4642      	mov	r2, r8
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	d1c0      	bne.n	80068bc <_printf_float+0x300>
 800693a:	e69e      	b.n	800667a <_printf_float+0xbe>
 800693c:	2301      	movs	r3, #1
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	9205      	str	r2, [sp, #20]
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f ae97 	beq.w	800667a <_printf_float+0xbe>
 800694c:	9a05      	ldr	r2, [sp, #20]
 800694e:	f10b 0b01 	add.w	fp, fp, #1
 8006952:	e7b9      	b.n	80068c8 <_printf_float+0x30c>
 8006954:	ee18 3a10 	vmov	r3, s16
 8006958:	4652      	mov	r2, sl
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d1be      	bne.n	80068e2 <_printf_float+0x326>
 8006964:	e689      	b.n	800667a <_printf_float+0xbe>
 8006966:	9a05      	ldr	r2, [sp, #20]
 8006968:	464b      	mov	r3, r9
 800696a:	4442      	add	r2, r8
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	d1c1      	bne.n	80068fa <_printf_float+0x33e>
 8006976:	e680      	b.n	800667a <_printf_float+0xbe>
 8006978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800697a:	2a01      	cmp	r2, #1
 800697c:	dc01      	bgt.n	8006982 <_printf_float+0x3c6>
 800697e:	07db      	lsls	r3, r3, #31
 8006980:	d53a      	bpl.n	80069f8 <_printf_float+0x43c>
 8006982:	2301      	movs	r3, #1
 8006984:	4642      	mov	r2, r8
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f ae74 	beq.w	800667a <_printf_float+0xbe>
 8006992:	ee18 3a10 	vmov	r3, s16
 8006996:	4652      	mov	r2, sl
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f ae6b 	beq.w	800667a <_printf_float+0xbe>
 80069a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069a8:	2200      	movs	r2, #0
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80069b0:	f7fa f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b4:	b9d8      	cbnz	r0, 80069ee <_printf_float+0x432>
 80069b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069ba:	f108 0201 	add.w	r2, r8, #1
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	d10e      	bne.n	80069e6 <_printf_float+0x42a>
 80069c8:	e657      	b.n	800667a <_printf_float+0xbe>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4652      	mov	r2, sl
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f ae50 	beq.w	800667a <_printf_float+0xbe>
 80069da:	f108 0801 	add.w	r8, r8, #1
 80069de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e0:	3b01      	subs	r3, #1
 80069e2:	4543      	cmp	r3, r8
 80069e4:	dcf1      	bgt.n	80069ca <_printf_float+0x40e>
 80069e6:	464b      	mov	r3, r9
 80069e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069ec:	e6da      	b.n	80067a4 <_printf_float+0x1e8>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	f104 0a1a 	add.w	sl, r4, #26
 80069f6:	e7f2      	b.n	80069de <_printf_float+0x422>
 80069f8:	2301      	movs	r3, #1
 80069fa:	4642      	mov	r2, r8
 80069fc:	e7df      	b.n	80069be <_printf_float+0x402>
 80069fe:	2301      	movs	r3, #1
 8006a00:	464a      	mov	r2, r9
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae36 	beq.w	800667a <_printf_float+0xbe>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	68e3      	ldr	r3, [r4, #12]
 8006a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a16:	1a5b      	subs	r3, r3, r1
 8006a18:	4543      	cmp	r3, r8
 8006a1a:	dcf0      	bgt.n	80069fe <_printf_float+0x442>
 8006a1c:	e6f8      	b.n	8006810 <_printf_float+0x254>
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	f104 0919 	add.w	r9, r4, #25
 8006a26:	e7f4      	b.n	8006a12 <_printf_float+0x456>

08006a28 <_printf_common>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	4699      	mov	r9, r3
 8006a30:	688a      	ldr	r2, [r1, #8]
 8006a32:	690b      	ldr	r3, [r1, #16]
 8006a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	bfb8      	it	lt
 8006a3c:	4613      	movlt	r3, r2
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a44:	4607      	mov	r7, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b10a      	cbz	r2, 8006a4e <_printf_common+0x26>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	0699      	lsls	r1, r3, #26
 8006a52:	bf42      	ittt	mi
 8006a54:	6833      	ldrmi	r3, [r6, #0]
 8006a56:	3302      	addmi	r3, #2
 8006a58:	6033      	strmi	r3, [r6, #0]
 8006a5a:	6825      	ldr	r5, [r4, #0]
 8006a5c:	f015 0506 	ands.w	r5, r5, #6
 8006a60:	d106      	bne.n	8006a70 <_printf_common+0x48>
 8006a62:	f104 0a19 	add.w	sl, r4, #25
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	6832      	ldr	r2, [r6, #0]
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dc26      	bgt.n	8006abe <_printf_common+0x96>
 8006a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a74:	1e13      	subs	r3, r2, #0
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	0692      	lsls	r2, r2, #26
 8006a7e:	d42b      	bmi.n	8006ad8 <_printf_common+0xb0>
 8006a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a84:	4649      	mov	r1, r9
 8006a86:	4638      	mov	r0, r7
 8006a88:	47c0      	blx	r8
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d01e      	beq.n	8006acc <_printf_common+0xa4>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	6922      	ldr	r2, [r4, #16]
 8006a92:	f003 0306 	and.w	r3, r3, #6
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	bf02      	ittt	eq
 8006a9a:	68e5      	ldreq	r5, [r4, #12]
 8006a9c:	6833      	ldreq	r3, [r6, #0]
 8006a9e:	1aed      	subeq	r5, r5, r3
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	bf0c      	ite	eq
 8006aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa8:	2500      	movne	r5, #0
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bfc4      	itt	gt
 8006aae:	1a9b      	subgt	r3, r3, r2
 8006ab0:	18ed      	addgt	r5, r5, r3
 8006ab2:	2600      	movs	r6, #0
 8006ab4:	341a      	adds	r4, #26
 8006ab6:	42b5      	cmp	r5, r6
 8006ab8:	d11a      	bne.n	8006af0 <_printf_common+0xc8>
 8006aba:	2000      	movs	r0, #0
 8006abc:	e008      	b.n	8006ad0 <_printf_common+0xa8>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	47c0      	blx	r8
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d103      	bne.n	8006ad4 <_printf_common+0xac>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	e7c6      	b.n	8006a66 <_printf_common+0x3e>
 8006ad8:	18e1      	adds	r1, r4, r3
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	2030      	movs	r0, #48	; 0x30
 8006ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ae2:	4422      	add	r2, r4
 8006ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aec:	3302      	adds	r3, #2
 8006aee:	e7c7      	b.n	8006a80 <_printf_common+0x58>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4622      	mov	r2, r4
 8006af4:	4649      	mov	r1, r9
 8006af6:	4638      	mov	r0, r7
 8006af8:	47c0      	blx	r8
 8006afa:	3001      	adds	r0, #1
 8006afc:	d0e6      	beq.n	8006acc <_printf_common+0xa4>
 8006afe:	3601      	adds	r6, #1
 8006b00:	e7d9      	b.n	8006ab6 <_printf_common+0x8e>
	...

08006b04 <_printf_i>:
 8006b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	7e0f      	ldrb	r7, [r1, #24]
 8006b0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b0c:	2f78      	cmp	r7, #120	; 0x78
 8006b0e:	4691      	mov	r9, r2
 8006b10:	4680      	mov	r8, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	469a      	mov	sl, r3
 8006b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b1a:	d807      	bhi.n	8006b2c <_printf_i+0x28>
 8006b1c:	2f62      	cmp	r7, #98	; 0x62
 8006b1e:	d80a      	bhi.n	8006b36 <_printf_i+0x32>
 8006b20:	2f00      	cmp	r7, #0
 8006b22:	f000 80d4 	beq.w	8006cce <_printf_i+0x1ca>
 8006b26:	2f58      	cmp	r7, #88	; 0x58
 8006b28:	f000 80c0 	beq.w	8006cac <_printf_i+0x1a8>
 8006b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b34:	e03a      	b.n	8006bac <_printf_i+0xa8>
 8006b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b3a:	2b15      	cmp	r3, #21
 8006b3c:	d8f6      	bhi.n	8006b2c <_printf_i+0x28>
 8006b3e:	a101      	add	r1, pc, #4	; (adr r1, 8006b44 <_printf_i+0x40>)
 8006b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006bb1 	.word	0x08006bb1
 8006b4c:	08006b2d 	.word	0x08006b2d
 8006b50:	08006b2d 	.word	0x08006b2d
 8006b54:	08006b2d 	.word	0x08006b2d
 8006b58:	08006b2d 	.word	0x08006b2d
 8006b5c:	08006bb1 	.word	0x08006bb1
 8006b60:	08006b2d 	.word	0x08006b2d
 8006b64:	08006b2d 	.word	0x08006b2d
 8006b68:	08006b2d 	.word	0x08006b2d
 8006b6c:	08006b2d 	.word	0x08006b2d
 8006b70:	08006cb5 	.word	0x08006cb5
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006c6f 	.word	0x08006c6f
 8006b7c:	08006b2d 	.word	0x08006b2d
 8006b80:	08006b2d 	.word	0x08006b2d
 8006b84:	08006cd7 	.word	0x08006cd7
 8006b88:	08006b2d 	.word	0x08006b2d
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006b2d 	.word	0x08006b2d
 8006b94:	08006b2d 	.word	0x08006b2d
 8006b98:	08006c77 	.word	0x08006c77
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	1d1a      	adds	r2, r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	602a      	str	r2, [r5, #0]
 8006ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bac:	2301      	movs	r3, #1
 8006bae:	e09f      	b.n	8006cf0 <_printf_i+0x1ec>
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	0607      	lsls	r7, r0, #24
 8006bb6:	f103 0104 	add.w	r1, r3, #4
 8006bba:	6029      	str	r1, [r5, #0]
 8006bbc:	d501      	bpl.n	8006bc2 <_printf_i+0xbe>
 8006bbe:	681e      	ldr	r6, [r3, #0]
 8006bc0:	e003      	b.n	8006bca <_printf_i+0xc6>
 8006bc2:	0646      	lsls	r6, r0, #25
 8006bc4:	d5fb      	bpl.n	8006bbe <_printf_i+0xba>
 8006bc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	da03      	bge.n	8006bd6 <_printf_i+0xd2>
 8006bce:	232d      	movs	r3, #45	; 0x2d
 8006bd0:	4276      	negs	r6, r6
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd6:	485a      	ldr	r0, [pc, #360]	; (8006d40 <_printf_i+0x23c>)
 8006bd8:	230a      	movs	r3, #10
 8006bda:	e012      	b.n	8006c02 <_printf_i+0xfe>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	6820      	ldr	r0, [r4, #0]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	6029      	str	r1, [r5, #0]
 8006be4:	0605      	lsls	r5, r0, #24
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0xe8>
 8006be8:	681e      	ldr	r6, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <_printf_i+0xee>
 8006bec:	0641      	lsls	r1, r0, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0xe4>
 8006bf0:	881e      	ldrh	r6, [r3, #0]
 8006bf2:	4853      	ldr	r0, [pc, #332]	; (8006d40 <_printf_i+0x23c>)
 8006bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2308      	moveq	r3, #8
 8006bfa:	230a      	movne	r3, #10
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c02:	6865      	ldr	r5, [r4, #4]
 8006c04:	60a5      	str	r5, [r4, #8]
 8006c06:	2d00      	cmp	r5, #0
 8006c08:	bfa2      	ittt	ge
 8006c0a:	6821      	ldrge	r1, [r4, #0]
 8006c0c:	f021 0104 	bicge.w	r1, r1, #4
 8006c10:	6021      	strge	r1, [r4, #0]
 8006c12:	b90e      	cbnz	r6, 8006c18 <_printf_i+0x114>
 8006c14:	2d00      	cmp	r5, #0
 8006c16:	d04b      	beq.n	8006cb0 <_printf_i+0x1ac>
 8006c18:	4615      	mov	r5, r2
 8006c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c22:	5dc7      	ldrb	r7, [r0, r7]
 8006c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c28:	4637      	mov	r7, r6
 8006c2a:	42bb      	cmp	r3, r7
 8006c2c:	460e      	mov	r6, r1
 8006c2e:	d9f4      	bls.n	8006c1a <_printf_i+0x116>
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d10b      	bne.n	8006c4c <_printf_i+0x148>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	07de      	lsls	r6, r3, #31
 8006c38:	d508      	bpl.n	8006c4c <_printf_i+0x148>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	bfde      	ittt	le
 8006c42:	2330      	movle	r3, #48	; 0x30
 8006c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c4c:	1b52      	subs	r2, r2, r5
 8006c4e:	6122      	str	r2, [r4, #16]
 8006c50:	f8cd a000 	str.w	sl, [sp]
 8006c54:	464b      	mov	r3, r9
 8006c56:	aa03      	add	r2, sp, #12
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f7ff fee4 	bl	8006a28 <_printf_common>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d14a      	bne.n	8006cfa <_printf_i+0x1f6>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b004      	add	sp, #16
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	f043 0320 	orr.w	r3, r3, #32
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	4833      	ldr	r0, [pc, #204]	; (8006d44 <_printf_i+0x240>)
 8006c78:	2778      	movs	r7, #120	; 0x78
 8006c7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6829      	ldr	r1, [r5, #0]
 8006c82:	061f      	lsls	r7, r3, #24
 8006c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c88:	d402      	bmi.n	8006c90 <_printf_i+0x18c>
 8006c8a:	065f      	lsls	r7, r3, #25
 8006c8c:	bf48      	it	mi
 8006c8e:	b2b6      	uxthmi	r6, r6
 8006c90:	07df      	lsls	r7, r3, #31
 8006c92:	bf48      	it	mi
 8006c94:	f043 0320 	orrmi.w	r3, r3, #32
 8006c98:	6029      	str	r1, [r5, #0]
 8006c9a:	bf48      	it	mi
 8006c9c:	6023      	strmi	r3, [r4, #0]
 8006c9e:	b91e      	cbnz	r6, 8006ca8 <_printf_i+0x1a4>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	f023 0320 	bic.w	r3, r3, #32
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	2310      	movs	r3, #16
 8006caa:	e7a7      	b.n	8006bfc <_printf_i+0xf8>
 8006cac:	4824      	ldr	r0, [pc, #144]	; (8006d40 <_printf_i+0x23c>)
 8006cae:	e7e4      	b.n	8006c7a <_printf_i+0x176>
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	e7bd      	b.n	8006c30 <_printf_i+0x12c>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	6826      	ldr	r6, [r4, #0]
 8006cb8:	6961      	ldr	r1, [r4, #20]
 8006cba:	1d18      	adds	r0, r3, #4
 8006cbc:	6028      	str	r0, [r5, #0]
 8006cbe:	0635      	lsls	r5, r6, #24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	d501      	bpl.n	8006cc8 <_printf_i+0x1c4>
 8006cc4:	6019      	str	r1, [r3, #0]
 8006cc6:	e002      	b.n	8006cce <_printf_i+0x1ca>
 8006cc8:	0670      	lsls	r0, r6, #25
 8006cca:	d5fb      	bpl.n	8006cc4 <_printf_i+0x1c0>
 8006ccc:	8019      	strh	r1, [r3, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	4615      	mov	r5, r2
 8006cd4:	e7bc      	b.n	8006c50 <_printf_i+0x14c>
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	1d1a      	adds	r2, r3, #4
 8006cda:	602a      	str	r2, [r5, #0]
 8006cdc:	681d      	ldr	r5, [r3, #0]
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f7f9 fa74 	bl	80001d0 <memchr>
 8006ce8:	b108      	cbz	r0, 8006cee <_printf_i+0x1ea>
 8006cea:	1b40      	subs	r0, r0, r5
 8006cec:	6060      	str	r0, [r4, #4]
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	e7aa      	b.n	8006c50 <_printf_i+0x14c>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	462a      	mov	r2, r5
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4640      	mov	r0, r8
 8006d02:	47d0      	blx	sl
 8006d04:	3001      	adds	r0, #1
 8006d06:	d0ad      	beq.n	8006c64 <_printf_i+0x160>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	079b      	lsls	r3, r3, #30
 8006d0c:	d413      	bmi.n	8006d36 <_printf_i+0x232>
 8006d0e:	68e0      	ldr	r0, [r4, #12]
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	4298      	cmp	r0, r3
 8006d14:	bfb8      	it	lt
 8006d16:	4618      	movlt	r0, r3
 8006d18:	e7a6      	b.n	8006c68 <_printf_i+0x164>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d09d      	beq.n	8006c64 <_printf_i+0x160>
 8006d28:	3501      	adds	r5, #1
 8006d2a:	68e3      	ldr	r3, [r4, #12]
 8006d2c:	9903      	ldr	r1, [sp, #12]
 8006d2e:	1a5b      	subs	r3, r3, r1
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	dcf2      	bgt.n	8006d1a <_printf_i+0x216>
 8006d34:	e7eb      	b.n	8006d0e <_printf_i+0x20a>
 8006d36:	2500      	movs	r5, #0
 8006d38:	f104 0619 	add.w	r6, r4, #25
 8006d3c:	e7f5      	b.n	8006d2a <_printf_i+0x226>
 8006d3e:	bf00      	nop
 8006d40:	080091ce 	.word	0x080091ce
 8006d44:	080091df 	.word	0x080091df

08006d48 <std>:
 8006d48:	2300      	movs	r3, #0
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d56:	6083      	str	r3, [r0, #8]
 8006d58:	8181      	strh	r1, [r0, #12]
 8006d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d5c:	81c2      	strh	r2, [r0, #14]
 8006d5e:	6183      	str	r3, [r0, #24]
 8006d60:	4619      	mov	r1, r3
 8006d62:	2208      	movs	r2, #8
 8006d64:	305c      	adds	r0, #92	; 0x5c
 8006d66:	f000 f914 	bl	8006f92 <memset>
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <std+0x58>)
 8006d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <std+0x5c>)
 8006d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d72:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <std+0x60>)
 8006d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <std+0x64>)
 8006d78:	6323      	str	r3, [r4, #48]	; 0x30
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <std+0x68>)
 8006d7c:	6224      	str	r4, [r4, #32]
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d006      	beq.n	8006d90 <std+0x48>
 8006d82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d86:	4294      	cmp	r4, r2
 8006d88:	d002      	beq.n	8006d90 <std+0x48>
 8006d8a:	33d0      	adds	r3, #208	; 0xd0
 8006d8c:	429c      	cmp	r4, r3
 8006d8e:	d105      	bne.n	8006d9c <std+0x54>
 8006d90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d98:	f000 b9cc 	b.w	8007134 <__retarget_lock_init_recursive>
 8006d9c:	bd10      	pop	{r4, pc}
 8006d9e:	bf00      	nop
 8006da0:	08006f0d 	.word	0x08006f0d
 8006da4:	08006f2f 	.word	0x08006f2f
 8006da8:	08006f67 	.word	0x08006f67
 8006dac:	08006f8b 	.word	0x08006f8b
 8006db0:	20000488 	.word	0x20000488

08006db4 <stdio_exit_handler>:
 8006db4:	4a02      	ldr	r2, [pc, #8]	; (8006dc0 <stdio_exit_handler+0xc>)
 8006db6:	4903      	ldr	r1, [pc, #12]	; (8006dc4 <stdio_exit_handler+0x10>)
 8006db8:	4803      	ldr	r0, [pc, #12]	; (8006dc8 <stdio_exit_handler+0x14>)
 8006dba:	f000 b869 	b.w	8006e90 <_fwalk_sglue>
 8006dbe:	bf00      	nop
 8006dc0:	2000000c 	.word	0x2000000c
 8006dc4:	08008999 	.word	0x08008999
 8006dc8:	20000018 	.word	0x20000018

08006dcc <cleanup_stdio>:
 8006dcc:	6841      	ldr	r1, [r0, #4]
 8006dce:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <cleanup_stdio+0x34>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	d001      	beq.n	8006ddc <cleanup_stdio+0x10>
 8006dd8:	f001 fdde 	bl	8008998 <_fflush_r>
 8006ddc:	68a1      	ldr	r1, [r4, #8]
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <cleanup_stdio+0x38>)
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d002      	beq.n	8006dea <cleanup_stdio+0x1e>
 8006de4:	4620      	mov	r0, r4
 8006de6:	f001 fdd7 	bl	8008998 <_fflush_r>
 8006dea:	68e1      	ldr	r1, [r4, #12]
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <cleanup_stdio+0x3c>)
 8006dee:	4299      	cmp	r1, r3
 8006df0:	d004      	beq.n	8006dfc <cleanup_stdio+0x30>
 8006df2:	4620      	mov	r0, r4
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df8:	f001 bdce 	b.w	8008998 <_fflush_r>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000488 	.word	0x20000488
 8006e04:	200004f0 	.word	0x200004f0
 8006e08:	20000558 	.word	0x20000558

08006e0c <global_stdio_init.part.0>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <global_stdio_init.part.0+0x30>)
 8006e10:	4c0b      	ldr	r4, [pc, #44]	; (8006e40 <global_stdio_init.part.0+0x34>)
 8006e12:	4a0c      	ldr	r2, [pc, #48]	; (8006e44 <global_stdio_init.part.0+0x38>)
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	4620      	mov	r0, r4
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2104      	movs	r1, #4
 8006e1c:	f7ff ff94 	bl	8006d48 <std>
 8006e20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e24:	2201      	movs	r2, #1
 8006e26:	2109      	movs	r1, #9
 8006e28:	f7ff ff8e 	bl	8006d48 <std>
 8006e2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e30:	2202      	movs	r2, #2
 8006e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e36:	2112      	movs	r1, #18
 8006e38:	f7ff bf86 	b.w	8006d48 <std>
 8006e3c:	200005c0 	.word	0x200005c0
 8006e40:	20000488 	.word	0x20000488
 8006e44:	08006db5 	.word	0x08006db5

08006e48 <__sfp_lock_acquire>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__sfp_lock_acquire+0x8>)
 8006e4a:	f000 b974 	b.w	8007136 <__retarget_lock_acquire_recursive>
 8006e4e:	bf00      	nop
 8006e50:	200005c9 	.word	0x200005c9

08006e54 <__sfp_lock_release>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__sfp_lock_release+0x8>)
 8006e56:	f000 b96f 	b.w	8007138 <__retarget_lock_release_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	200005c9 	.word	0x200005c9

08006e60 <__sinit>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4604      	mov	r4, r0
 8006e64:	f7ff fff0 	bl	8006e48 <__sfp_lock_acquire>
 8006e68:	6a23      	ldr	r3, [r4, #32]
 8006e6a:	b11b      	cbz	r3, 8006e74 <__sinit+0x14>
 8006e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e70:	f7ff bff0 	b.w	8006e54 <__sfp_lock_release>
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <__sinit+0x28>)
 8006e76:	6223      	str	r3, [r4, #32]
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <__sinit+0x2c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f5      	bne.n	8006e6c <__sinit+0xc>
 8006e80:	f7ff ffc4 	bl	8006e0c <global_stdio_init.part.0>
 8006e84:	e7f2      	b.n	8006e6c <__sinit+0xc>
 8006e86:	bf00      	nop
 8006e88:	08006dcd 	.word	0x08006dcd
 8006e8c:	200005c0 	.word	0x200005c0

08006e90 <_fwalk_sglue>:
 8006e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	4607      	mov	r7, r0
 8006e96:	4688      	mov	r8, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ea4:	d505      	bpl.n	8006eb2 <_fwalk_sglue+0x22>
 8006ea6:	6824      	ldr	r4, [r4, #0]
 8006ea8:	2c00      	cmp	r4, #0
 8006eaa:	d1f7      	bne.n	8006e9c <_fwalk_sglue+0xc>
 8006eac:	4630      	mov	r0, r6
 8006eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d907      	bls.n	8006ec8 <_fwalk_sglue+0x38>
 8006eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	d003      	beq.n	8006ec8 <_fwalk_sglue+0x38>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c0      	blx	r8
 8006ec6:	4306      	orrs	r6, r0
 8006ec8:	3568      	adds	r5, #104	; 0x68
 8006eca:	e7e9      	b.n	8006ea0 <_fwalk_sglue+0x10>

08006ecc <siprintf>:
 8006ecc:	b40e      	push	{r1, r2, r3}
 8006ece:	b500      	push	{lr}
 8006ed0:	b09c      	sub	sp, #112	; 0x70
 8006ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	9006      	str	r0, [sp, #24]
 8006ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006edc:	4809      	ldr	r0, [pc, #36]	; (8006f04 <siprintf+0x38>)
 8006ede:	9107      	str	r1, [sp, #28]
 8006ee0:	9104      	str	r1, [sp, #16]
 8006ee2:	4909      	ldr	r1, [pc, #36]	; (8006f08 <siprintf+0x3c>)
 8006ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee8:	9105      	str	r1, [sp, #20]
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	a902      	add	r1, sp, #8
 8006ef0:	f001 fbce 	bl	8008690 <_svfiprintf_r>
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	b01c      	add	sp, #112	; 0x70
 8006efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f00:	b003      	add	sp, #12
 8006f02:	4770      	bx	lr
 8006f04:	20000064 	.word	0x20000064
 8006f08:	ffff0208 	.word	0xffff0208

08006f0c <__sread>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	460c      	mov	r4, r1
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	f000 f89c 	bl	8007050 <_read_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	bfab      	itete	ge
 8006f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f20:	181b      	addge	r3, r3, r0
 8006f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f26:	bfac      	ite	ge
 8006f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f2a:	81a3      	strhlt	r3, [r4, #12]
 8006f2c:	bd10      	pop	{r4, pc}

08006f2e <__swrite>:
 8006f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f32:	461f      	mov	r7, r3
 8006f34:	898b      	ldrh	r3, [r1, #12]
 8006f36:	05db      	lsls	r3, r3, #23
 8006f38:	4605      	mov	r5, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	d505      	bpl.n	8006f4c <__swrite+0x1e>
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	2302      	movs	r3, #2
 8006f46:	2200      	movs	r2, #0
 8006f48:	f000 f870 	bl	800702c <_lseek_r>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	4632      	mov	r2, r6
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	f000 b8ab 	b.w	80070bc <_write_r>

08006f66 <__sseek>:
 8006f66:	b510      	push	{r4, lr}
 8006f68:	460c      	mov	r4, r1
 8006f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6e:	f000 f85d 	bl	800702c <_lseek_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	bf15      	itete	ne
 8006f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f82:	81a3      	strheq	r3, [r4, #12]
 8006f84:	bf18      	it	ne
 8006f86:	81a3      	strhne	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__sclose>:
 8006f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8e:	f000 b83d 	b.w	800700c <_close_r>

08006f92 <memset>:
 8006f92:	4402      	add	r2, r0
 8006f94:	4603      	mov	r3, r0
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d100      	bne.n	8006f9c <memset+0xa>
 8006f9a:	4770      	bx	lr
 8006f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa0:	e7f9      	b.n	8006f96 <memset+0x4>

08006fa2 <_raise_r>:
 8006fa2:	291f      	cmp	r1, #31
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	d904      	bls.n	8006fb6 <_raise_r+0x14>
 8006fac:	2316      	movs	r3, #22
 8006fae:	6003      	str	r3, [r0, #0]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006fb8:	b112      	cbz	r2, 8006fc0 <_raise_r+0x1e>
 8006fba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fbe:	b94b      	cbnz	r3, 8006fd4 <_raise_r+0x32>
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 f869 	bl	8007098 <_getpid_r>
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4601      	mov	r1, r0
 8006fca:	4620      	mov	r0, r4
 8006fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd0:	f000 b850 	b.w	8007074 <_kill_r>
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d00a      	beq.n	8006fee <_raise_r+0x4c>
 8006fd8:	1c59      	adds	r1, r3, #1
 8006fda:	d103      	bne.n	8006fe4 <_raise_r+0x42>
 8006fdc:	2316      	movs	r3, #22
 8006fde:	6003      	str	r3, [r0, #0]
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7e7      	b.n	8006fb4 <_raise_r+0x12>
 8006fe4:	2400      	movs	r4, #0
 8006fe6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fea:	4628      	mov	r0, r5
 8006fec:	4798      	blx	r3
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e7e0      	b.n	8006fb4 <_raise_r+0x12>
	...

08006ff4 <raise>:
 8006ff4:	4b02      	ldr	r3, [pc, #8]	; (8007000 <raise+0xc>)
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	f7ff bfd2 	b.w	8006fa2 <_raise_r>
 8006ffe:	bf00      	nop
 8007000:	20000064 	.word	0x20000064

08007004 <_localeconv_r>:
 8007004:	4800      	ldr	r0, [pc, #0]	; (8007008 <_localeconv_r+0x4>)
 8007006:	4770      	bx	lr
 8007008:	20000158 	.word	0x20000158

0800700c <_close_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_close_r+0x1c>)
 8007010:	2300      	movs	r3, #0
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	f7fb fd97 	bl	8002b4a <_close>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_close_r+0x1a>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_close_r+0x1a>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	200005c4 	.word	0x200005c4

0800702c <_lseek_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_lseek_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fb fdac 	bl	8002b98 <_lseek>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_lseek_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_lseek_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	200005c4 	.word	0x200005c4

08007050 <_read_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d07      	ldr	r5, [pc, #28]	; (8007070 <_read_r+0x20>)
 8007054:	4604      	mov	r4, r0
 8007056:	4608      	mov	r0, r1
 8007058:	4611      	mov	r1, r2
 800705a:	2200      	movs	r2, #0
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7fb fd3a 	bl	8002ad8 <_read>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_read_r+0x1e>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_read_r+0x1e>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	200005c4 	.word	0x200005c4

08007074 <_kill_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d07      	ldr	r5, [pc, #28]	; (8007094 <_kill_r+0x20>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	f7fb fd0f 	bl	8002aa4 <_kill>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d102      	bne.n	8007090 <_kill_r+0x1c>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b103      	cbz	r3, 8007090 <_kill_r+0x1c>
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	bd38      	pop	{r3, r4, r5, pc}
 8007092:	bf00      	nop
 8007094:	200005c4 	.word	0x200005c4

08007098 <_getpid_r>:
 8007098:	f7fb bcfc 	b.w	8002a94 <_getpid>

0800709c <_sbrk_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d06      	ldr	r5, [pc, #24]	; (80070b8 <_sbrk_r+0x1c>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7fb fd84 	bl	8002bb4 <_sbrk>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_sbrk_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_sbrk_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200005c4 	.word	0x200005c4

080070bc <_write_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	; (80070dc <_write_r+0x20>)
 80070c0:	4604      	mov	r4, r0
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7fb fd21 	bl	8002b12 <_write>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_write_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_write_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	200005c4 	.word	0x200005c4

080070e0 <__errno>:
 80070e0:	4b01      	ldr	r3, [pc, #4]	; (80070e8 <__errno+0x8>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000064 	.word	0x20000064

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4d0d      	ldr	r5, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2600      	movs	r6, #0
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4d0b      	ldr	r5, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f001 ff86 	bl	8009010 <_init>
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2600      	movs	r6, #0
 800710a:	42a6      	cmp	r6, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f855 3b04 	ldr.w	r3, [r5], #4
 8007114:	4798      	blx	r3
 8007116:	3601      	adds	r6, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f855 3b04 	ldr.w	r3, [r5], #4
 800711e:	4798      	blx	r3
 8007120:	3601      	adds	r6, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	08009534 	.word	0x08009534
 8007128:	08009534 	.word	0x08009534
 800712c:	08009534 	.word	0x08009534
 8007130:	0800953c 	.word	0x0800953c

08007134 <__retarget_lock_init_recursive>:
 8007134:	4770      	bx	lr

08007136 <__retarget_lock_acquire_recursive>:
 8007136:	4770      	bx	lr

08007138 <__retarget_lock_release_recursive>:
 8007138:	4770      	bx	lr

0800713a <memcpy>:
 800713a:	440a      	add	r2, r1
 800713c:	4291      	cmp	r1, r2
 800713e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007142:	d100      	bne.n	8007146 <memcpy+0xc>
 8007144:	4770      	bx	lr
 8007146:	b510      	push	{r4, lr}
 8007148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800714c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007150:	4291      	cmp	r1, r2
 8007152:	d1f9      	bne.n	8007148 <memcpy+0xe>
 8007154:	bd10      	pop	{r4, pc}

08007156 <quorem>:
 8007156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	6903      	ldr	r3, [r0, #16]
 800715c:	690c      	ldr	r4, [r1, #16]
 800715e:	42a3      	cmp	r3, r4
 8007160:	4607      	mov	r7, r0
 8007162:	db7e      	blt.n	8007262 <quorem+0x10c>
 8007164:	3c01      	subs	r4, #1
 8007166:	f101 0814 	add.w	r8, r1, #20
 800716a:	f100 0514 	add.w	r5, r0, #20
 800716e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717c:	3301      	adds	r3, #1
 800717e:	429a      	cmp	r2, r3
 8007180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007188:	fbb2 f6f3 	udiv	r6, r2, r3
 800718c:	d331      	bcc.n	80071f2 <quorem+0x9c>
 800718e:	f04f 0e00 	mov.w	lr, #0
 8007192:	4640      	mov	r0, r8
 8007194:	46ac      	mov	ip, r5
 8007196:	46f2      	mov	sl, lr
 8007198:	f850 2b04 	ldr.w	r2, [r0], #4
 800719c:	b293      	uxth	r3, r2
 800719e:	fb06 e303 	mla	r3, r6, r3, lr
 80071a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071a6:	0c1a      	lsrs	r2, r3, #16
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	ebaa 0303 	sub.w	r3, sl, r3
 80071ae:	f8dc a000 	ldr.w	sl, [ip]
 80071b2:	fa13 f38a 	uxtah	r3, r3, sl
 80071b6:	fb06 220e 	mla	r2, r6, lr, r2
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071c2:	b292      	uxth	r2, r2
 80071c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80071d0:	4581      	cmp	r9, r0
 80071d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d6:	f84c 3b04 	str.w	r3, [ip], #4
 80071da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071de:	d2db      	bcs.n	8007198 <quorem+0x42>
 80071e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80071e4:	b92b      	cbnz	r3, 80071f2 <quorem+0x9c>
 80071e6:	9b01      	ldr	r3, [sp, #4]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	429d      	cmp	r5, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	d32c      	bcc.n	800724a <quorem+0xf4>
 80071f0:	613c      	str	r4, [r7, #16]
 80071f2:	4638      	mov	r0, r7
 80071f4:	f001 f8f2 	bl	80083dc <__mcmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	db22      	blt.n	8007242 <quorem+0xec>
 80071fc:	3601      	adds	r6, #1
 80071fe:	4629      	mov	r1, r5
 8007200:	2000      	movs	r0, #0
 8007202:	f858 2b04 	ldr.w	r2, [r8], #4
 8007206:	f8d1 c000 	ldr.w	ip, [r1]
 800720a:	b293      	uxth	r3, r2
 800720c:	1ac3      	subs	r3, r0, r3
 800720e:	0c12      	lsrs	r2, r2, #16
 8007210:	fa13 f38c 	uxtah	r3, r3, ip
 8007214:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800721c:	b29b      	uxth	r3, r3
 800721e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007222:	45c1      	cmp	r9, r8
 8007224:	f841 3b04 	str.w	r3, [r1], #4
 8007228:	ea4f 4022 	mov.w	r0, r2, asr #16
 800722c:	d2e9      	bcs.n	8007202 <quorem+0xac>
 800722e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007236:	b922      	cbnz	r2, 8007242 <quorem+0xec>
 8007238:	3b04      	subs	r3, #4
 800723a:	429d      	cmp	r5, r3
 800723c:	461a      	mov	r2, r3
 800723e:	d30a      	bcc.n	8007256 <quorem+0x100>
 8007240:	613c      	str	r4, [r7, #16]
 8007242:	4630      	mov	r0, r6
 8007244:	b003      	add	sp, #12
 8007246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	3b04      	subs	r3, #4
 800724e:	2a00      	cmp	r2, #0
 8007250:	d1ce      	bne.n	80071f0 <quorem+0x9a>
 8007252:	3c01      	subs	r4, #1
 8007254:	e7c9      	b.n	80071ea <quorem+0x94>
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	3b04      	subs	r3, #4
 800725a:	2a00      	cmp	r2, #0
 800725c:	d1f0      	bne.n	8007240 <quorem+0xea>
 800725e:	3c01      	subs	r4, #1
 8007260:	e7eb      	b.n	800723a <quorem+0xe4>
 8007262:	2000      	movs	r0, #0
 8007264:	e7ee      	b.n	8007244 <quorem+0xee>
	...

08007268 <_dtoa_r>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	ed2d 8b04 	vpush	{d8-d9}
 8007270:	69c5      	ldr	r5, [r0, #28]
 8007272:	b093      	sub	sp, #76	; 0x4c
 8007274:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007278:	ec57 6b10 	vmov	r6, r7, d0
 800727c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007280:	9107      	str	r1, [sp, #28]
 8007282:	4604      	mov	r4, r0
 8007284:	920a      	str	r2, [sp, #40]	; 0x28
 8007286:	930d      	str	r3, [sp, #52]	; 0x34
 8007288:	b975      	cbnz	r5, 80072a8 <_dtoa_r+0x40>
 800728a:	2010      	movs	r0, #16
 800728c:	f7ff f83a 	bl	8006304 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	61e0      	str	r0, [r4, #28]
 8007294:	b920      	cbnz	r0, 80072a0 <_dtoa_r+0x38>
 8007296:	4bae      	ldr	r3, [pc, #696]	; (8007550 <_dtoa_r+0x2e8>)
 8007298:	21ef      	movs	r1, #239	; 0xef
 800729a:	48ae      	ldr	r0, [pc, #696]	; (8007554 <_dtoa_r+0x2ec>)
 800729c:	f001 fbbe 	bl	8008a1c <__assert_func>
 80072a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072a4:	6005      	str	r5, [r0, #0]
 80072a6:	60c5      	str	r5, [r0, #12]
 80072a8:	69e3      	ldr	r3, [r4, #28]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	b151      	cbz	r1, 80072c4 <_dtoa_r+0x5c>
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	604a      	str	r2, [r1, #4]
 80072b2:	2301      	movs	r3, #1
 80072b4:	4093      	lsls	r3, r2
 80072b6:	608b      	str	r3, [r1, #8]
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 fe53 	bl	8007f64 <_Bfree>
 80072be:	69e3      	ldr	r3, [r4, #28]
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	1e3b      	subs	r3, r7, #0
 80072c6:	bfbb      	ittet	lt
 80072c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	9303      	strlt	r3, [sp, #12]
 80072ce:	2300      	movge	r3, #0
 80072d0:	2201      	movlt	r2, #1
 80072d2:	bfac      	ite	ge
 80072d4:	f8c8 3000 	strge.w	r3, [r8]
 80072d8:	f8c8 2000 	strlt.w	r2, [r8]
 80072dc:	4b9e      	ldr	r3, [pc, #632]	; (8007558 <_dtoa_r+0x2f0>)
 80072de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072e2:	ea33 0308 	bics.w	r3, r3, r8
 80072e6:	d11b      	bne.n	8007320 <_dtoa_r+0xb8>
 80072e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072f4:	4333      	orrs	r3, r6
 80072f6:	f000 8593 	beq.w	8007e20 <_dtoa_r+0xbb8>
 80072fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072fc:	b963      	cbnz	r3, 8007318 <_dtoa_r+0xb0>
 80072fe:	4b97      	ldr	r3, [pc, #604]	; (800755c <_dtoa_r+0x2f4>)
 8007300:	e027      	b.n	8007352 <_dtoa_r+0xea>
 8007302:	4b97      	ldr	r3, [pc, #604]	; (8007560 <_dtoa_r+0x2f8>)
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	9800      	ldr	r0, [sp, #0]
 800730e:	b013      	add	sp, #76	; 0x4c
 8007310:	ecbd 8b04 	vpop	{d8-d9}
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	4b90      	ldr	r3, [pc, #576]	; (800755c <_dtoa_r+0x2f4>)
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	3303      	adds	r3, #3
 800731e:	e7f3      	b.n	8007308 <_dtoa_r+0xa0>
 8007320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	ec51 0b17 	vmov	r0, r1, d7
 800732a:	eeb0 8a47 	vmov.f32	s16, s14
 800732e:	eef0 8a67 	vmov.f32	s17, s15
 8007332:	2300      	movs	r3, #0
 8007334:	f7f9 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007338:	4681      	mov	r9, r0
 800733a:	b160      	cbz	r0, 8007356 <_dtoa_r+0xee>
 800733c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800733e:	2301      	movs	r3, #1
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8568 	beq.w	8007e1a <_dtoa_r+0xbb2>
 800734a:	4b86      	ldr	r3, [pc, #536]	; (8007564 <_dtoa_r+0x2fc>)
 800734c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	3b01      	subs	r3, #1
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	e7da      	b.n	800730c <_dtoa_r+0xa4>
 8007356:	aa10      	add	r2, sp, #64	; 0x40
 8007358:	a911      	add	r1, sp, #68	; 0x44
 800735a:	4620      	mov	r0, r4
 800735c:	eeb0 0a48 	vmov.f32	s0, s16
 8007360:	eef0 0a68 	vmov.f32	s1, s17
 8007364:	f001 f8e0 	bl	8008528 <__d2b>
 8007368:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800736c:	4682      	mov	sl, r0
 800736e:	2d00      	cmp	r5, #0
 8007370:	d07f      	beq.n	8007472 <_dtoa_r+0x20a>
 8007372:	ee18 3a90 	vmov	r3, s17
 8007376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800737a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800737e:	ec51 0b18 	vmov	r0, r1, d8
 8007382:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800738a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800738e:	4619      	mov	r1, r3
 8007390:	2200      	movs	r2, #0
 8007392:	4b75      	ldr	r3, [pc, #468]	; (8007568 <_dtoa_r+0x300>)
 8007394:	f7f8 ff78 	bl	8000288 <__aeabi_dsub>
 8007398:	a367      	add	r3, pc, #412	; (adr r3, 8007538 <_dtoa_r+0x2d0>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f9 f92b 	bl	80005f8 <__aeabi_dmul>
 80073a2:	a367      	add	r3, pc, #412	; (adr r3, 8007540 <_dtoa_r+0x2d8>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f8 ff70 	bl	800028c <__adddf3>
 80073ac:	4606      	mov	r6, r0
 80073ae:	4628      	mov	r0, r5
 80073b0:	460f      	mov	r7, r1
 80073b2:	f7f9 f8b7 	bl	8000524 <__aeabi_i2d>
 80073b6:	a364      	add	r3, pc, #400	; (adr r3, 8007548 <_dtoa_r+0x2e0>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4630      	mov	r0, r6
 80073c6:	4639      	mov	r1, r7
 80073c8:	f7f8 ff60 	bl	800028c <__adddf3>
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	f7f9 fbc2 	bl	8000b58 <__aeabi_d2iz>
 80073d4:	2200      	movs	r2, #0
 80073d6:	4683      	mov	fp, r0
 80073d8:	2300      	movs	r3, #0
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fb7d 	bl	8000adc <__aeabi_dcmplt>
 80073e2:	b148      	cbz	r0, 80073f8 <_dtoa_r+0x190>
 80073e4:	4658      	mov	r0, fp
 80073e6:	f7f9 f89d 	bl	8000524 <__aeabi_i2d>
 80073ea:	4632      	mov	r2, r6
 80073ec:	463b      	mov	r3, r7
 80073ee:	f7f9 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f2:	b908      	cbnz	r0, 80073f8 <_dtoa_r+0x190>
 80073f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073f8:	f1bb 0f16 	cmp.w	fp, #22
 80073fc:	d857      	bhi.n	80074ae <_dtoa_r+0x246>
 80073fe:	4b5b      	ldr	r3, [pc, #364]	; (800756c <_dtoa_r+0x304>)
 8007400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	ec51 0b18 	vmov	r0, r1, d8
 800740c:	f7f9 fb66 	bl	8000adc <__aeabi_dcmplt>
 8007410:	2800      	cmp	r0, #0
 8007412:	d04e      	beq.n	80074b2 <_dtoa_r+0x24a>
 8007414:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007418:	2300      	movs	r3, #0
 800741a:	930c      	str	r3, [sp, #48]	; 0x30
 800741c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800741e:	1b5b      	subs	r3, r3, r5
 8007420:	1e5a      	subs	r2, r3, #1
 8007422:	bf45      	ittet	mi
 8007424:	f1c3 0301 	rsbmi	r3, r3, #1
 8007428:	9305      	strmi	r3, [sp, #20]
 800742a:	2300      	movpl	r3, #0
 800742c:	2300      	movmi	r3, #0
 800742e:	9206      	str	r2, [sp, #24]
 8007430:	bf54      	ite	pl
 8007432:	9305      	strpl	r3, [sp, #20]
 8007434:	9306      	strmi	r3, [sp, #24]
 8007436:	f1bb 0f00 	cmp.w	fp, #0
 800743a:	db3c      	blt.n	80074b6 <_dtoa_r+0x24e>
 800743c:	9b06      	ldr	r3, [sp, #24]
 800743e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007442:	445b      	add	r3, fp
 8007444:	9306      	str	r3, [sp, #24]
 8007446:	2300      	movs	r3, #0
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	9b07      	ldr	r3, [sp, #28]
 800744c:	2b09      	cmp	r3, #9
 800744e:	d868      	bhi.n	8007522 <_dtoa_r+0x2ba>
 8007450:	2b05      	cmp	r3, #5
 8007452:	bfc4      	itt	gt
 8007454:	3b04      	subgt	r3, #4
 8007456:	9307      	strgt	r3, [sp, #28]
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	f1a3 0302 	sub.w	r3, r3, #2
 800745e:	bfcc      	ite	gt
 8007460:	2500      	movgt	r5, #0
 8007462:	2501      	movle	r5, #1
 8007464:	2b03      	cmp	r3, #3
 8007466:	f200 8085 	bhi.w	8007574 <_dtoa_r+0x30c>
 800746a:	e8df f003 	tbb	[pc, r3]
 800746e:	3b2e      	.short	0x3b2e
 8007470:	5839      	.short	0x5839
 8007472:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007476:	441d      	add	r5, r3
 8007478:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800747c:	2b20      	cmp	r3, #32
 800747e:	bfc1      	itttt	gt
 8007480:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007484:	fa08 f803 	lslgt.w	r8, r8, r3
 8007488:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800748c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007490:	bfd6      	itet	le
 8007492:	f1c3 0320 	rsble	r3, r3, #32
 8007496:	ea48 0003 	orrgt.w	r0, r8, r3
 800749a:	fa06 f003 	lslle.w	r0, r6, r3
 800749e:	f7f9 f831 	bl	8000504 <__aeabi_ui2d>
 80074a2:	2201      	movs	r2, #1
 80074a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80074a8:	3d01      	subs	r5, #1
 80074aa:	920e      	str	r2, [sp, #56]	; 0x38
 80074ac:	e76f      	b.n	800738e <_dtoa_r+0x126>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7b3      	b.n	800741a <_dtoa_r+0x1b2>
 80074b2:	900c      	str	r0, [sp, #48]	; 0x30
 80074b4:	e7b2      	b.n	800741c <_dtoa_r+0x1b4>
 80074b6:	9b05      	ldr	r3, [sp, #20]
 80074b8:	eba3 030b 	sub.w	r3, r3, fp
 80074bc:	9305      	str	r3, [sp, #20]
 80074be:	f1cb 0300 	rsb	r3, fp, #0
 80074c2:	9308      	str	r3, [sp, #32]
 80074c4:	2300      	movs	r3, #0
 80074c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c8:	e7bf      	b.n	800744a <_dtoa_r+0x1e2>
 80074ca:	2300      	movs	r3, #0
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc52      	bgt.n	800757a <_dtoa_r+0x312>
 80074d4:	2301      	movs	r3, #1
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	461a      	mov	r2, r3
 80074dc:	920a      	str	r2, [sp, #40]	; 0x28
 80074de:	e00b      	b.n	80074f8 <_dtoa_r+0x290>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7f3      	b.n	80074cc <_dtoa_r+0x264>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ea:	445b      	add	r3, fp
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	3301      	adds	r3, #1
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	bfb8      	it	lt
 80074f6:	2301      	movlt	r3, #1
 80074f8:	69e0      	ldr	r0, [r4, #28]
 80074fa:	2100      	movs	r1, #0
 80074fc:	2204      	movs	r2, #4
 80074fe:	f102 0614 	add.w	r6, r2, #20
 8007502:	429e      	cmp	r6, r3
 8007504:	d93d      	bls.n	8007582 <_dtoa_r+0x31a>
 8007506:	6041      	str	r1, [r0, #4]
 8007508:	4620      	mov	r0, r4
 800750a:	f000 fceb 	bl	8007ee4 <_Balloc>
 800750e:	9000      	str	r0, [sp, #0]
 8007510:	2800      	cmp	r0, #0
 8007512:	d139      	bne.n	8007588 <_dtoa_r+0x320>
 8007514:	4b16      	ldr	r3, [pc, #88]	; (8007570 <_dtoa_r+0x308>)
 8007516:	4602      	mov	r2, r0
 8007518:	f240 11af 	movw	r1, #431	; 0x1af
 800751c:	e6bd      	b.n	800729a <_dtoa_r+0x32>
 800751e:	2301      	movs	r3, #1
 8007520:	e7e1      	b.n	80074e6 <_dtoa_r+0x27e>
 8007522:	2501      	movs	r5, #1
 8007524:	2300      	movs	r3, #0
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	9509      	str	r5, [sp, #36]	; 0x24
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	2200      	movs	r2, #0
 8007534:	2312      	movs	r3, #18
 8007536:	e7d1      	b.n	80074dc <_dtoa_r+0x274>
 8007538:	636f4361 	.word	0x636f4361
 800753c:	3fd287a7 	.word	0x3fd287a7
 8007540:	8b60c8b3 	.word	0x8b60c8b3
 8007544:	3fc68a28 	.word	0x3fc68a28
 8007548:	509f79fb 	.word	0x509f79fb
 800754c:	3fd34413 	.word	0x3fd34413
 8007550:	080091fd 	.word	0x080091fd
 8007554:	08009214 	.word	0x08009214
 8007558:	7ff00000 	.word	0x7ff00000
 800755c:	080091f9 	.word	0x080091f9
 8007560:	080091f0 	.word	0x080091f0
 8007564:	080091cd 	.word	0x080091cd
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	08009300 	.word	0x08009300
 8007570:	0800926c 	.word	0x0800926c
 8007574:	2301      	movs	r3, #1
 8007576:	9309      	str	r3, [sp, #36]	; 0x24
 8007578:	e7d7      	b.n	800752a <_dtoa_r+0x2c2>
 800757a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	e7ba      	b.n	80074f8 <_dtoa_r+0x290>
 8007582:	3101      	adds	r1, #1
 8007584:	0052      	lsls	r2, r2, #1
 8007586:	e7ba      	b.n	80074fe <_dtoa_r+0x296>
 8007588:	69e3      	ldr	r3, [r4, #28]
 800758a:	9a00      	ldr	r2, [sp, #0]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	2b0e      	cmp	r3, #14
 8007592:	f200 80a8 	bhi.w	80076e6 <_dtoa_r+0x47e>
 8007596:	2d00      	cmp	r5, #0
 8007598:	f000 80a5 	beq.w	80076e6 <_dtoa_r+0x47e>
 800759c:	f1bb 0f00 	cmp.w	fp, #0
 80075a0:	dd38      	ble.n	8007614 <_dtoa_r+0x3ac>
 80075a2:	4bc0      	ldr	r3, [pc, #768]	; (80078a4 <_dtoa_r+0x63c>)
 80075a4:	f00b 020f 	and.w	r2, fp, #15
 80075a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80075b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80075b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80075b8:	d019      	beq.n	80075ee <_dtoa_r+0x386>
 80075ba:	4bbb      	ldr	r3, [pc, #748]	; (80078a8 <_dtoa_r+0x640>)
 80075bc:	ec51 0b18 	vmov	r0, r1, d8
 80075c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075c4:	f7f9 f942 	bl	800084c <__aeabi_ddiv>
 80075c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075cc:	f008 080f 	and.w	r8, r8, #15
 80075d0:	2503      	movs	r5, #3
 80075d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80078a8 <_dtoa_r+0x640>
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	d10a      	bne.n	80075f2 <_dtoa_r+0x38a>
 80075dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e0:	4632      	mov	r2, r6
 80075e2:	463b      	mov	r3, r7
 80075e4:	f7f9 f932 	bl	800084c <__aeabi_ddiv>
 80075e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ec:	e02b      	b.n	8007646 <_dtoa_r+0x3de>
 80075ee:	2502      	movs	r5, #2
 80075f0:	e7ef      	b.n	80075d2 <_dtoa_r+0x36a>
 80075f2:	f018 0f01 	tst.w	r8, #1
 80075f6:	d008      	beq.n	800760a <_dtoa_r+0x3a2>
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007600:	f7f8 fffa 	bl	80005f8 <__aeabi_dmul>
 8007604:	3501      	adds	r5, #1
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800760e:	f109 0908 	add.w	r9, r9, #8
 8007612:	e7e0      	b.n	80075d6 <_dtoa_r+0x36e>
 8007614:	f000 809f 	beq.w	8007756 <_dtoa_r+0x4ee>
 8007618:	f1cb 0600 	rsb	r6, fp, #0
 800761c:	4ba1      	ldr	r3, [pc, #644]	; (80078a4 <_dtoa_r+0x63c>)
 800761e:	4fa2      	ldr	r7, [pc, #648]	; (80078a8 <_dtoa_r+0x640>)
 8007620:	f006 020f 	and.w	r2, r6, #15
 8007624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	ec51 0b18 	vmov	r0, r1, d8
 8007630:	f7f8 ffe2 	bl	80005f8 <__aeabi_dmul>
 8007634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007638:	1136      	asrs	r6, r6, #4
 800763a:	2300      	movs	r3, #0
 800763c:	2502      	movs	r5, #2
 800763e:	2e00      	cmp	r6, #0
 8007640:	d17e      	bne.n	8007740 <_dtoa_r+0x4d8>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1d0      	bne.n	80075e8 <_dtoa_r+0x380>
 8007646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007648:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8084 	beq.w	800775a <_dtoa_r+0x4f2>
 8007652:	4b96      	ldr	r3, [pc, #600]	; (80078ac <_dtoa_r+0x644>)
 8007654:	2200      	movs	r2, #0
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f9 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d07b      	beq.n	800775a <_dtoa_r+0x4f2>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d078      	beq.n	800775a <_dtoa_r+0x4f2>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	dd39      	ble.n	80076e2 <_dtoa_r+0x47a>
 800766e:	4b90      	ldr	r3, [pc, #576]	; (80078b0 <_dtoa_r+0x648>)
 8007670:	2200      	movs	r2, #0
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767e:	9e01      	ldr	r6, [sp, #4]
 8007680:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007684:	3501      	adds	r5, #1
 8007686:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800768a:	4628      	mov	r0, r5
 800768c:	f7f8 ff4a 	bl	8000524 <__aeabi_i2d>
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	4b86      	ldr	r3, [pc, #536]	; (80078b4 <_dtoa_r+0x64c>)
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 fdf6 	bl	800028c <__adddf3>
 80076a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80076a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	d158      	bne.n	8007760 <_dtoa_r+0x4f8>
 80076ae:	4b82      	ldr	r3, [pc, #520]	; (80078b8 <_dtoa_r+0x650>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	f7f8 fde7 	bl	8000288 <__aeabi_dsub>
 80076ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076be:	4680      	mov	r8, r0
 80076c0:	4689      	mov	r9, r1
 80076c2:	f7f9 fa29 	bl	8000b18 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 8296 	bne.w	8007bf8 <_dtoa_r+0x990>
 80076cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076d0:	4640      	mov	r0, r8
 80076d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076d6:	4649      	mov	r1, r9
 80076d8:	f7f9 fa00 	bl	8000adc <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 8289 	bne.w	8007bf4 <_dtoa_r+0x98c>
 80076e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f2c0 814e 	blt.w	800798a <_dtoa_r+0x722>
 80076ee:	f1bb 0f0e 	cmp.w	fp, #14
 80076f2:	f300 814a 	bgt.w	800798a <_dtoa_r+0x722>
 80076f6:	4b6b      	ldr	r3, [pc, #428]	; (80078a4 <_dtoa_r+0x63c>)
 80076f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	f280 80dc 	bge.w	80078c0 <_dtoa_r+0x658>
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f300 80d8 	bgt.w	80078c0 <_dtoa_r+0x658>
 8007710:	f040 826f 	bne.w	8007bf2 <_dtoa_r+0x98a>
 8007714:	4b68      	ldr	r3, [pc, #416]	; (80078b8 <_dtoa_r+0x650>)
 8007716:	2200      	movs	r2, #0
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8007720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007724:	f7f9 f9ee 	bl	8000b04 <__aeabi_dcmpge>
 8007728:	9e04      	ldr	r6, [sp, #16]
 800772a:	4637      	mov	r7, r6
 800772c:	2800      	cmp	r0, #0
 800772e:	f040 8245 	bne.w	8007bbc <_dtoa_r+0x954>
 8007732:	9d00      	ldr	r5, [sp, #0]
 8007734:	2331      	movs	r3, #49	; 0x31
 8007736:	f805 3b01 	strb.w	r3, [r5], #1
 800773a:	f10b 0b01 	add.w	fp, fp, #1
 800773e:	e241      	b.n	8007bc4 <_dtoa_r+0x95c>
 8007740:	07f2      	lsls	r2, r6, #31
 8007742:	d505      	bpl.n	8007750 <_dtoa_r+0x4e8>
 8007744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007748:	f7f8 ff56 	bl	80005f8 <__aeabi_dmul>
 800774c:	3501      	adds	r5, #1
 800774e:	2301      	movs	r3, #1
 8007750:	1076      	asrs	r6, r6, #1
 8007752:	3708      	adds	r7, #8
 8007754:	e773      	b.n	800763e <_dtoa_r+0x3d6>
 8007756:	2502      	movs	r5, #2
 8007758:	e775      	b.n	8007646 <_dtoa_r+0x3de>
 800775a:	9e04      	ldr	r6, [sp, #16]
 800775c:	465f      	mov	r7, fp
 800775e:	e792      	b.n	8007686 <_dtoa_r+0x41e>
 8007760:	9900      	ldr	r1, [sp, #0]
 8007762:	4b50      	ldr	r3, [pc, #320]	; (80078a4 <_dtoa_r+0x63c>)
 8007764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007768:	4431      	add	r1, r6
 800776a:	9102      	str	r1, [sp, #8]
 800776c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800776e:	eeb0 9a47 	vmov.f32	s18, s14
 8007772:	eef0 9a67 	vmov.f32	s19, s15
 8007776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800777a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800777e:	2900      	cmp	r1, #0
 8007780:	d044      	beq.n	800780c <_dtoa_r+0x5a4>
 8007782:	494e      	ldr	r1, [pc, #312]	; (80078bc <_dtoa_r+0x654>)
 8007784:	2000      	movs	r0, #0
 8007786:	f7f9 f861 	bl	800084c <__aeabi_ddiv>
 800778a:	ec53 2b19 	vmov	r2, r3, d9
 800778e:	f7f8 fd7b 	bl	8000288 <__aeabi_dsub>
 8007792:	9d00      	ldr	r5, [sp, #0]
 8007794:	ec41 0b19 	vmov	d9, r0, r1
 8007798:	4649      	mov	r1, r9
 800779a:	4640      	mov	r0, r8
 800779c:	f7f9 f9dc 	bl	8000b58 <__aeabi_d2iz>
 80077a0:	4606      	mov	r6, r0
 80077a2:	f7f8 febf 	bl	8000524 <__aeabi_i2d>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f8 fd6b 	bl	8000288 <__aeabi_dsub>
 80077b2:	3630      	adds	r6, #48	; 0x30
 80077b4:	f805 6b01 	strb.w	r6, [r5], #1
 80077b8:	ec53 2b19 	vmov	r2, r3, d9
 80077bc:	4680      	mov	r8, r0
 80077be:	4689      	mov	r9, r1
 80077c0:	f7f9 f98c 	bl	8000adc <__aeabi_dcmplt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d164      	bne.n	8007892 <_dtoa_r+0x62a>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	4937      	ldr	r1, [pc, #220]	; (80078ac <_dtoa_r+0x644>)
 80077ce:	2000      	movs	r0, #0
 80077d0:	f7f8 fd5a 	bl	8000288 <__aeabi_dsub>
 80077d4:	ec53 2b19 	vmov	r2, r3, d9
 80077d8:	f7f9 f980 	bl	8000adc <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	f040 80b6 	bne.w	800794e <_dtoa_r+0x6e6>
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	429d      	cmp	r5, r3
 80077e6:	f43f af7c 	beq.w	80076e2 <_dtoa_r+0x47a>
 80077ea:	4b31      	ldr	r3, [pc, #196]	; (80078b0 <_dtoa_r+0x648>)
 80077ec:	ec51 0b19 	vmov	r0, r1, d9
 80077f0:	2200      	movs	r2, #0
 80077f2:	f7f8 ff01 	bl	80005f8 <__aeabi_dmul>
 80077f6:	4b2e      	ldr	r3, [pc, #184]	; (80078b0 <_dtoa_r+0x648>)
 80077f8:	ec41 0b19 	vmov	d9, r0, r1
 80077fc:	2200      	movs	r2, #0
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f8 fef9 	bl	80005f8 <__aeabi_dmul>
 8007806:	4680      	mov	r8, r0
 8007808:	4689      	mov	r9, r1
 800780a:	e7c5      	b.n	8007798 <_dtoa_r+0x530>
 800780c:	ec51 0b17 	vmov	r0, r1, d7
 8007810:	f7f8 fef2 	bl	80005f8 <__aeabi_dmul>
 8007814:	9b02      	ldr	r3, [sp, #8]
 8007816:	9d00      	ldr	r5, [sp, #0]
 8007818:	930f      	str	r3, [sp, #60]	; 0x3c
 800781a:	ec41 0b19 	vmov	d9, r0, r1
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	f7f9 f999 	bl	8000b58 <__aeabi_d2iz>
 8007826:	4606      	mov	r6, r0
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	3630      	adds	r6, #48	; 0x30
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4640      	mov	r0, r8
 8007834:	4649      	mov	r1, r9
 8007836:	f7f8 fd27 	bl	8000288 <__aeabi_dsub>
 800783a:	f805 6b01 	strb.w	r6, [r5], #1
 800783e:	9b02      	ldr	r3, [sp, #8]
 8007840:	429d      	cmp	r5, r3
 8007842:	4680      	mov	r8, r0
 8007844:	4689      	mov	r9, r1
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	d124      	bne.n	8007896 <_dtoa_r+0x62e>
 800784c:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <_dtoa_r+0x654>)
 800784e:	ec51 0b19 	vmov	r0, r1, d9
 8007852:	f7f8 fd1b 	bl	800028c <__adddf3>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f9 f95b 	bl	8000b18 <__aeabi_dcmpgt>
 8007862:	2800      	cmp	r0, #0
 8007864:	d173      	bne.n	800794e <_dtoa_r+0x6e6>
 8007866:	ec53 2b19 	vmov	r2, r3, d9
 800786a:	4914      	ldr	r1, [pc, #80]	; (80078bc <_dtoa_r+0x654>)
 800786c:	2000      	movs	r0, #0
 800786e:	f7f8 fd0b 	bl	8000288 <__aeabi_dsub>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4640      	mov	r0, r8
 8007878:	4649      	mov	r1, r9
 800787a:	f7f9 f92f 	bl	8000adc <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f af2f 	beq.w	80076e2 <_dtoa_r+0x47a>
 8007884:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007886:	1e6b      	subs	r3, r5, #1
 8007888:	930f      	str	r3, [sp, #60]	; 0x3c
 800788a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800788e:	2b30      	cmp	r3, #48	; 0x30
 8007890:	d0f8      	beq.n	8007884 <_dtoa_r+0x61c>
 8007892:	46bb      	mov	fp, r7
 8007894:	e04a      	b.n	800792c <_dtoa_r+0x6c4>
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <_dtoa_r+0x648>)
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	e7bd      	b.n	800781e <_dtoa_r+0x5b6>
 80078a2:	bf00      	nop
 80078a4:	08009300 	.word	0x08009300
 80078a8:	080092d8 	.word	0x080092d8
 80078ac:	3ff00000 	.word	0x3ff00000
 80078b0:	40240000 	.word	0x40240000
 80078b4:	401c0000 	.word	0x401c0000
 80078b8:	40140000 	.word	0x40140000
 80078bc:	3fe00000 	.word	0x3fe00000
 80078c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078c4:	9d00      	ldr	r5, [sp, #0]
 80078c6:	4642      	mov	r2, r8
 80078c8:	464b      	mov	r3, r9
 80078ca:	4630      	mov	r0, r6
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7f8 ffbd 	bl	800084c <__aeabi_ddiv>
 80078d2:	f7f9 f941 	bl	8000b58 <__aeabi_d2iz>
 80078d6:	9001      	str	r0, [sp, #4]
 80078d8:	f7f8 fe24 	bl	8000524 <__aeabi_i2d>
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	f7f8 fe8a 	bl	80005f8 <__aeabi_dmul>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f8 fccc 	bl	8000288 <__aeabi_dsub>
 80078f0:	9e01      	ldr	r6, [sp, #4]
 80078f2:	9f04      	ldr	r7, [sp, #16]
 80078f4:	3630      	adds	r6, #48	; 0x30
 80078f6:	f805 6b01 	strb.w	r6, [r5], #1
 80078fa:	9e00      	ldr	r6, [sp, #0]
 80078fc:	1bae      	subs	r6, r5, r6
 80078fe:	42b7      	cmp	r7, r6
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	d134      	bne.n	8007970 <_dtoa_r+0x708>
 8007906:	f7f8 fcc1 	bl	800028c <__adddf3>
 800790a:	4642      	mov	r2, r8
 800790c:	464b      	mov	r3, r9
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	f7f9 f901 	bl	8000b18 <__aeabi_dcmpgt>
 8007916:	b9c8      	cbnz	r0, 800794c <_dtoa_r+0x6e4>
 8007918:	4642      	mov	r2, r8
 800791a:	464b      	mov	r3, r9
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	f7f9 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007924:	b110      	cbz	r0, 800792c <_dtoa_r+0x6c4>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	07db      	lsls	r3, r3, #31
 800792a:	d40f      	bmi.n	800794c <_dtoa_r+0x6e4>
 800792c:	4651      	mov	r1, sl
 800792e:	4620      	mov	r0, r4
 8007930:	f000 fb18 	bl	8007f64 <_Bfree>
 8007934:	2300      	movs	r3, #0
 8007936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007938:	702b      	strb	r3, [r5, #0]
 800793a:	f10b 0301 	add.w	r3, fp, #1
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007942:	2b00      	cmp	r3, #0
 8007944:	f43f ace2 	beq.w	800730c <_dtoa_r+0xa4>
 8007948:	601d      	str	r5, [r3, #0]
 800794a:	e4df      	b.n	800730c <_dtoa_r+0xa4>
 800794c:	465f      	mov	r7, fp
 800794e:	462b      	mov	r3, r5
 8007950:	461d      	mov	r5, r3
 8007952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007956:	2a39      	cmp	r2, #57	; 0x39
 8007958:	d106      	bne.n	8007968 <_dtoa_r+0x700>
 800795a:	9a00      	ldr	r2, [sp, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d1f7      	bne.n	8007950 <_dtoa_r+0x6e8>
 8007960:	9900      	ldr	r1, [sp, #0]
 8007962:	2230      	movs	r2, #48	; 0x30
 8007964:	3701      	adds	r7, #1
 8007966:	700a      	strb	r2, [r1, #0]
 8007968:	781a      	ldrb	r2, [r3, #0]
 800796a:	3201      	adds	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e790      	b.n	8007892 <_dtoa_r+0x62a>
 8007970:	4ba3      	ldr	r3, [pc, #652]	; (8007c00 <_dtoa_r+0x998>)
 8007972:	2200      	movs	r2, #0
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	2200      	movs	r2, #0
 800797a:	2300      	movs	r3, #0
 800797c:	4606      	mov	r6, r0
 800797e:	460f      	mov	r7, r1
 8007980:	f7f9 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007984:	2800      	cmp	r0, #0
 8007986:	d09e      	beq.n	80078c6 <_dtoa_r+0x65e>
 8007988:	e7d0      	b.n	800792c <_dtoa_r+0x6c4>
 800798a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798c:	2a00      	cmp	r2, #0
 800798e:	f000 80ca 	beq.w	8007b26 <_dtoa_r+0x8be>
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	2a01      	cmp	r2, #1
 8007996:	f300 80ad 	bgt.w	8007af4 <_dtoa_r+0x88c>
 800799a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800799c:	2a00      	cmp	r2, #0
 800799e:	f000 80a5 	beq.w	8007aec <_dtoa_r+0x884>
 80079a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079a6:	9e08      	ldr	r6, [sp, #32]
 80079a8:	9d05      	ldr	r5, [sp, #20]
 80079aa:	9a05      	ldr	r2, [sp, #20]
 80079ac:	441a      	add	r2, r3
 80079ae:	9205      	str	r2, [sp, #20]
 80079b0:	9a06      	ldr	r2, [sp, #24]
 80079b2:	2101      	movs	r1, #1
 80079b4:	441a      	add	r2, r3
 80079b6:	4620      	mov	r0, r4
 80079b8:	9206      	str	r2, [sp, #24]
 80079ba:	f000 fb89 	bl	80080d0 <__i2b>
 80079be:	4607      	mov	r7, r0
 80079c0:	b165      	cbz	r5, 80079dc <_dtoa_r+0x774>
 80079c2:	9b06      	ldr	r3, [sp, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd09      	ble.n	80079dc <_dtoa_r+0x774>
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	9a05      	ldr	r2, [sp, #20]
 80079cc:	bfa8      	it	ge
 80079ce:	462b      	movge	r3, r5
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	9205      	str	r2, [sp, #20]
 80079d4:	9a06      	ldr	r2, [sp, #24]
 80079d6:	1aed      	subs	r5, r5, r3
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	9306      	str	r3, [sp, #24]
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	b1f3      	cbz	r3, 8007a1e <_dtoa_r+0x7b6>
 80079e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80a3 	beq.w	8007b2e <_dtoa_r+0x8c6>
 80079e8:	2e00      	cmp	r6, #0
 80079ea:	dd10      	ble.n	8007a0e <_dtoa_r+0x7a6>
 80079ec:	4639      	mov	r1, r7
 80079ee:	4632      	mov	r2, r6
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fc2d 	bl	8008250 <__pow5mult>
 80079f6:	4652      	mov	r2, sl
 80079f8:	4601      	mov	r1, r0
 80079fa:	4607      	mov	r7, r0
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 fb7d 	bl	80080fc <__multiply>
 8007a02:	4651      	mov	r1, sl
 8007a04:	4680      	mov	r8, r0
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 faac 	bl	8007f64 <_Bfree>
 8007a0c:	46c2      	mov	sl, r8
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	1b9a      	subs	r2, r3, r6
 8007a12:	d004      	beq.n	8007a1e <_dtoa_r+0x7b6>
 8007a14:	4651      	mov	r1, sl
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fc1a 	bl	8008250 <__pow5mult>
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fb55 	bl	80080d0 <__i2b>
 8007a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	f340 8081 	ble.w	8007b32 <_dtoa_r+0x8ca>
 8007a30:	461a      	mov	r2, r3
 8007a32:	4601      	mov	r1, r0
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 fc0b 	bl	8008250 <__pow5mult>
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	4606      	mov	r6, r0
 8007a40:	dd7a      	ble.n	8007b38 <_dtoa_r+0x8d0>
 8007a42:	f04f 0800 	mov.w	r8, #0
 8007a46:	6933      	ldr	r3, [r6, #16]
 8007a48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a4c:	6918      	ldr	r0, [r3, #16]
 8007a4e:	f000 faf1 	bl	8008034 <__hi0bits>
 8007a52:	f1c0 0020 	rsb	r0, r0, #32
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	4418      	add	r0, r3
 8007a5a:	f010 001f 	ands.w	r0, r0, #31
 8007a5e:	f000 8094 	beq.w	8007b8a <_dtoa_r+0x922>
 8007a62:	f1c0 0320 	rsb	r3, r0, #32
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	f340 8085 	ble.w	8007b76 <_dtoa_r+0x90e>
 8007a6c:	9b05      	ldr	r3, [sp, #20]
 8007a6e:	f1c0 001c 	rsb	r0, r0, #28
 8007a72:	4403      	add	r3, r0
 8007a74:	9305      	str	r3, [sp, #20]
 8007a76:	9b06      	ldr	r3, [sp, #24]
 8007a78:	4403      	add	r3, r0
 8007a7a:	4405      	add	r5, r0
 8007a7c:	9306      	str	r3, [sp, #24]
 8007a7e:	9b05      	ldr	r3, [sp, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dd05      	ble.n	8007a90 <_dtoa_r+0x828>
 8007a84:	4651      	mov	r1, sl
 8007a86:	461a      	mov	r2, r3
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fc3b 	bl	8008304 <__lshift>
 8007a8e:	4682      	mov	sl, r0
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dd05      	ble.n	8007aa2 <_dtoa_r+0x83a>
 8007a96:	4631      	mov	r1, r6
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fc32 	bl	8008304 <__lshift>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d072      	beq.n	8007b8e <_dtoa_r+0x926>
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f000 fc96 	bl	80083dc <__mcmp>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	da6c      	bge.n	8007b8e <_dtoa_r+0x926>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	220a      	movs	r2, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fa74 	bl	8007fa8 <__multadd>
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 81b0 	beq.w	8007e2e <_dtoa_r+0xbc6>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fa67 	bl	8007fa8 <__multadd>
 8007ada:	9b01      	ldr	r3, [sp, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	4607      	mov	r7, r0
 8007ae0:	f300 8096 	bgt.w	8007c10 <_dtoa_r+0x9a8>
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	dc59      	bgt.n	8007b9e <_dtoa_r+0x936>
 8007aea:	e091      	b.n	8007c10 <_dtoa_r+0x9a8>
 8007aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007af2:	e758      	b.n	80079a6 <_dtoa_r+0x73e>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	1e5e      	subs	r6, r3, #1
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	42b3      	cmp	r3, r6
 8007afc:	bfbf      	itttt	lt
 8007afe:	9b08      	ldrlt	r3, [sp, #32]
 8007b00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007b02:	9608      	strlt	r6, [sp, #32]
 8007b04:	1af3      	sublt	r3, r6, r3
 8007b06:	bfb4      	ite	lt
 8007b08:	18d2      	addlt	r2, r2, r3
 8007b0a:	1b9e      	subge	r6, r3, r6
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	bfbc      	itt	lt
 8007b10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007b12:	2600      	movlt	r6, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfb7      	itett	lt
 8007b18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007b1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007b20:	1a9d      	sublt	r5, r3, r2
 8007b22:	2300      	movlt	r3, #0
 8007b24:	e741      	b.n	80079aa <_dtoa_r+0x742>
 8007b26:	9e08      	ldr	r6, [sp, #32]
 8007b28:	9d05      	ldr	r5, [sp, #20]
 8007b2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b2c:	e748      	b.n	80079c0 <_dtoa_r+0x758>
 8007b2e:	9a08      	ldr	r2, [sp, #32]
 8007b30:	e770      	b.n	8007a14 <_dtoa_r+0x7ac>
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	dc19      	bgt.n	8007b6c <_dtoa_r+0x904>
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	b9bb      	cbnz	r3, 8007b6c <_dtoa_r+0x904>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b42:	b99b      	cbnz	r3, 8007b6c <_dtoa_r+0x904>
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	0d1b      	lsrs	r3, r3, #20
 8007b4c:	051b      	lsls	r3, r3, #20
 8007b4e:	b183      	cbz	r3, 8007b72 <_dtoa_r+0x90a>
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	3301      	adds	r3, #1
 8007b54:	9305      	str	r3, [sp, #20]
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	9306      	str	r3, [sp, #24]
 8007b5c:	f04f 0801 	mov.w	r8, #1
 8007b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f47f af6f 	bne.w	8007a46 <_dtoa_r+0x7de>
 8007b68:	2001      	movs	r0, #1
 8007b6a:	e774      	b.n	8007a56 <_dtoa_r+0x7ee>
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	e7f6      	b.n	8007b60 <_dtoa_r+0x8f8>
 8007b72:	4698      	mov	r8, r3
 8007b74:	e7f4      	b.n	8007b60 <_dtoa_r+0x8f8>
 8007b76:	d082      	beq.n	8007a7e <_dtoa_r+0x816>
 8007b78:	9a05      	ldr	r2, [sp, #20]
 8007b7a:	331c      	adds	r3, #28
 8007b7c:	441a      	add	r2, r3
 8007b7e:	9205      	str	r2, [sp, #20]
 8007b80:	9a06      	ldr	r2, [sp, #24]
 8007b82:	441a      	add	r2, r3
 8007b84:	441d      	add	r5, r3
 8007b86:	9206      	str	r2, [sp, #24]
 8007b88:	e779      	b.n	8007a7e <_dtoa_r+0x816>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	e7f4      	b.n	8007b78 <_dtoa_r+0x910>
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dc37      	bgt.n	8007c04 <_dtoa_r+0x99c>
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	dd34      	ble.n	8007c04 <_dtoa_r+0x99c>
 8007b9a:	9b04      	ldr	r3, [sp, #16]
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	b963      	cbnz	r3, 8007bbc <_dtoa_r+0x954>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 f9fe 	bl	8007fa8 <__multadd>
 8007bac:	4601      	mov	r1, r0
 8007bae:	4606      	mov	r6, r0
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	f000 fc13 	bl	80083dc <__mcmp>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f73f adbb 	bgt.w	8007732 <_dtoa_r+0x4ca>
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbe:	9d00      	ldr	r5, [sp, #0]
 8007bc0:	ea6f 0b03 	mvn.w	fp, r3
 8007bc4:	f04f 0800 	mov.w	r8, #0
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 f9ca 	bl	8007f64 <_Bfree>
 8007bd0:	2f00      	cmp	r7, #0
 8007bd2:	f43f aeab 	beq.w	800792c <_dtoa_r+0x6c4>
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	d005      	beq.n	8007be8 <_dtoa_r+0x980>
 8007bdc:	45b8      	cmp	r8, r7
 8007bde:	d003      	beq.n	8007be8 <_dtoa_r+0x980>
 8007be0:	4641      	mov	r1, r8
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f9be 	bl	8007f64 <_Bfree>
 8007be8:	4639      	mov	r1, r7
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 f9ba 	bl	8007f64 <_Bfree>
 8007bf0:	e69c      	b.n	800792c <_dtoa_r+0x6c4>
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	4637      	mov	r7, r6
 8007bf6:	e7e1      	b.n	8007bbc <_dtoa_r+0x954>
 8007bf8:	46bb      	mov	fp, r7
 8007bfa:	4637      	mov	r7, r6
 8007bfc:	e599      	b.n	8007732 <_dtoa_r+0x4ca>
 8007bfe:	bf00      	nop
 8007c00:	40240000 	.word	0x40240000
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80c8 	beq.w	8007d9c <_dtoa_r+0xb34>
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	dd05      	ble.n	8007c20 <_dtoa_r+0x9b8>
 8007c14:	4639      	mov	r1, r7
 8007c16:	462a      	mov	r2, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 fb73 	bl	8008304 <__lshift>
 8007c1e:	4607      	mov	r7, r0
 8007c20:	f1b8 0f00 	cmp.w	r8, #0
 8007c24:	d05b      	beq.n	8007cde <_dtoa_r+0xa76>
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 f95b 	bl	8007ee4 <_Balloc>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b928      	cbnz	r0, 8007c3e <_dtoa_r+0x9d6>
 8007c32:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <_dtoa_r+0xbd8>)
 8007c34:	4602      	mov	r2, r0
 8007c36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c3a:	f7ff bb2e 	b.w	800729a <_dtoa_r+0x32>
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	3202      	adds	r2, #2
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	f107 010c 	add.w	r1, r7, #12
 8007c48:	300c      	adds	r0, #12
 8007c4a:	f7ff fa76 	bl	800713a <memcpy>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4629      	mov	r1, r5
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fb56 	bl	8008304 <__lshift>
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c62:	4413      	add	r3, r2
 8007c64:	9308      	str	r3, [sp, #32]
 8007c66:	9b02      	ldr	r3, [sp, #8]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	46b8      	mov	r8, r7
 8007c6e:	9306      	str	r3, [sp, #24]
 8007c70:	4607      	mov	r7, r0
 8007c72:	9b04      	ldr	r3, [sp, #16]
 8007c74:	4631      	mov	r1, r6
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4650      	mov	r0, sl
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	f7ff fa6b 	bl	8007156 <quorem>
 8007c80:	4641      	mov	r1, r8
 8007c82:	9002      	str	r0, [sp, #8]
 8007c84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c88:	4650      	mov	r0, sl
 8007c8a:	f000 fba7 	bl	80083dc <__mcmp>
 8007c8e:	463a      	mov	r2, r7
 8007c90:	9005      	str	r0, [sp, #20]
 8007c92:	4631      	mov	r1, r6
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fbbd 	bl	8008414 <__mdiff>
 8007c9a:	68c2      	ldr	r2, [r0, #12]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	bb02      	cbnz	r2, 8007ce2 <_dtoa_r+0xa7a>
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	f000 fb9a 	bl	80083dc <__mcmp>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4629      	mov	r1, r5
 8007cac:	4620      	mov	r0, r4
 8007cae:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb0:	f000 f958 	bl	8007f64 <_Bfree>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb8:	9d04      	ldr	r5, [sp, #16]
 8007cba:	ea43 0102 	orr.w	r1, r3, r2
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	4319      	orrs	r1, r3
 8007cc2:	d110      	bne.n	8007ce6 <_dtoa_r+0xa7e>
 8007cc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cc8:	d029      	beq.n	8007d1e <_dtoa_r+0xab6>
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dd02      	ble.n	8007cd6 <_dtoa_r+0xa6e>
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	f883 9000 	strb.w	r9, [r3]
 8007cdc:	e774      	b.n	8007bc8 <_dtoa_r+0x960>
 8007cde:	4638      	mov	r0, r7
 8007ce0:	e7ba      	b.n	8007c58 <_dtoa_r+0x9f0>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e7e1      	b.n	8007caa <_dtoa_r+0xa42>
 8007ce6:	9b05      	ldr	r3, [sp, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db04      	blt.n	8007cf6 <_dtoa_r+0xa8e>
 8007cec:	9907      	ldr	r1, [sp, #28]
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	9906      	ldr	r1, [sp, #24]
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	d120      	bne.n	8007d38 <_dtoa_r+0xad0>
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	dded      	ble.n	8007cd6 <_dtoa_r+0xa6e>
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f000 fb00 	bl	8008304 <__lshift>
 8007d04:	4631      	mov	r1, r6
 8007d06:	4682      	mov	sl, r0
 8007d08:	f000 fb68 	bl	80083dc <__mcmp>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	dc03      	bgt.n	8007d18 <_dtoa_r+0xab0>
 8007d10:	d1e1      	bne.n	8007cd6 <_dtoa_r+0xa6e>
 8007d12:	f019 0f01 	tst.w	r9, #1
 8007d16:	d0de      	beq.n	8007cd6 <_dtoa_r+0xa6e>
 8007d18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d1c:	d1d8      	bne.n	8007cd0 <_dtoa_r+0xa68>
 8007d1e:	9a01      	ldr	r2, [sp, #4]
 8007d20:	2339      	movs	r3, #57	; 0x39
 8007d22:	7013      	strb	r3, [r2, #0]
 8007d24:	462b      	mov	r3, r5
 8007d26:	461d      	mov	r5, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d2e:	2a39      	cmp	r2, #57	; 0x39
 8007d30:	d06c      	beq.n	8007e0c <_dtoa_r+0xba4>
 8007d32:	3201      	adds	r2, #1
 8007d34:	701a      	strb	r2, [r3, #0]
 8007d36:	e747      	b.n	8007bc8 <_dtoa_r+0x960>
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	dd07      	ble.n	8007d4c <_dtoa_r+0xae4>
 8007d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d40:	d0ed      	beq.n	8007d1e <_dtoa_r+0xab6>
 8007d42:	9a01      	ldr	r2, [sp, #4]
 8007d44:	f109 0301 	add.w	r3, r9, #1
 8007d48:	7013      	strb	r3, [r2, #0]
 8007d4a:	e73d      	b.n	8007bc8 <_dtoa_r+0x960>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	9a08      	ldr	r2, [sp, #32]
 8007d50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d043      	beq.n	8007de0 <_dtoa_r+0xb78>
 8007d58:	4651      	mov	r1, sl
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f922 	bl	8007fa8 <__multadd>
 8007d64:	45b8      	cmp	r8, r7
 8007d66:	4682      	mov	sl, r0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	f04f 020a 	mov.w	r2, #10
 8007d70:	4641      	mov	r1, r8
 8007d72:	4620      	mov	r0, r4
 8007d74:	d107      	bne.n	8007d86 <_dtoa_r+0xb1e>
 8007d76:	f000 f917 	bl	8007fa8 <__multadd>
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	e775      	b.n	8007c72 <_dtoa_r+0xa0a>
 8007d86:	f000 f90f 	bl	8007fa8 <__multadd>
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f908 	bl	8007fa8 <__multadd>
 8007d98:	4607      	mov	r7, r0
 8007d9a:	e7f0      	b.n	8007d7e <_dtoa_r+0xb16>
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	9d00      	ldr	r5, [sp, #0]
 8007da2:	4631      	mov	r1, r6
 8007da4:	4650      	mov	r0, sl
 8007da6:	f7ff f9d6 	bl	8007156 <quorem>
 8007daa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	f805 9b01 	strb.w	r9, [r5], #1
 8007db4:	1aea      	subs	r2, r5, r3
 8007db6:	9b01      	ldr	r3, [sp, #4]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	dd07      	ble.n	8007dcc <_dtoa_r+0xb64>
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	220a      	movs	r2, #10
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 f8f0 	bl	8007fa8 <__multadd>
 8007dc8:	4682      	mov	sl, r0
 8007dca:	e7ea      	b.n	8007da2 <_dtoa_r+0xb3a>
 8007dcc:	9b01      	ldr	r3, [sp, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfc8      	it	gt
 8007dd2:	461d      	movgt	r5, r3
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	bfd8      	it	le
 8007dd8:	2501      	movle	r5, #1
 8007dda:	441d      	add	r5, r3
 8007ddc:	f04f 0800 	mov.w	r8, #0
 8007de0:	4651      	mov	r1, sl
 8007de2:	2201      	movs	r2, #1
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fa8d 	bl	8008304 <__lshift>
 8007dea:	4631      	mov	r1, r6
 8007dec:	4682      	mov	sl, r0
 8007dee:	f000 faf5 	bl	80083dc <__mcmp>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	dc96      	bgt.n	8007d24 <_dtoa_r+0xabc>
 8007df6:	d102      	bne.n	8007dfe <_dtoa_r+0xb96>
 8007df8:	f019 0f01 	tst.w	r9, #1
 8007dfc:	d192      	bne.n	8007d24 <_dtoa_r+0xabc>
 8007dfe:	462b      	mov	r3, r5
 8007e00:	461d      	mov	r5, r3
 8007e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e06:	2a30      	cmp	r2, #48	; 0x30
 8007e08:	d0fa      	beq.n	8007e00 <_dtoa_r+0xb98>
 8007e0a:	e6dd      	b.n	8007bc8 <_dtoa_r+0x960>
 8007e0c:	9a00      	ldr	r2, [sp, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d189      	bne.n	8007d26 <_dtoa_r+0xabe>
 8007e12:	f10b 0b01 	add.w	fp, fp, #1
 8007e16:	2331      	movs	r3, #49	; 0x31
 8007e18:	e796      	b.n	8007d48 <_dtoa_r+0xae0>
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <_dtoa_r+0xbdc>)
 8007e1c:	f7ff ba99 	b.w	8007352 <_dtoa_r+0xea>
 8007e20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f47f aa6d 	bne.w	8007302 <_dtoa_r+0x9a>
 8007e28:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <_dtoa_r+0xbe0>)
 8007e2a:	f7ff ba92 	b.w	8007352 <_dtoa_r+0xea>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	dcb5      	bgt.n	8007da0 <_dtoa_r+0xb38>
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f73f aeb1 	bgt.w	8007b9e <_dtoa_r+0x936>
 8007e3c:	e7b0      	b.n	8007da0 <_dtoa_r+0xb38>
 8007e3e:	bf00      	nop
 8007e40:	0800926c 	.word	0x0800926c
 8007e44:	080091cc 	.word	0x080091cc
 8007e48:	080091f0 	.word	0x080091f0

08007e4c <_free_r>:
 8007e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d044      	beq.n	8007edc <_free_r+0x90>
 8007e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e56:	9001      	str	r0, [sp, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e5e:	bfb8      	it	lt
 8007e60:	18e4      	addlt	r4, r4, r3
 8007e62:	f7fe faff 	bl	8006464 <__malloc_lock>
 8007e66:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <_free_r+0x94>)
 8007e68:	9801      	ldr	r0, [sp, #4]
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	b933      	cbnz	r3, 8007e7c <_free_r+0x30>
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6014      	str	r4, [r2, #0]
 8007e72:	b003      	add	sp, #12
 8007e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e78:	f7fe bafa 	b.w	8006470 <__malloc_unlock>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d908      	bls.n	8007e92 <_free_r+0x46>
 8007e80:	6825      	ldr	r5, [r4, #0]
 8007e82:	1961      	adds	r1, r4, r5
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf01      	itttt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	1949      	addeq	r1, r1, r5
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	e7ed      	b.n	8007e6e <_free_r+0x22>
 8007e92:	461a      	mov	r2, r3
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b10b      	cbz	r3, 8007e9c <_free_r+0x50>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d9fa      	bls.n	8007e92 <_free_r+0x46>
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	1855      	adds	r5, r2, r1
 8007ea0:	42a5      	cmp	r5, r4
 8007ea2:	d10b      	bne.n	8007ebc <_free_r+0x70>
 8007ea4:	6824      	ldr	r4, [r4, #0]
 8007ea6:	4421      	add	r1, r4
 8007ea8:	1854      	adds	r4, r2, r1
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	d1e0      	bne.n	8007e72 <_free_r+0x26>
 8007eb0:	681c      	ldr	r4, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	6053      	str	r3, [r2, #4]
 8007eb6:	440c      	add	r4, r1
 8007eb8:	6014      	str	r4, [r2, #0]
 8007eba:	e7da      	b.n	8007e72 <_free_r+0x26>
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x78>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	6003      	str	r3, [r0, #0]
 8007ec2:	e7d6      	b.n	8007e72 <_free_r+0x26>
 8007ec4:	6825      	ldr	r5, [r4, #0]
 8007ec6:	1961      	adds	r1, r4, r5
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf04      	itt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	bf04      	itt	eq
 8007ed4:	1949      	addeq	r1, r1, r5
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	6054      	str	r4, [r2, #4]
 8007eda:	e7ca      	b.n	8007e72 <_free_r+0x26>
 8007edc:	b003      	add	sp, #12
 8007ede:	bd30      	pop	{r4, r5, pc}
 8007ee0:	20000480 	.word	0x20000480

08007ee4 <_Balloc>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	69c6      	ldr	r6, [r0, #28]
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	b976      	cbnz	r6, 8007f0c <_Balloc+0x28>
 8007eee:	2010      	movs	r0, #16
 8007ef0:	f7fe fa08 	bl	8006304 <malloc>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	61e0      	str	r0, [r4, #28]
 8007ef8:	b920      	cbnz	r0, 8007f04 <_Balloc+0x20>
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <_Balloc+0x78>)
 8007efc:	4818      	ldr	r0, [pc, #96]	; (8007f60 <_Balloc+0x7c>)
 8007efe:	216b      	movs	r1, #107	; 0x6b
 8007f00:	f000 fd8c 	bl	8008a1c <__assert_func>
 8007f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f08:	6006      	str	r6, [r0, #0]
 8007f0a:	60c6      	str	r6, [r0, #12]
 8007f0c:	69e6      	ldr	r6, [r4, #28]
 8007f0e:	68f3      	ldr	r3, [r6, #12]
 8007f10:	b183      	cbz	r3, 8007f34 <_Balloc+0x50>
 8007f12:	69e3      	ldr	r3, [r4, #28]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f1a:	b9b8      	cbnz	r0, 8007f4c <_Balloc+0x68>
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f22:	1d72      	adds	r2, r6, #5
 8007f24:	0092      	lsls	r2, r2, #2
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fd96 	bl	8008a58 <_calloc_r>
 8007f2c:	b160      	cbz	r0, 8007f48 <_Balloc+0x64>
 8007f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f32:	e00e      	b.n	8007f52 <_Balloc+0x6e>
 8007f34:	2221      	movs	r2, #33	; 0x21
 8007f36:	2104      	movs	r1, #4
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fd8d 	bl	8008a58 <_calloc_r>
 8007f3e:	69e3      	ldr	r3, [r4, #28]
 8007f40:	60f0      	str	r0, [r6, #12]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e4      	bne.n	8007f12 <_Balloc+0x2e>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
 8007f4c:	6802      	ldr	r2, [r0, #0]
 8007f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f52:	2300      	movs	r3, #0
 8007f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f58:	e7f7      	b.n	8007f4a <_Balloc+0x66>
 8007f5a:	bf00      	nop
 8007f5c:	080091fd 	.word	0x080091fd
 8007f60:	0800927d 	.word	0x0800927d

08007f64 <_Bfree>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	69c6      	ldr	r6, [r0, #28]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b976      	cbnz	r6, 8007f8c <_Bfree+0x28>
 8007f6e:	2010      	movs	r0, #16
 8007f70:	f7fe f9c8 	bl	8006304 <malloc>
 8007f74:	4602      	mov	r2, r0
 8007f76:	61e8      	str	r0, [r5, #28]
 8007f78:	b920      	cbnz	r0, 8007f84 <_Bfree+0x20>
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <_Bfree+0x3c>)
 8007f7c:	4809      	ldr	r0, [pc, #36]	; (8007fa4 <_Bfree+0x40>)
 8007f7e:	218f      	movs	r1, #143	; 0x8f
 8007f80:	f000 fd4c 	bl	8008a1c <__assert_func>
 8007f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f88:	6006      	str	r6, [r0, #0]
 8007f8a:	60c6      	str	r6, [r0, #12]
 8007f8c:	b13c      	cbz	r4, 8007f9e <_Bfree+0x3a>
 8007f8e:	69eb      	ldr	r3, [r5, #28]
 8007f90:	6862      	ldr	r2, [r4, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f98:	6021      	str	r1, [r4, #0]
 8007f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	080091fd 	.word	0x080091fd
 8007fa4:	0800927d 	.word	0x0800927d

08007fa8 <__multadd>:
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	690d      	ldr	r5, [r1, #16]
 8007fae:	4607      	mov	r7, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	461e      	mov	r6, r3
 8007fb4:	f101 0c14 	add.w	ip, r1, #20
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f8dc 3000 	ldr.w	r3, [ip]
 8007fbe:	b299      	uxth	r1, r3
 8007fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007fc4:	0c1e      	lsrs	r6, r3, #16
 8007fc6:	0c0b      	lsrs	r3, r1, #16
 8007fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007fcc:	b289      	uxth	r1, r1
 8007fce:	3001      	adds	r0, #1
 8007fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fd4:	4285      	cmp	r5, r0
 8007fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fde:	dcec      	bgt.n	8007fba <__multadd+0x12>
 8007fe0:	b30e      	cbz	r6, 8008026 <__multadd+0x7e>
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dc19      	bgt.n	800801c <__multadd+0x74>
 8007fe8:	6861      	ldr	r1, [r4, #4]
 8007fea:	4638      	mov	r0, r7
 8007fec:	3101      	adds	r1, #1
 8007fee:	f7ff ff79 	bl	8007ee4 <_Balloc>
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	b928      	cbnz	r0, 8008002 <__multadd+0x5a>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	4b0c      	ldr	r3, [pc, #48]	; (800802c <__multadd+0x84>)
 8007ffa:	480d      	ldr	r0, [pc, #52]	; (8008030 <__multadd+0x88>)
 8007ffc:	21ba      	movs	r1, #186	; 0xba
 8007ffe:	f000 fd0d 	bl	8008a1c <__assert_func>
 8008002:	6922      	ldr	r2, [r4, #16]
 8008004:	3202      	adds	r2, #2
 8008006:	f104 010c 	add.w	r1, r4, #12
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	300c      	adds	r0, #12
 800800e:	f7ff f894 	bl	800713a <memcpy>
 8008012:	4621      	mov	r1, r4
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ffa5 	bl	8007f64 <_Bfree>
 800801a:	4644      	mov	r4, r8
 800801c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008020:	3501      	adds	r5, #1
 8008022:	615e      	str	r6, [r3, #20]
 8008024:	6125      	str	r5, [r4, #16]
 8008026:	4620      	mov	r0, r4
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	0800926c 	.word	0x0800926c
 8008030:	0800927d 	.word	0x0800927d

08008034 <__hi0bits>:
 8008034:	0c03      	lsrs	r3, r0, #16
 8008036:	041b      	lsls	r3, r3, #16
 8008038:	b9d3      	cbnz	r3, 8008070 <__hi0bits+0x3c>
 800803a:	0400      	lsls	r0, r0, #16
 800803c:	2310      	movs	r3, #16
 800803e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008042:	bf04      	itt	eq
 8008044:	0200      	lsleq	r0, r0, #8
 8008046:	3308      	addeq	r3, #8
 8008048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800804c:	bf04      	itt	eq
 800804e:	0100      	lsleq	r0, r0, #4
 8008050:	3304      	addeq	r3, #4
 8008052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008056:	bf04      	itt	eq
 8008058:	0080      	lsleq	r0, r0, #2
 800805a:	3302      	addeq	r3, #2
 800805c:	2800      	cmp	r0, #0
 800805e:	db05      	blt.n	800806c <__hi0bits+0x38>
 8008060:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008064:	f103 0301 	add.w	r3, r3, #1
 8008068:	bf08      	it	eq
 800806a:	2320      	moveq	r3, #32
 800806c:	4618      	mov	r0, r3
 800806e:	4770      	bx	lr
 8008070:	2300      	movs	r3, #0
 8008072:	e7e4      	b.n	800803e <__hi0bits+0xa>

08008074 <__lo0bits>:
 8008074:	6803      	ldr	r3, [r0, #0]
 8008076:	f013 0207 	ands.w	r2, r3, #7
 800807a:	d00c      	beq.n	8008096 <__lo0bits+0x22>
 800807c:	07d9      	lsls	r1, r3, #31
 800807e:	d422      	bmi.n	80080c6 <__lo0bits+0x52>
 8008080:	079a      	lsls	r2, r3, #30
 8008082:	bf49      	itett	mi
 8008084:	085b      	lsrmi	r3, r3, #1
 8008086:	089b      	lsrpl	r3, r3, #2
 8008088:	6003      	strmi	r3, [r0, #0]
 800808a:	2201      	movmi	r2, #1
 800808c:	bf5c      	itt	pl
 800808e:	6003      	strpl	r3, [r0, #0]
 8008090:	2202      	movpl	r2, #2
 8008092:	4610      	mov	r0, r2
 8008094:	4770      	bx	lr
 8008096:	b299      	uxth	r1, r3
 8008098:	b909      	cbnz	r1, 800809e <__lo0bits+0x2a>
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	2210      	movs	r2, #16
 800809e:	b2d9      	uxtb	r1, r3
 80080a0:	b909      	cbnz	r1, 80080a6 <__lo0bits+0x32>
 80080a2:	3208      	adds	r2, #8
 80080a4:	0a1b      	lsrs	r3, r3, #8
 80080a6:	0719      	lsls	r1, r3, #28
 80080a8:	bf04      	itt	eq
 80080aa:	091b      	lsreq	r3, r3, #4
 80080ac:	3204      	addeq	r2, #4
 80080ae:	0799      	lsls	r1, r3, #30
 80080b0:	bf04      	itt	eq
 80080b2:	089b      	lsreq	r3, r3, #2
 80080b4:	3202      	addeq	r2, #2
 80080b6:	07d9      	lsls	r1, r3, #31
 80080b8:	d403      	bmi.n	80080c2 <__lo0bits+0x4e>
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	f102 0201 	add.w	r2, r2, #1
 80080c0:	d003      	beq.n	80080ca <__lo0bits+0x56>
 80080c2:	6003      	str	r3, [r0, #0]
 80080c4:	e7e5      	b.n	8008092 <__lo0bits+0x1e>
 80080c6:	2200      	movs	r2, #0
 80080c8:	e7e3      	b.n	8008092 <__lo0bits+0x1e>
 80080ca:	2220      	movs	r2, #32
 80080cc:	e7e1      	b.n	8008092 <__lo0bits+0x1e>
	...

080080d0 <__i2b>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	460c      	mov	r4, r1
 80080d4:	2101      	movs	r1, #1
 80080d6:	f7ff ff05 	bl	8007ee4 <_Balloc>
 80080da:	4602      	mov	r2, r0
 80080dc:	b928      	cbnz	r0, 80080ea <__i2b+0x1a>
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <__i2b+0x24>)
 80080e0:	4805      	ldr	r0, [pc, #20]	; (80080f8 <__i2b+0x28>)
 80080e2:	f240 1145 	movw	r1, #325	; 0x145
 80080e6:	f000 fc99 	bl	8008a1c <__assert_func>
 80080ea:	2301      	movs	r3, #1
 80080ec:	6144      	str	r4, [r0, #20]
 80080ee:	6103      	str	r3, [r0, #16]
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	0800926c 	.word	0x0800926c
 80080f8:	0800927d 	.word	0x0800927d

080080fc <__multiply>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	4691      	mov	r9, r2
 8008102:	690a      	ldr	r2, [r1, #16]
 8008104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008108:	429a      	cmp	r2, r3
 800810a:	bfb8      	it	lt
 800810c:	460b      	movlt	r3, r1
 800810e:	460c      	mov	r4, r1
 8008110:	bfbc      	itt	lt
 8008112:	464c      	movlt	r4, r9
 8008114:	4699      	movlt	r9, r3
 8008116:	6927      	ldr	r7, [r4, #16]
 8008118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800811c:	68a3      	ldr	r3, [r4, #8]
 800811e:	6861      	ldr	r1, [r4, #4]
 8008120:	eb07 060a 	add.w	r6, r7, sl
 8008124:	42b3      	cmp	r3, r6
 8008126:	b085      	sub	sp, #20
 8008128:	bfb8      	it	lt
 800812a:	3101      	addlt	r1, #1
 800812c:	f7ff feda 	bl	8007ee4 <_Balloc>
 8008130:	b930      	cbnz	r0, 8008140 <__multiply+0x44>
 8008132:	4602      	mov	r2, r0
 8008134:	4b44      	ldr	r3, [pc, #272]	; (8008248 <__multiply+0x14c>)
 8008136:	4845      	ldr	r0, [pc, #276]	; (800824c <__multiply+0x150>)
 8008138:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800813c:	f000 fc6e 	bl	8008a1c <__assert_func>
 8008140:	f100 0514 	add.w	r5, r0, #20
 8008144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008148:	462b      	mov	r3, r5
 800814a:	2200      	movs	r2, #0
 800814c:	4543      	cmp	r3, r8
 800814e:	d321      	bcc.n	8008194 <__multiply+0x98>
 8008150:	f104 0314 	add.w	r3, r4, #20
 8008154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008158:	f109 0314 	add.w	r3, r9, #20
 800815c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008160:	9202      	str	r2, [sp, #8]
 8008162:	1b3a      	subs	r2, r7, r4
 8008164:	3a15      	subs	r2, #21
 8008166:	f022 0203 	bic.w	r2, r2, #3
 800816a:	3204      	adds	r2, #4
 800816c:	f104 0115 	add.w	r1, r4, #21
 8008170:	428f      	cmp	r7, r1
 8008172:	bf38      	it	cc
 8008174:	2204      	movcc	r2, #4
 8008176:	9201      	str	r2, [sp, #4]
 8008178:	9a02      	ldr	r2, [sp, #8]
 800817a:	9303      	str	r3, [sp, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d80c      	bhi.n	800819a <__multiply+0x9e>
 8008180:	2e00      	cmp	r6, #0
 8008182:	dd03      	ble.n	800818c <__multiply+0x90>
 8008184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008188:	2b00      	cmp	r3, #0
 800818a:	d05b      	beq.n	8008244 <__multiply+0x148>
 800818c:	6106      	str	r6, [r0, #16]
 800818e:	b005      	add	sp, #20
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	f843 2b04 	str.w	r2, [r3], #4
 8008198:	e7d8      	b.n	800814c <__multiply+0x50>
 800819a:	f8b3 a000 	ldrh.w	sl, [r3]
 800819e:	f1ba 0f00 	cmp.w	sl, #0
 80081a2:	d024      	beq.n	80081ee <__multiply+0xf2>
 80081a4:	f104 0e14 	add.w	lr, r4, #20
 80081a8:	46a9      	mov	r9, r5
 80081aa:	f04f 0c00 	mov.w	ip, #0
 80081ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081b2:	f8d9 1000 	ldr.w	r1, [r9]
 80081b6:	fa1f fb82 	uxth.w	fp, r2
 80081ba:	b289      	uxth	r1, r1
 80081bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80081c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081c4:	f8d9 2000 	ldr.w	r2, [r9]
 80081c8:	4461      	add	r1, ip
 80081ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80081d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081d6:	b289      	uxth	r1, r1
 80081d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081dc:	4577      	cmp	r7, lr
 80081de:	f849 1b04 	str.w	r1, [r9], #4
 80081e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081e6:	d8e2      	bhi.n	80081ae <__multiply+0xb2>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	f845 c002 	str.w	ip, [r5, r2]
 80081ee:	9a03      	ldr	r2, [sp, #12]
 80081f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081f4:	3304      	adds	r3, #4
 80081f6:	f1b9 0f00 	cmp.w	r9, #0
 80081fa:	d021      	beq.n	8008240 <__multiply+0x144>
 80081fc:	6829      	ldr	r1, [r5, #0]
 80081fe:	f104 0c14 	add.w	ip, r4, #20
 8008202:	46ae      	mov	lr, r5
 8008204:	f04f 0a00 	mov.w	sl, #0
 8008208:	f8bc b000 	ldrh.w	fp, [ip]
 800820c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008210:	fb09 220b 	mla	r2, r9, fp, r2
 8008214:	4452      	add	r2, sl
 8008216:	b289      	uxth	r1, r1
 8008218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800821c:	f84e 1b04 	str.w	r1, [lr], #4
 8008220:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008228:	f8be 1000 	ldrh.w	r1, [lr]
 800822c:	fb09 110a 	mla	r1, r9, sl, r1
 8008230:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008234:	4567      	cmp	r7, ip
 8008236:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800823a:	d8e5      	bhi.n	8008208 <__multiply+0x10c>
 800823c:	9a01      	ldr	r2, [sp, #4]
 800823e:	50a9      	str	r1, [r5, r2]
 8008240:	3504      	adds	r5, #4
 8008242:	e799      	b.n	8008178 <__multiply+0x7c>
 8008244:	3e01      	subs	r6, #1
 8008246:	e79b      	b.n	8008180 <__multiply+0x84>
 8008248:	0800926c 	.word	0x0800926c
 800824c:	0800927d 	.word	0x0800927d

08008250 <__pow5mult>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4615      	mov	r5, r2
 8008256:	f012 0203 	ands.w	r2, r2, #3
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	d007      	beq.n	8008270 <__pow5mult+0x20>
 8008260:	4c25      	ldr	r4, [pc, #148]	; (80082f8 <__pow5mult+0xa8>)
 8008262:	3a01      	subs	r2, #1
 8008264:	2300      	movs	r3, #0
 8008266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800826a:	f7ff fe9d 	bl	8007fa8 <__multadd>
 800826e:	4607      	mov	r7, r0
 8008270:	10ad      	asrs	r5, r5, #2
 8008272:	d03d      	beq.n	80082f0 <__pow5mult+0xa0>
 8008274:	69f4      	ldr	r4, [r6, #28]
 8008276:	b97c      	cbnz	r4, 8008298 <__pow5mult+0x48>
 8008278:	2010      	movs	r0, #16
 800827a:	f7fe f843 	bl	8006304 <malloc>
 800827e:	4602      	mov	r2, r0
 8008280:	61f0      	str	r0, [r6, #28]
 8008282:	b928      	cbnz	r0, 8008290 <__pow5mult+0x40>
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <__pow5mult+0xac>)
 8008286:	481e      	ldr	r0, [pc, #120]	; (8008300 <__pow5mult+0xb0>)
 8008288:	f240 11b3 	movw	r1, #435	; 0x1b3
 800828c:	f000 fbc6 	bl	8008a1c <__assert_func>
 8008290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008294:	6004      	str	r4, [r0, #0]
 8008296:	60c4      	str	r4, [r0, #12]
 8008298:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800829c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082a0:	b94c      	cbnz	r4, 80082b6 <__pow5mult+0x66>
 80082a2:	f240 2171 	movw	r1, #625	; 0x271
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff12 	bl	80080d0 <__i2b>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80082b2:	4604      	mov	r4, r0
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	f04f 0900 	mov.w	r9, #0
 80082ba:	07eb      	lsls	r3, r5, #31
 80082bc:	d50a      	bpl.n	80082d4 <__pow5mult+0x84>
 80082be:	4639      	mov	r1, r7
 80082c0:	4622      	mov	r2, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ff1a 	bl	80080fc <__multiply>
 80082c8:	4639      	mov	r1, r7
 80082ca:	4680      	mov	r8, r0
 80082cc:	4630      	mov	r0, r6
 80082ce:	f7ff fe49 	bl	8007f64 <_Bfree>
 80082d2:	4647      	mov	r7, r8
 80082d4:	106d      	asrs	r5, r5, #1
 80082d6:	d00b      	beq.n	80082f0 <__pow5mult+0xa0>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	b938      	cbnz	r0, 80082ec <__pow5mult+0x9c>
 80082dc:	4622      	mov	r2, r4
 80082de:	4621      	mov	r1, r4
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff ff0b 	bl	80080fc <__multiply>
 80082e6:	6020      	str	r0, [r4, #0]
 80082e8:	f8c0 9000 	str.w	r9, [r0]
 80082ec:	4604      	mov	r4, r0
 80082ee:	e7e4      	b.n	80082ba <__pow5mult+0x6a>
 80082f0:	4638      	mov	r0, r7
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	bf00      	nop
 80082f8:	080093c8 	.word	0x080093c8
 80082fc:	080091fd 	.word	0x080091fd
 8008300:	0800927d 	.word	0x0800927d

08008304 <__lshift>:
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	460c      	mov	r4, r1
 800830a:	6849      	ldr	r1, [r1, #4]
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	4607      	mov	r7, r0
 8008316:	4691      	mov	r9, r2
 8008318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800831c:	f108 0601 	add.w	r6, r8, #1
 8008320:	42b3      	cmp	r3, r6
 8008322:	db0b      	blt.n	800833c <__lshift+0x38>
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fddd 	bl	8007ee4 <_Balloc>
 800832a:	4605      	mov	r5, r0
 800832c:	b948      	cbnz	r0, 8008342 <__lshift+0x3e>
 800832e:	4602      	mov	r2, r0
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <__lshift+0xd0>)
 8008332:	4829      	ldr	r0, [pc, #164]	; (80083d8 <__lshift+0xd4>)
 8008334:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008338:	f000 fb70 	bl	8008a1c <__assert_func>
 800833c:	3101      	adds	r1, #1
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	e7ee      	b.n	8008320 <__lshift+0x1c>
 8008342:	2300      	movs	r3, #0
 8008344:	f100 0114 	add.w	r1, r0, #20
 8008348:	f100 0210 	add.w	r2, r0, #16
 800834c:	4618      	mov	r0, r3
 800834e:	4553      	cmp	r3, sl
 8008350:	db33      	blt.n	80083ba <__lshift+0xb6>
 8008352:	6920      	ldr	r0, [r4, #16]
 8008354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008358:	f104 0314 	add.w	r3, r4, #20
 800835c:	f019 091f 	ands.w	r9, r9, #31
 8008360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008368:	d02b      	beq.n	80083c2 <__lshift+0xbe>
 800836a:	f1c9 0e20 	rsb	lr, r9, #32
 800836e:	468a      	mov	sl, r1
 8008370:	2200      	movs	r2, #0
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	fa00 f009 	lsl.w	r0, r0, r9
 8008378:	4310      	orrs	r0, r2
 800837a:	f84a 0b04 	str.w	r0, [sl], #4
 800837e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008382:	459c      	cmp	ip, r3
 8008384:	fa22 f20e 	lsr.w	r2, r2, lr
 8008388:	d8f3      	bhi.n	8008372 <__lshift+0x6e>
 800838a:	ebac 0304 	sub.w	r3, ip, r4
 800838e:	3b15      	subs	r3, #21
 8008390:	f023 0303 	bic.w	r3, r3, #3
 8008394:	3304      	adds	r3, #4
 8008396:	f104 0015 	add.w	r0, r4, #21
 800839a:	4584      	cmp	ip, r0
 800839c:	bf38      	it	cc
 800839e:	2304      	movcc	r3, #4
 80083a0:	50ca      	str	r2, [r1, r3]
 80083a2:	b10a      	cbz	r2, 80083a8 <__lshift+0xa4>
 80083a4:	f108 0602 	add.w	r6, r8, #2
 80083a8:	3e01      	subs	r6, #1
 80083aa:	4638      	mov	r0, r7
 80083ac:	612e      	str	r6, [r5, #16]
 80083ae:	4621      	mov	r1, r4
 80083b0:	f7ff fdd8 	bl	8007f64 <_Bfree>
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80083be:	3301      	adds	r3, #1
 80083c0:	e7c5      	b.n	800834e <__lshift+0x4a>
 80083c2:	3904      	subs	r1, #4
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80083cc:	459c      	cmp	ip, r3
 80083ce:	d8f9      	bhi.n	80083c4 <__lshift+0xc0>
 80083d0:	e7ea      	b.n	80083a8 <__lshift+0xa4>
 80083d2:	bf00      	nop
 80083d4:	0800926c 	.word	0x0800926c
 80083d8:	0800927d 	.word	0x0800927d

080083dc <__mcmp>:
 80083dc:	b530      	push	{r4, r5, lr}
 80083de:	6902      	ldr	r2, [r0, #16]
 80083e0:	690c      	ldr	r4, [r1, #16]
 80083e2:	1b12      	subs	r2, r2, r4
 80083e4:	d10e      	bne.n	8008404 <__mcmp+0x28>
 80083e6:	f100 0314 	add.w	r3, r0, #20
 80083ea:	3114      	adds	r1, #20
 80083ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083fc:	42a5      	cmp	r5, r4
 80083fe:	d003      	beq.n	8008408 <__mcmp+0x2c>
 8008400:	d305      	bcc.n	800840e <__mcmp+0x32>
 8008402:	2201      	movs	r2, #1
 8008404:	4610      	mov	r0, r2
 8008406:	bd30      	pop	{r4, r5, pc}
 8008408:	4283      	cmp	r3, r0
 800840a:	d3f3      	bcc.n	80083f4 <__mcmp+0x18>
 800840c:	e7fa      	b.n	8008404 <__mcmp+0x28>
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	e7f7      	b.n	8008404 <__mcmp+0x28>

08008414 <__mdiff>:
 8008414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	4606      	mov	r6, r0
 800841c:	4611      	mov	r1, r2
 800841e:	4620      	mov	r0, r4
 8008420:	4690      	mov	r8, r2
 8008422:	f7ff ffdb 	bl	80083dc <__mcmp>
 8008426:	1e05      	subs	r5, r0, #0
 8008428:	d110      	bne.n	800844c <__mdiff+0x38>
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff fd59 	bl	8007ee4 <_Balloc>
 8008432:	b930      	cbnz	r0, 8008442 <__mdiff+0x2e>
 8008434:	4b3a      	ldr	r3, [pc, #232]	; (8008520 <__mdiff+0x10c>)
 8008436:	4602      	mov	r2, r0
 8008438:	f240 2137 	movw	r1, #567	; 0x237
 800843c:	4839      	ldr	r0, [pc, #228]	; (8008524 <__mdiff+0x110>)
 800843e:	f000 faed 	bl	8008a1c <__assert_func>
 8008442:	2301      	movs	r3, #1
 8008444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844c:	bfa4      	itt	ge
 800844e:	4643      	movge	r3, r8
 8008450:	46a0      	movge	r8, r4
 8008452:	4630      	mov	r0, r6
 8008454:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008458:	bfa6      	itte	ge
 800845a:	461c      	movge	r4, r3
 800845c:	2500      	movge	r5, #0
 800845e:	2501      	movlt	r5, #1
 8008460:	f7ff fd40 	bl	8007ee4 <_Balloc>
 8008464:	b920      	cbnz	r0, 8008470 <__mdiff+0x5c>
 8008466:	4b2e      	ldr	r3, [pc, #184]	; (8008520 <__mdiff+0x10c>)
 8008468:	4602      	mov	r2, r0
 800846a:	f240 2145 	movw	r1, #581	; 0x245
 800846e:	e7e5      	b.n	800843c <__mdiff+0x28>
 8008470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008474:	6926      	ldr	r6, [r4, #16]
 8008476:	60c5      	str	r5, [r0, #12]
 8008478:	f104 0914 	add.w	r9, r4, #20
 800847c:	f108 0514 	add.w	r5, r8, #20
 8008480:	f100 0e14 	add.w	lr, r0, #20
 8008484:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800848c:	f108 0210 	add.w	r2, r8, #16
 8008490:	46f2      	mov	sl, lr
 8008492:	2100      	movs	r1, #0
 8008494:	f859 3b04 	ldr.w	r3, [r9], #4
 8008498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800849c:	fa11 f88b 	uxtah	r8, r1, fp
 80084a0:	b299      	uxth	r1, r3
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	eba8 0801 	sub.w	r8, r8, r1
 80084a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084b0:	fa1f f888 	uxth.w	r8, r8
 80084b4:	1419      	asrs	r1, r3, #16
 80084b6:	454e      	cmp	r6, r9
 80084b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084bc:	f84a 3b04 	str.w	r3, [sl], #4
 80084c0:	d8e8      	bhi.n	8008494 <__mdiff+0x80>
 80084c2:	1b33      	subs	r3, r6, r4
 80084c4:	3b15      	subs	r3, #21
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	3304      	adds	r3, #4
 80084cc:	3415      	adds	r4, #21
 80084ce:	42a6      	cmp	r6, r4
 80084d0:	bf38      	it	cc
 80084d2:	2304      	movcc	r3, #4
 80084d4:	441d      	add	r5, r3
 80084d6:	4473      	add	r3, lr
 80084d8:	469e      	mov	lr, r3
 80084da:	462e      	mov	r6, r5
 80084dc:	4566      	cmp	r6, ip
 80084de:	d30e      	bcc.n	80084fe <__mdiff+0xea>
 80084e0:	f10c 0203 	add.w	r2, ip, #3
 80084e4:	1b52      	subs	r2, r2, r5
 80084e6:	f022 0203 	bic.w	r2, r2, #3
 80084ea:	3d03      	subs	r5, #3
 80084ec:	45ac      	cmp	ip, r5
 80084ee:	bf38      	it	cc
 80084f0:	2200      	movcc	r2, #0
 80084f2:	4413      	add	r3, r2
 80084f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80084f8:	b17a      	cbz	r2, 800851a <__mdiff+0x106>
 80084fa:	6107      	str	r7, [r0, #16]
 80084fc:	e7a4      	b.n	8008448 <__mdiff+0x34>
 80084fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8008502:	fa11 f288 	uxtah	r2, r1, r8
 8008506:	1414      	asrs	r4, r2, #16
 8008508:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800850c:	b292      	uxth	r2, r2
 800850e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008512:	f84e 2b04 	str.w	r2, [lr], #4
 8008516:	1421      	asrs	r1, r4, #16
 8008518:	e7e0      	b.n	80084dc <__mdiff+0xc8>
 800851a:	3f01      	subs	r7, #1
 800851c:	e7ea      	b.n	80084f4 <__mdiff+0xe0>
 800851e:	bf00      	nop
 8008520:	0800926c 	.word	0x0800926c
 8008524:	0800927d 	.word	0x0800927d

08008528 <__d2b>:
 8008528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800852c:	460f      	mov	r7, r1
 800852e:	2101      	movs	r1, #1
 8008530:	ec59 8b10 	vmov	r8, r9, d0
 8008534:	4616      	mov	r6, r2
 8008536:	f7ff fcd5 	bl	8007ee4 <_Balloc>
 800853a:	4604      	mov	r4, r0
 800853c:	b930      	cbnz	r0, 800854c <__d2b+0x24>
 800853e:	4602      	mov	r2, r0
 8008540:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <__d2b+0xac>)
 8008542:	4825      	ldr	r0, [pc, #148]	; (80085d8 <__d2b+0xb0>)
 8008544:	f240 310f 	movw	r1, #783	; 0x30f
 8008548:	f000 fa68 	bl	8008a1c <__assert_func>
 800854c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008554:	bb2d      	cbnz	r5, 80085a2 <__d2b+0x7a>
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	f1b8 0300 	subs.w	r3, r8, #0
 800855c:	d026      	beq.n	80085ac <__d2b+0x84>
 800855e:	4668      	mov	r0, sp
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	f7ff fd87 	bl	8008074 <__lo0bits>
 8008566:	e9dd 1200 	ldrd	r1, r2, [sp]
 800856a:	b1e8      	cbz	r0, 80085a8 <__d2b+0x80>
 800856c:	f1c0 0320 	rsb	r3, r0, #32
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	430b      	orrs	r3, r1
 8008576:	40c2      	lsrs	r2, r0
 8008578:	6163      	str	r3, [r4, #20]
 800857a:	9201      	str	r2, [sp, #4]
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	61a3      	str	r3, [r4, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	bf14      	ite	ne
 8008584:	2202      	movne	r2, #2
 8008586:	2201      	moveq	r2, #1
 8008588:	6122      	str	r2, [r4, #16]
 800858a:	b1bd      	cbz	r5, 80085bc <__d2b+0x94>
 800858c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008590:	4405      	add	r5, r0
 8008592:	603d      	str	r5, [r7, #0]
 8008594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008598:	6030      	str	r0, [r6, #0]
 800859a:	4620      	mov	r0, r4
 800859c:	b003      	add	sp, #12
 800859e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a6:	e7d6      	b.n	8008556 <__d2b+0x2e>
 80085a8:	6161      	str	r1, [r4, #20]
 80085aa:	e7e7      	b.n	800857c <__d2b+0x54>
 80085ac:	a801      	add	r0, sp, #4
 80085ae:	f7ff fd61 	bl	8008074 <__lo0bits>
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	6163      	str	r3, [r4, #20]
 80085b6:	3020      	adds	r0, #32
 80085b8:	2201      	movs	r2, #1
 80085ba:	e7e5      	b.n	8008588 <__d2b+0x60>
 80085bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085c4:	6038      	str	r0, [r7, #0]
 80085c6:	6918      	ldr	r0, [r3, #16]
 80085c8:	f7ff fd34 	bl	8008034 <__hi0bits>
 80085cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085d0:	e7e2      	b.n	8008598 <__d2b+0x70>
 80085d2:	bf00      	nop
 80085d4:	0800926c 	.word	0x0800926c
 80085d8:	0800927d 	.word	0x0800927d

080085dc <__ssputs_r>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	688e      	ldr	r6, [r1, #8]
 80085e2:	461f      	mov	r7, r3
 80085e4:	42be      	cmp	r6, r7
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	4682      	mov	sl, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4690      	mov	r8, r2
 80085ee:	d82c      	bhi.n	800864a <__ssputs_r+0x6e>
 80085f0:	898a      	ldrh	r2, [r1, #12]
 80085f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085f6:	d026      	beq.n	8008646 <__ssputs_r+0x6a>
 80085f8:	6965      	ldr	r5, [r4, #20]
 80085fa:	6909      	ldr	r1, [r1, #16]
 80085fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008600:	eba3 0901 	sub.w	r9, r3, r1
 8008604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008608:	1c7b      	adds	r3, r7, #1
 800860a:	444b      	add	r3, r9
 800860c:	106d      	asrs	r5, r5, #1
 800860e:	429d      	cmp	r5, r3
 8008610:	bf38      	it	cc
 8008612:	461d      	movcc	r5, r3
 8008614:	0553      	lsls	r3, r2, #21
 8008616:	d527      	bpl.n	8008668 <__ssputs_r+0x8c>
 8008618:	4629      	mov	r1, r5
 800861a:	f7fd fea3 	bl	8006364 <_malloc_r>
 800861e:	4606      	mov	r6, r0
 8008620:	b360      	cbz	r0, 800867c <__ssputs_r+0xa0>
 8008622:	6921      	ldr	r1, [r4, #16]
 8008624:	464a      	mov	r2, r9
 8008626:	f7fe fd88 	bl	800713a <memcpy>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	6126      	str	r6, [r4, #16]
 8008638:	6165      	str	r5, [r4, #20]
 800863a:	444e      	add	r6, r9
 800863c:	eba5 0509 	sub.w	r5, r5, r9
 8008640:	6026      	str	r6, [r4, #0]
 8008642:	60a5      	str	r5, [r4, #8]
 8008644:	463e      	mov	r6, r7
 8008646:	42be      	cmp	r6, r7
 8008648:	d900      	bls.n	800864c <__ssputs_r+0x70>
 800864a:	463e      	mov	r6, r7
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	4632      	mov	r2, r6
 8008650:	4641      	mov	r1, r8
 8008652:	f000 f9c9 	bl	80089e8 <memmove>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	4433      	add	r3, r6
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	2000      	movs	r0, #0
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	462a      	mov	r2, r5
 800866a:	f000 fa1d 	bl	8008aa8 <_realloc_r>
 800866e:	4606      	mov	r6, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	d1e0      	bne.n	8008636 <__ssputs_r+0x5a>
 8008674:	6921      	ldr	r1, [r4, #16]
 8008676:	4650      	mov	r0, sl
 8008678:	f7ff fbe8 	bl	8007e4c <_free_r>
 800867c:	230c      	movs	r3, #12
 800867e:	f8ca 3000 	str.w	r3, [sl]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	e7e9      	b.n	8008664 <__ssputs_r+0x88>

08008690 <_svfiprintf_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	4698      	mov	r8, r3
 8008696:	898b      	ldrh	r3, [r1, #12]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	b09d      	sub	sp, #116	; 0x74
 800869c:	4607      	mov	r7, r0
 800869e:	460d      	mov	r5, r1
 80086a0:	4614      	mov	r4, r2
 80086a2:	d50e      	bpl.n	80086c2 <_svfiprintf_r+0x32>
 80086a4:	690b      	ldr	r3, [r1, #16]
 80086a6:	b963      	cbnz	r3, 80086c2 <_svfiprintf_r+0x32>
 80086a8:	2140      	movs	r1, #64	; 0x40
 80086aa:	f7fd fe5b 	bl	8006364 <_malloc_r>
 80086ae:	6028      	str	r0, [r5, #0]
 80086b0:	6128      	str	r0, [r5, #16]
 80086b2:	b920      	cbnz	r0, 80086be <_svfiprintf_r+0x2e>
 80086b4:	230c      	movs	r3, #12
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	e0d0      	b.n	8008860 <_svfiprintf_r+0x1d0>
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	616b      	str	r3, [r5, #20]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
 80086c6:	2320      	movs	r3, #32
 80086c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d0:	2330      	movs	r3, #48	; 0x30
 80086d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008878 <_svfiprintf_r+0x1e8>
 80086d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086da:	f04f 0901 	mov.w	r9, #1
 80086de:	4623      	mov	r3, r4
 80086e0:	469a      	mov	sl, r3
 80086e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e6:	b10a      	cbz	r2, 80086ec <_svfiprintf_r+0x5c>
 80086e8:	2a25      	cmp	r2, #37	; 0x25
 80086ea:	d1f9      	bne.n	80086e0 <_svfiprintf_r+0x50>
 80086ec:	ebba 0b04 	subs.w	fp, sl, r4
 80086f0:	d00b      	beq.n	800870a <_svfiprintf_r+0x7a>
 80086f2:	465b      	mov	r3, fp
 80086f4:	4622      	mov	r2, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	4638      	mov	r0, r7
 80086fa:	f7ff ff6f 	bl	80085dc <__ssputs_r>
 80086fe:	3001      	adds	r0, #1
 8008700:	f000 80a9 	beq.w	8008856 <_svfiprintf_r+0x1c6>
 8008704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008706:	445a      	add	r2, fp
 8008708:	9209      	str	r2, [sp, #36]	; 0x24
 800870a:	f89a 3000 	ldrb.w	r3, [sl]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80a1 	beq.w	8008856 <_svfiprintf_r+0x1c6>
 8008714:	2300      	movs	r3, #0
 8008716:	f04f 32ff 	mov.w	r2, #4294967295
 800871a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871e:	f10a 0a01 	add.w	sl, sl, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	9307      	str	r3, [sp, #28]
 8008726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800872a:	931a      	str	r3, [sp, #104]	; 0x68
 800872c:	4654      	mov	r4, sl
 800872e:	2205      	movs	r2, #5
 8008730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008734:	4850      	ldr	r0, [pc, #320]	; (8008878 <_svfiprintf_r+0x1e8>)
 8008736:	f7f7 fd4b 	bl	80001d0 <memchr>
 800873a:	9a04      	ldr	r2, [sp, #16]
 800873c:	b9d8      	cbnz	r0, 8008776 <_svfiprintf_r+0xe6>
 800873e:	06d0      	lsls	r0, r2, #27
 8008740:	bf44      	itt	mi
 8008742:	2320      	movmi	r3, #32
 8008744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008748:	0711      	lsls	r1, r2, #28
 800874a:	bf44      	itt	mi
 800874c:	232b      	movmi	r3, #43	; 0x2b
 800874e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b2a      	cmp	r3, #42	; 0x2a
 8008758:	d015      	beq.n	8008786 <_svfiprintf_r+0xf6>
 800875a:	9a07      	ldr	r2, [sp, #28]
 800875c:	4654      	mov	r4, sl
 800875e:	2000      	movs	r0, #0
 8008760:	f04f 0c0a 	mov.w	ip, #10
 8008764:	4621      	mov	r1, r4
 8008766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800876a:	3b30      	subs	r3, #48	; 0x30
 800876c:	2b09      	cmp	r3, #9
 800876e:	d94d      	bls.n	800880c <_svfiprintf_r+0x17c>
 8008770:	b1b0      	cbz	r0, 80087a0 <_svfiprintf_r+0x110>
 8008772:	9207      	str	r2, [sp, #28]
 8008774:	e014      	b.n	80087a0 <_svfiprintf_r+0x110>
 8008776:	eba0 0308 	sub.w	r3, r0, r8
 800877a:	fa09 f303 	lsl.w	r3, r9, r3
 800877e:	4313      	orrs	r3, r2
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	46a2      	mov	sl, r4
 8008784:	e7d2      	b.n	800872c <_svfiprintf_r+0x9c>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	1d19      	adds	r1, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	9103      	str	r1, [sp, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfbb      	ittet	lt
 8008792:	425b      	neglt	r3, r3
 8008794:	f042 0202 	orrlt.w	r2, r2, #2
 8008798:	9307      	strge	r3, [sp, #28]
 800879a:	9307      	strlt	r3, [sp, #28]
 800879c:	bfb8      	it	lt
 800879e:	9204      	strlt	r2, [sp, #16]
 80087a0:	7823      	ldrb	r3, [r4, #0]
 80087a2:	2b2e      	cmp	r3, #46	; 0x2e
 80087a4:	d10c      	bne.n	80087c0 <_svfiprintf_r+0x130>
 80087a6:	7863      	ldrb	r3, [r4, #1]
 80087a8:	2b2a      	cmp	r3, #42	; 0x2a
 80087aa:	d134      	bne.n	8008816 <_svfiprintf_r+0x186>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	9203      	str	r2, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfb8      	it	lt
 80087b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80087bc:	3402      	adds	r4, #2
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008888 <_svfiprintf_r+0x1f8>
 80087c4:	7821      	ldrb	r1, [r4, #0]
 80087c6:	2203      	movs	r2, #3
 80087c8:	4650      	mov	r0, sl
 80087ca:	f7f7 fd01 	bl	80001d0 <memchr>
 80087ce:	b138      	cbz	r0, 80087e0 <_svfiprintf_r+0x150>
 80087d0:	9b04      	ldr	r3, [sp, #16]
 80087d2:	eba0 000a 	sub.w	r0, r0, sl
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	4082      	lsls	r2, r0
 80087da:	4313      	orrs	r3, r2
 80087dc:	3401      	adds	r4, #1
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e4:	4825      	ldr	r0, [pc, #148]	; (800887c <_svfiprintf_r+0x1ec>)
 80087e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ea:	2206      	movs	r2, #6
 80087ec:	f7f7 fcf0 	bl	80001d0 <memchr>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d038      	beq.n	8008866 <_svfiprintf_r+0x1d6>
 80087f4:	4b22      	ldr	r3, [pc, #136]	; (8008880 <_svfiprintf_r+0x1f0>)
 80087f6:	bb1b      	cbnz	r3, 8008840 <_svfiprintf_r+0x1b0>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	3307      	adds	r3, #7
 80087fc:	f023 0307 	bic.w	r3, r3, #7
 8008800:	3308      	adds	r3, #8
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	4433      	add	r3, r6
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	e768      	b.n	80086de <_svfiprintf_r+0x4e>
 800880c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008810:	460c      	mov	r4, r1
 8008812:	2001      	movs	r0, #1
 8008814:	e7a6      	b.n	8008764 <_svfiprintf_r+0xd4>
 8008816:	2300      	movs	r3, #0
 8008818:	3401      	adds	r4, #1
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	4619      	mov	r1, r3
 800881e:	f04f 0c0a 	mov.w	ip, #10
 8008822:	4620      	mov	r0, r4
 8008824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008828:	3a30      	subs	r2, #48	; 0x30
 800882a:	2a09      	cmp	r2, #9
 800882c:	d903      	bls.n	8008836 <_svfiprintf_r+0x1a6>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0c6      	beq.n	80087c0 <_svfiprintf_r+0x130>
 8008832:	9105      	str	r1, [sp, #20]
 8008834:	e7c4      	b.n	80087c0 <_svfiprintf_r+0x130>
 8008836:	fb0c 2101 	mla	r1, ip, r1, r2
 800883a:	4604      	mov	r4, r0
 800883c:	2301      	movs	r3, #1
 800883e:	e7f0      	b.n	8008822 <_svfiprintf_r+0x192>
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <_svfiprintf_r+0x1f4>)
 8008848:	a904      	add	r1, sp, #16
 800884a:	4638      	mov	r0, r7
 800884c:	f7fd feb6 	bl	80065bc <_printf_float>
 8008850:	1c42      	adds	r2, r0, #1
 8008852:	4606      	mov	r6, r0
 8008854:	d1d6      	bne.n	8008804 <_svfiprintf_r+0x174>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	065b      	lsls	r3, r3, #25
 800885a:	f53f af2d 	bmi.w	80086b8 <_svfiprintf_r+0x28>
 800885e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008860:	b01d      	add	sp, #116	; 0x74
 8008862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <_svfiprintf_r+0x1f4>)
 800886e:	a904      	add	r1, sp, #16
 8008870:	4638      	mov	r0, r7
 8008872:	f7fe f947 	bl	8006b04 <_printf_i>
 8008876:	e7eb      	b.n	8008850 <_svfiprintf_r+0x1c0>
 8008878:	080093d4 	.word	0x080093d4
 800887c:	080093de 	.word	0x080093de
 8008880:	080065bd 	.word	0x080065bd
 8008884:	080085dd 	.word	0x080085dd
 8008888:	080093da 	.word	0x080093da

0800888c <__sflush_r>:
 800888c:	898a      	ldrh	r2, [r1, #12]
 800888e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008892:	4605      	mov	r5, r0
 8008894:	0710      	lsls	r0, r2, #28
 8008896:	460c      	mov	r4, r1
 8008898:	d458      	bmi.n	800894c <__sflush_r+0xc0>
 800889a:	684b      	ldr	r3, [r1, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc05      	bgt.n	80088ac <__sflush_r+0x20>
 80088a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dc02      	bgt.n	80088ac <__sflush_r+0x20>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	d0f9      	beq.n	80088a6 <__sflush_r+0x1a>
 80088b2:	2300      	movs	r3, #0
 80088b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088b8:	682f      	ldr	r7, [r5, #0]
 80088ba:	6a21      	ldr	r1, [r4, #32]
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	d032      	beq.n	8008926 <__sflush_r+0x9a>
 80088c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	075a      	lsls	r2, r3, #29
 80088c6:	d505      	bpl.n	80088d4 <__sflush_r+0x48>
 80088c8:	6863      	ldr	r3, [r4, #4]
 80088ca:	1ac0      	subs	r0, r0, r3
 80088cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ce:	b10b      	cbz	r3, 80088d4 <__sflush_r+0x48>
 80088d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088d2:	1ac0      	subs	r0, r0, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	4602      	mov	r2, r0
 80088d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088da:	6a21      	ldr	r1, [r4, #32]
 80088dc:	4628      	mov	r0, r5
 80088de:	47b0      	blx	r6
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	d106      	bne.n	80088f4 <__sflush_r+0x68>
 80088e6:	6829      	ldr	r1, [r5, #0]
 80088e8:	291d      	cmp	r1, #29
 80088ea:	d82b      	bhi.n	8008944 <__sflush_r+0xb8>
 80088ec:	4a29      	ldr	r2, [pc, #164]	; (8008994 <__sflush_r+0x108>)
 80088ee:	410a      	asrs	r2, r1
 80088f0:	07d6      	lsls	r6, r2, #31
 80088f2:	d427      	bmi.n	8008944 <__sflush_r+0xb8>
 80088f4:	2200      	movs	r2, #0
 80088f6:	6062      	str	r2, [r4, #4]
 80088f8:	04d9      	lsls	r1, r3, #19
 80088fa:	6922      	ldr	r2, [r4, #16]
 80088fc:	6022      	str	r2, [r4, #0]
 80088fe:	d504      	bpl.n	800890a <__sflush_r+0x7e>
 8008900:	1c42      	adds	r2, r0, #1
 8008902:	d101      	bne.n	8008908 <__sflush_r+0x7c>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b903      	cbnz	r3, 800890a <__sflush_r+0x7e>
 8008908:	6560      	str	r0, [r4, #84]	; 0x54
 800890a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800890c:	602f      	str	r7, [r5, #0]
 800890e:	2900      	cmp	r1, #0
 8008910:	d0c9      	beq.n	80088a6 <__sflush_r+0x1a>
 8008912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008916:	4299      	cmp	r1, r3
 8008918:	d002      	beq.n	8008920 <__sflush_r+0x94>
 800891a:	4628      	mov	r0, r5
 800891c:	f7ff fa96 	bl	8007e4c <_free_r>
 8008920:	2000      	movs	r0, #0
 8008922:	6360      	str	r0, [r4, #52]	; 0x34
 8008924:	e7c0      	b.n	80088a8 <__sflush_r+0x1c>
 8008926:	2301      	movs	r3, #1
 8008928:	4628      	mov	r0, r5
 800892a:	47b0      	blx	r6
 800892c:	1c41      	adds	r1, r0, #1
 800892e:	d1c8      	bne.n	80088c2 <__sflush_r+0x36>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0c5      	beq.n	80088c2 <__sflush_r+0x36>
 8008936:	2b1d      	cmp	r3, #29
 8008938:	d001      	beq.n	800893e <__sflush_r+0xb2>
 800893a:	2b16      	cmp	r3, #22
 800893c:	d101      	bne.n	8008942 <__sflush_r+0xb6>
 800893e:	602f      	str	r7, [r5, #0]
 8008940:	e7b1      	b.n	80088a6 <__sflush_r+0x1a>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e7ad      	b.n	80088a8 <__sflush_r+0x1c>
 800894c:	690f      	ldr	r7, [r1, #16]
 800894e:	2f00      	cmp	r7, #0
 8008950:	d0a9      	beq.n	80088a6 <__sflush_r+0x1a>
 8008952:	0793      	lsls	r3, r2, #30
 8008954:	680e      	ldr	r6, [r1, #0]
 8008956:	bf08      	it	eq
 8008958:	694b      	ldreq	r3, [r1, #20]
 800895a:	600f      	str	r7, [r1, #0]
 800895c:	bf18      	it	ne
 800895e:	2300      	movne	r3, #0
 8008960:	eba6 0807 	sub.w	r8, r6, r7
 8008964:	608b      	str	r3, [r1, #8]
 8008966:	f1b8 0f00 	cmp.w	r8, #0
 800896a:	dd9c      	ble.n	80088a6 <__sflush_r+0x1a>
 800896c:	6a21      	ldr	r1, [r4, #32]
 800896e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008970:	4643      	mov	r3, r8
 8008972:	463a      	mov	r2, r7
 8008974:	4628      	mov	r0, r5
 8008976:	47b0      	blx	r6
 8008978:	2800      	cmp	r0, #0
 800897a:	dc06      	bgt.n	800898a <__sflush_r+0xfe>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008982:	81a3      	strh	r3, [r4, #12]
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	e78e      	b.n	80088a8 <__sflush_r+0x1c>
 800898a:	4407      	add	r7, r0
 800898c:	eba8 0800 	sub.w	r8, r8, r0
 8008990:	e7e9      	b.n	8008966 <__sflush_r+0xda>
 8008992:	bf00      	nop
 8008994:	dfbffffe 	.word	0xdfbffffe

08008998 <_fflush_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	690b      	ldr	r3, [r1, #16]
 800899c:	4605      	mov	r5, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	b913      	cbnz	r3, 80089a8 <_fflush_r+0x10>
 80089a2:	2500      	movs	r5, #0
 80089a4:	4628      	mov	r0, r5
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	b118      	cbz	r0, 80089b2 <_fflush_r+0x1a>
 80089aa:	6a03      	ldr	r3, [r0, #32]
 80089ac:	b90b      	cbnz	r3, 80089b2 <_fflush_r+0x1a>
 80089ae:	f7fe fa57 	bl	8006e60 <__sinit>
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f3      	beq.n	80089a2 <_fflush_r+0xa>
 80089ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089bc:	07d0      	lsls	r0, r2, #31
 80089be:	d404      	bmi.n	80089ca <_fflush_r+0x32>
 80089c0:	0599      	lsls	r1, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_fflush_r+0x32>
 80089c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c6:	f7fe fbb6 	bl	8007136 <__retarget_lock_acquire_recursive>
 80089ca:	4628      	mov	r0, r5
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7ff ff5d 	bl	800888c <__sflush_r>
 80089d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d4:	07da      	lsls	r2, r3, #31
 80089d6:	4605      	mov	r5, r0
 80089d8:	d4e4      	bmi.n	80089a4 <_fflush_r+0xc>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	059b      	lsls	r3, r3, #22
 80089de:	d4e1      	bmi.n	80089a4 <_fflush_r+0xc>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f7fe fba9 	bl	8007138 <__retarget_lock_release_recursive>
 80089e6:	e7dd      	b.n	80089a4 <_fflush_r+0xc>

080089e8 <memmove>:
 80089e8:	4288      	cmp	r0, r1
 80089ea:	b510      	push	{r4, lr}
 80089ec:	eb01 0402 	add.w	r4, r1, r2
 80089f0:	d902      	bls.n	80089f8 <memmove+0x10>
 80089f2:	4284      	cmp	r4, r0
 80089f4:	4623      	mov	r3, r4
 80089f6:	d807      	bhi.n	8008a08 <memmove+0x20>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	42a1      	cmp	r1, r4
 80089fc:	d008      	beq.n	8008a10 <memmove+0x28>
 80089fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a06:	e7f8      	b.n	80089fa <memmove+0x12>
 8008a08:	4402      	add	r2, r0
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	d100      	bne.n	8008a12 <memmove+0x2a>
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a1a:	e7f7      	b.n	8008a0c <memmove+0x24>

08008a1c <__assert_func>:
 8008a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1e:	4614      	mov	r4, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <__assert_func+0x2c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4605      	mov	r5, r0
 8008a28:	68d8      	ldr	r0, [r3, #12]
 8008a2a:	b14c      	cbz	r4, 8008a40 <__assert_func+0x24>
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <__assert_func+0x30>)
 8008a2e:	9100      	str	r1, [sp, #0]
 8008a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a34:	4906      	ldr	r1, [pc, #24]	; (8008a50 <__assert_func+0x34>)
 8008a36:	462b      	mov	r3, r5
 8008a38:	f000 f872 	bl	8008b20 <fiprintf>
 8008a3c:	f7fd fc5b 	bl	80062f6 <abort>
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <__assert_func+0x38>)
 8008a42:	461c      	mov	r4, r3
 8008a44:	e7f3      	b.n	8008a2e <__assert_func+0x12>
 8008a46:	bf00      	nop
 8008a48:	20000064 	.word	0x20000064
 8008a4c:	080093ef 	.word	0x080093ef
 8008a50:	080093fc 	.word	0x080093fc
 8008a54:	0800942a 	.word	0x0800942a

08008a58 <_calloc_r>:
 8008a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a5a:	fba1 2402 	umull	r2, r4, r1, r2
 8008a5e:	b94c      	cbnz	r4, 8008a74 <_calloc_r+0x1c>
 8008a60:	4611      	mov	r1, r2
 8008a62:	9201      	str	r2, [sp, #4]
 8008a64:	f7fd fc7e 	bl	8006364 <_malloc_r>
 8008a68:	9a01      	ldr	r2, [sp, #4]
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	b930      	cbnz	r0, 8008a7c <_calloc_r+0x24>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	b003      	add	sp, #12
 8008a72:	bd30      	pop	{r4, r5, pc}
 8008a74:	220c      	movs	r2, #12
 8008a76:	6002      	str	r2, [r0, #0]
 8008a78:	2500      	movs	r5, #0
 8008a7a:	e7f8      	b.n	8008a6e <_calloc_r+0x16>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7fe fa88 	bl	8006f92 <memset>
 8008a82:	e7f4      	b.n	8008a6e <_calloc_r+0x16>

08008a84 <__ascii_mbtowc>:
 8008a84:	b082      	sub	sp, #8
 8008a86:	b901      	cbnz	r1, 8008a8a <__ascii_mbtowc+0x6>
 8008a88:	a901      	add	r1, sp, #4
 8008a8a:	b142      	cbz	r2, 8008a9e <__ascii_mbtowc+0x1a>
 8008a8c:	b14b      	cbz	r3, 8008aa2 <__ascii_mbtowc+0x1e>
 8008a8e:	7813      	ldrb	r3, [r2, #0]
 8008a90:	600b      	str	r3, [r1, #0]
 8008a92:	7812      	ldrb	r2, [r2, #0]
 8008a94:	1e10      	subs	r0, r2, #0
 8008a96:	bf18      	it	ne
 8008a98:	2001      	movne	r0, #1
 8008a9a:	b002      	add	sp, #8
 8008a9c:	4770      	bx	lr
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	e7fb      	b.n	8008a9a <__ascii_mbtowc+0x16>
 8008aa2:	f06f 0001 	mvn.w	r0, #1
 8008aa6:	e7f8      	b.n	8008a9a <__ascii_mbtowc+0x16>

08008aa8 <_realloc_r>:
 8008aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4680      	mov	r8, r0
 8008aae:	4614      	mov	r4, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	b921      	cbnz	r1, 8008abe <_realloc_r+0x16>
 8008ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	4611      	mov	r1, r2
 8008aba:	f7fd bc53 	b.w	8006364 <_malloc_r>
 8008abe:	b92a      	cbnz	r2, 8008acc <_realloc_r+0x24>
 8008ac0:	f7ff f9c4 	bl	8007e4c <_free_r>
 8008ac4:	4625      	mov	r5, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	f000 f83a 	bl	8008b44 <_malloc_usable_size_r>
 8008ad0:	4284      	cmp	r4, r0
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	d802      	bhi.n	8008adc <_realloc_r+0x34>
 8008ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ada:	d812      	bhi.n	8008b02 <_realloc_r+0x5a>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7fd fc40 	bl	8006364 <_malloc_r>
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0ed      	beq.n	8008ac6 <_realloc_r+0x1e>
 8008aea:	42bc      	cmp	r4, r7
 8008aec:	4622      	mov	r2, r4
 8008aee:	4631      	mov	r1, r6
 8008af0:	bf28      	it	cs
 8008af2:	463a      	movcs	r2, r7
 8008af4:	f7fe fb21 	bl	800713a <memcpy>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7ff f9a6 	bl	8007e4c <_free_r>
 8008b00:	e7e1      	b.n	8008ac6 <_realloc_r+0x1e>
 8008b02:	4635      	mov	r5, r6
 8008b04:	e7df      	b.n	8008ac6 <_realloc_r+0x1e>

08008b06 <__ascii_wctomb>:
 8008b06:	b149      	cbz	r1, 8008b1c <__ascii_wctomb+0x16>
 8008b08:	2aff      	cmp	r2, #255	; 0xff
 8008b0a:	bf85      	ittet	hi
 8008b0c:	238a      	movhi	r3, #138	; 0x8a
 8008b0e:	6003      	strhi	r3, [r0, #0]
 8008b10:	700a      	strbls	r2, [r1, #0]
 8008b12:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b16:	bf98      	it	ls
 8008b18:	2001      	movls	r0, #1
 8008b1a:	4770      	bx	lr
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4770      	bx	lr

08008b20 <fiprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b503      	push	{r0, r1, lr}
 8008b24:	4601      	mov	r1, r0
 8008b26:	ab03      	add	r3, sp, #12
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <fiprintf+0x20>)
 8008b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2e:	6800      	ldr	r0, [r0, #0]
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	f000 f839 	bl	8008ba8 <_vfiprintf_r>
 8008b36:	b002      	add	sp, #8
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	4770      	bx	lr
 8008b40:	20000064 	.word	0x20000064

08008b44 <_malloc_usable_size_r>:
 8008b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b48:	1f18      	subs	r0, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bfbc      	itt	lt
 8008b4e:	580b      	ldrlt	r3, [r1, r0]
 8008b50:	18c0      	addlt	r0, r0, r3
 8008b52:	4770      	bx	lr

08008b54 <__sfputc_r>:
 8008b54:	6893      	ldr	r3, [r2, #8]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	b410      	push	{r4}
 8008b5c:	6093      	str	r3, [r2, #8]
 8008b5e:	da08      	bge.n	8008b72 <__sfputc_r+0x1e>
 8008b60:	6994      	ldr	r4, [r2, #24]
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	db01      	blt.n	8008b6a <__sfputc_r+0x16>
 8008b66:	290a      	cmp	r1, #10
 8008b68:	d103      	bne.n	8008b72 <__sfputc_r+0x1e>
 8008b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b6e:	f000 b935 	b.w	8008ddc <__swbuf_r>
 8008b72:	6813      	ldr	r3, [r2, #0]
 8008b74:	1c58      	adds	r0, r3, #1
 8008b76:	6010      	str	r0, [r2, #0]
 8008b78:	7019      	strb	r1, [r3, #0]
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <__sfputs_r>:
 8008b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	4614      	mov	r4, r2
 8008b8a:	18d5      	adds	r5, r2, r3
 8008b8c:	42ac      	cmp	r4, r5
 8008b8e:	d101      	bne.n	8008b94 <__sfputs_r+0x12>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e007      	b.n	8008ba4 <__sfputs_r+0x22>
 8008b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b98:	463a      	mov	r2, r7
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ffda 	bl	8008b54 <__sfputc_r>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d1f3      	bne.n	8008b8c <__sfputs_r+0xa>
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ba8 <_vfiprintf_r>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	460d      	mov	r5, r1
 8008bae:	b09d      	sub	sp, #116	; 0x74
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	4698      	mov	r8, r3
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	b118      	cbz	r0, 8008bc0 <_vfiprintf_r+0x18>
 8008bb8:	6a03      	ldr	r3, [r0, #32]
 8008bba:	b90b      	cbnz	r3, 8008bc0 <_vfiprintf_r+0x18>
 8008bbc:	f7fe f950 	bl	8006e60 <__sinit>
 8008bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc2:	07d9      	lsls	r1, r3, #31
 8008bc4:	d405      	bmi.n	8008bd2 <_vfiprintf_r+0x2a>
 8008bc6:	89ab      	ldrh	r3, [r5, #12]
 8008bc8:	059a      	lsls	r2, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_vfiprintf_r+0x2a>
 8008bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bce:	f7fe fab2 	bl	8007136 <__retarget_lock_acquire_recursive>
 8008bd2:	89ab      	ldrh	r3, [r5, #12]
 8008bd4:	071b      	lsls	r3, r3, #28
 8008bd6:	d501      	bpl.n	8008bdc <_vfiprintf_r+0x34>
 8008bd8:	692b      	ldr	r3, [r5, #16]
 8008bda:	b99b      	cbnz	r3, 8008c04 <_vfiprintf_r+0x5c>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f000 f93a 	bl	8008e58 <__swsetup_r>
 8008be4:	b170      	cbz	r0, 8008c04 <_vfiprintf_r+0x5c>
 8008be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be8:	07dc      	lsls	r4, r3, #31
 8008bea:	d504      	bpl.n	8008bf6 <_vfiprintf_r+0x4e>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	b01d      	add	sp, #116	; 0x74
 8008bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	0598      	lsls	r0, r3, #22
 8008bfa:	d4f7      	bmi.n	8008bec <_vfiprintf_r+0x44>
 8008bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bfe:	f7fe fa9b 	bl	8007138 <__retarget_lock_release_recursive>
 8008c02:	e7f3      	b.n	8008bec <_vfiprintf_r+0x44>
 8008c04:	2300      	movs	r3, #0
 8008c06:	9309      	str	r3, [sp, #36]	; 0x24
 8008c08:	2320      	movs	r3, #32
 8008c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c12:	2330      	movs	r3, #48	; 0x30
 8008c14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008dc8 <_vfiprintf_r+0x220>
 8008c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c1c:	f04f 0901 	mov.w	r9, #1
 8008c20:	4623      	mov	r3, r4
 8008c22:	469a      	mov	sl, r3
 8008c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c28:	b10a      	cbz	r2, 8008c2e <_vfiprintf_r+0x86>
 8008c2a:	2a25      	cmp	r2, #37	; 0x25
 8008c2c:	d1f9      	bne.n	8008c22 <_vfiprintf_r+0x7a>
 8008c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c32:	d00b      	beq.n	8008c4c <_vfiprintf_r+0xa4>
 8008c34:	465b      	mov	r3, fp
 8008c36:	4622      	mov	r2, r4
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ffa1 	bl	8008b82 <__sfputs_r>
 8008c40:	3001      	adds	r0, #1
 8008c42:	f000 80a9 	beq.w	8008d98 <_vfiprintf_r+0x1f0>
 8008c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c48:	445a      	add	r2, fp
 8008c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80a1 	beq.w	8008d98 <_vfiprintf_r+0x1f0>
 8008c56:	2300      	movs	r3, #0
 8008c58:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c60:	f10a 0a01 	add.w	sl, sl, #1
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	9307      	str	r3, [sp, #28]
 8008c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c6e:	4654      	mov	r4, sl
 8008c70:	2205      	movs	r2, #5
 8008c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c76:	4854      	ldr	r0, [pc, #336]	; (8008dc8 <_vfiprintf_r+0x220>)
 8008c78:	f7f7 faaa 	bl	80001d0 <memchr>
 8008c7c:	9a04      	ldr	r2, [sp, #16]
 8008c7e:	b9d8      	cbnz	r0, 8008cb8 <_vfiprintf_r+0x110>
 8008c80:	06d1      	lsls	r1, r2, #27
 8008c82:	bf44      	itt	mi
 8008c84:	2320      	movmi	r3, #32
 8008c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c8a:	0713      	lsls	r3, r2, #28
 8008c8c:	bf44      	itt	mi
 8008c8e:	232b      	movmi	r3, #43	; 0x2b
 8008c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c94:	f89a 3000 	ldrb.w	r3, [sl]
 8008c98:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9a:	d015      	beq.n	8008cc8 <_vfiprintf_r+0x120>
 8008c9c:	9a07      	ldr	r2, [sp, #28]
 8008c9e:	4654      	mov	r4, sl
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	f04f 0c0a 	mov.w	ip, #10
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cac:	3b30      	subs	r3, #48	; 0x30
 8008cae:	2b09      	cmp	r3, #9
 8008cb0:	d94d      	bls.n	8008d4e <_vfiprintf_r+0x1a6>
 8008cb2:	b1b0      	cbz	r0, 8008ce2 <_vfiprintf_r+0x13a>
 8008cb4:	9207      	str	r2, [sp, #28]
 8008cb6:	e014      	b.n	8008ce2 <_vfiprintf_r+0x13a>
 8008cb8:	eba0 0308 	sub.w	r3, r0, r8
 8008cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	46a2      	mov	sl, r4
 8008cc6:	e7d2      	b.n	8008c6e <_vfiprintf_r+0xc6>
 8008cc8:	9b03      	ldr	r3, [sp, #12]
 8008cca:	1d19      	adds	r1, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	9103      	str	r1, [sp, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfbb      	ittet	lt
 8008cd4:	425b      	neglt	r3, r3
 8008cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8008cda:	9307      	strge	r3, [sp, #28]
 8008cdc:	9307      	strlt	r3, [sp, #28]
 8008cde:	bfb8      	it	lt
 8008ce0:	9204      	strlt	r2, [sp, #16]
 8008ce2:	7823      	ldrb	r3, [r4, #0]
 8008ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce6:	d10c      	bne.n	8008d02 <_vfiprintf_r+0x15a>
 8008ce8:	7863      	ldrb	r3, [r4, #1]
 8008cea:	2b2a      	cmp	r3, #42	; 0x2a
 8008cec:	d134      	bne.n	8008d58 <_vfiprintf_r+0x1b0>
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	1d1a      	adds	r2, r3, #4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	9203      	str	r2, [sp, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfb8      	it	lt
 8008cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cfe:	3402      	adds	r4, #2
 8008d00:	9305      	str	r3, [sp, #20]
 8008d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008dd8 <_vfiprintf_r+0x230>
 8008d06:	7821      	ldrb	r1, [r4, #0]
 8008d08:	2203      	movs	r2, #3
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	f7f7 fa60 	bl	80001d0 <memchr>
 8008d10:	b138      	cbz	r0, 8008d22 <_vfiprintf_r+0x17a>
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	eba0 000a 	sub.w	r0, r0, sl
 8008d18:	2240      	movs	r2, #64	; 0x40
 8008d1a:	4082      	lsls	r2, r0
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	3401      	adds	r4, #1
 8008d20:	9304      	str	r3, [sp, #16]
 8008d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d26:	4829      	ldr	r0, [pc, #164]	; (8008dcc <_vfiprintf_r+0x224>)
 8008d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d2c:	2206      	movs	r2, #6
 8008d2e:	f7f7 fa4f 	bl	80001d0 <memchr>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d03f      	beq.n	8008db6 <_vfiprintf_r+0x20e>
 8008d36:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <_vfiprintf_r+0x228>)
 8008d38:	bb1b      	cbnz	r3, 8008d82 <_vfiprintf_r+0x1da>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	3307      	adds	r3, #7
 8008d3e:	f023 0307 	bic.w	r3, r3, #7
 8008d42:	3308      	adds	r3, #8
 8008d44:	9303      	str	r3, [sp, #12]
 8008d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d48:	443b      	add	r3, r7
 8008d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4c:	e768      	b.n	8008c20 <_vfiprintf_r+0x78>
 8008d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d52:	460c      	mov	r4, r1
 8008d54:	2001      	movs	r0, #1
 8008d56:	e7a6      	b.n	8008ca6 <_vfiprintf_r+0xfe>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	9305      	str	r3, [sp, #20]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	f04f 0c0a 	mov.w	ip, #10
 8008d64:	4620      	mov	r0, r4
 8008d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d6a:	3a30      	subs	r2, #48	; 0x30
 8008d6c:	2a09      	cmp	r2, #9
 8008d6e:	d903      	bls.n	8008d78 <_vfiprintf_r+0x1d0>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0c6      	beq.n	8008d02 <_vfiprintf_r+0x15a>
 8008d74:	9105      	str	r1, [sp, #20]
 8008d76:	e7c4      	b.n	8008d02 <_vfiprintf_r+0x15a>
 8008d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e7f0      	b.n	8008d64 <_vfiprintf_r+0x1bc>
 8008d82:	ab03      	add	r3, sp, #12
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	462a      	mov	r2, r5
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <_vfiprintf_r+0x22c>)
 8008d8a:	a904      	add	r1, sp, #16
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7fd fc15 	bl	80065bc <_printf_float>
 8008d92:	4607      	mov	r7, r0
 8008d94:	1c78      	adds	r0, r7, #1
 8008d96:	d1d6      	bne.n	8008d46 <_vfiprintf_r+0x19e>
 8008d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d9a:	07d9      	lsls	r1, r3, #31
 8008d9c:	d405      	bmi.n	8008daa <_vfiprintf_r+0x202>
 8008d9e:	89ab      	ldrh	r3, [r5, #12]
 8008da0:	059a      	lsls	r2, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_vfiprintf_r+0x202>
 8008da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008da6:	f7fe f9c7 	bl	8007138 <__retarget_lock_release_recursive>
 8008daa:	89ab      	ldrh	r3, [r5, #12]
 8008dac:	065b      	lsls	r3, r3, #25
 8008dae:	f53f af1d 	bmi.w	8008bec <_vfiprintf_r+0x44>
 8008db2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008db4:	e71c      	b.n	8008bf0 <_vfiprintf_r+0x48>
 8008db6:	ab03      	add	r3, sp, #12
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	462a      	mov	r2, r5
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <_vfiprintf_r+0x22c>)
 8008dbe:	a904      	add	r1, sp, #16
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7fd fe9f 	bl	8006b04 <_printf_i>
 8008dc6:	e7e4      	b.n	8008d92 <_vfiprintf_r+0x1ea>
 8008dc8:	080093d4 	.word	0x080093d4
 8008dcc:	080093de 	.word	0x080093de
 8008dd0:	080065bd 	.word	0x080065bd
 8008dd4:	08008b83 	.word	0x08008b83
 8008dd8:	080093da 	.word	0x080093da

08008ddc <__swbuf_r>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	460e      	mov	r6, r1
 8008de0:	4614      	mov	r4, r2
 8008de2:	4605      	mov	r5, r0
 8008de4:	b118      	cbz	r0, 8008dee <__swbuf_r+0x12>
 8008de6:	6a03      	ldr	r3, [r0, #32]
 8008de8:	b90b      	cbnz	r3, 8008dee <__swbuf_r+0x12>
 8008dea:	f7fe f839 	bl	8006e60 <__sinit>
 8008dee:	69a3      	ldr	r3, [r4, #24]
 8008df0:	60a3      	str	r3, [r4, #8]
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	071a      	lsls	r2, r3, #28
 8008df6:	d525      	bpl.n	8008e44 <__swbuf_r+0x68>
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	b31b      	cbz	r3, 8008e44 <__swbuf_r+0x68>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	6922      	ldr	r2, [r4, #16]
 8008e00:	1a98      	subs	r0, r3, r2
 8008e02:	6963      	ldr	r3, [r4, #20]
 8008e04:	b2f6      	uxtb	r6, r6
 8008e06:	4283      	cmp	r3, r0
 8008e08:	4637      	mov	r7, r6
 8008e0a:	dc04      	bgt.n	8008e16 <__swbuf_r+0x3a>
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7ff fdc2 	bl	8008998 <_fflush_r>
 8008e14:	b9e0      	cbnz	r0, 8008e50 <__swbuf_r+0x74>
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	60a3      	str	r3, [r4, #8]
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	6022      	str	r2, [r4, #0]
 8008e22:	701e      	strb	r6, [r3, #0]
 8008e24:	6962      	ldr	r2, [r4, #20]
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d004      	beq.n	8008e36 <__swbuf_r+0x5a>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	07db      	lsls	r3, r3, #31
 8008e30:	d506      	bpl.n	8008e40 <__swbuf_r+0x64>
 8008e32:	2e0a      	cmp	r6, #10
 8008e34:	d104      	bne.n	8008e40 <__swbuf_r+0x64>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f7ff fdad 	bl	8008998 <_fflush_r>
 8008e3e:	b938      	cbnz	r0, 8008e50 <__swbuf_r+0x74>
 8008e40:	4638      	mov	r0, r7
 8008e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e44:	4621      	mov	r1, r4
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 f806 	bl	8008e58 <__swsetup_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d0d5      	beq.n	8008dfc <__swbuf_r+0x20>
 8008e50:	f04f 37ff 	mov.w	r7, #4294967295
 8008e54:	e7f4      	b.n	8008e40 <__swbuf_r+0x64>
	...

08008e58 <__swsetup_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <__swsetup_r+0xac>)
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	460c      	mov	r4, r1
 8008e62:	b118      	cbz	r0, 8008e6c <__swsetup_r+0x14>
 8008e64:	6a03      	ldr	r3, [r0, #32]
 8008e66:	b90b      	cbnz	r3, 8008e6c <__swsetup_r+0x14>
 8008e68:	f7fd fffa 	bl	8006e60 <__sinit>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e72:	0718      	lsls	r0, r3, #28
 8008e74:	d422      	bmi.n	8008ebc <__swsetup_r+0x64>
 8008e76:	06d9      	lsls	r1, r3, #27
 8008e78:	d407      	bmi.n	8008e8a <__swsetup_r+0x32>
 8008e7a:	2309      	movs	r3, #9
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e034      	b.n	8008ef4 <__swsetup_r+0x9c>
 8008e8a:	0758      	lsls	r0, r3, #29
 8008e8c:	d512      	bpl.n	8008eb4 <__swsetup_r+0x5c>
 8008e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e90:	b141      	cbz	r1, 8008ea4 <__swsetup_r+0x4c>
 8008e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e96:	4299      	cmp	r1, r3
 8008e98:	d002      	beq.n	8008ea0 <__swsetup_r+0x48>
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7fe ffd6 	bl	8007e4c <_free_r>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	2300      	movs	r3, #0
 8008eae:	6063      	str	r3, [r4, #4]
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f043 0308 	orr.w	r3, r3, #8
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b94b      	cbnz	r3, 8008ed4 <__swsetup_r+0x7c>
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eca:	d003      	beq.n	8008ed4 <__swsetup_r+0x7c>
 8008ecc:	4621      	mov	r1, r4
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 f840 	bl	8008f54 <__smakebuf_r>
 8008ed4:	89a0      	ldrh	r0, [r4, #12]
 8008ed6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eda:	f010 0301 	ands.w	r3, r0, #1
 8008ede:	d00a      	beq.n	8008ef6 <__swsetup_r+0x9e>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	6963      	ldr	r3, [r4, #20]
 8008ee6:	425b      	negs	r3, r3
 8008ee8:	61a3      	str	r3, [r4, #24]
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	b943      	cbnz	r3, 8008f00 <__swsetup_r+0xa8>
 8008eee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ef2:	d1c4      	bne.n	8008e7e <__swsetup_r+0x26>
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	0781      	lsls	r1, r0, #30
 8008ef8:	bf58      	it	pl
 8008efa:	6963      	ldrpl	r3, [r4, #20]
 8008efc:	60a3      	str	r3, [r4, #8]
 8008efe:	e7f4      	b.n	8008eea <__swsetup_r+0x92>
 8008f00:	2000      	movs	r0, #0
 8008f02:	e7f7      	b.n	8008ef4 <__swsetup_r+0x9c>
 8008f04:	20000064 	.word	0x20000064

08008f08 <__swhatbuf_r>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f10:	2900      	cmp	r1, #0
 8008f12:	b096      	sub	sp, #88	; 0x58
 8008f14:	4615      	mov	r5, r2
 8008f16:	461e      	mov	r6, r3
 8008f18:	da0d      	bge.n	8008f36 <__swhatbuf_r+0x2e>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f20:	f04f 0100 	mov.w	r1, #0
 8008f24:	bf0c      	ite	eq
 8008f26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f2a:	2340      	movne	r3, #64	; 0x40
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	6031      	str	r1, [r6, #0]
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	b016      	add	sp, #88	; 0x58
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	466a      	mov	r2, sp
 8008f38:	f000 f848 	bl	8008fcc <_fstat_r>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	dbec      	blt.n	8008f1a <__swhatbuf_r+0x12>
 8008f40:	9901      	ldr	r1, [sp, #4]
 8008f42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f4a:	4259      	negs	r1, r3
 8008f4c:	4159      	adcs	r1, r3
 8008f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f52:	e7eb      	b.n	8008f2c <__swhatbuf_r+0x24>

08008f54 <__smakebuf_r>:
 8008f54:	898b      	ldrh	r3, [r1, #12]
 8008f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f58:	079d      	lsls	r5, r3, #30
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	d507      	bpl.n	8008f70 <__smakebuf_r+0x1c>
 8008f60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	6163      	str	r3, [r4, #20]
 8008f6c:	b002      	add	sp, #8
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	ab01      	add	r3, sp, #4
 8008f72:	466a      	mov	r2, sp
 8008f74:	f7ff ffc8 	bl	8008f08 <__swhatbuf_r>
 8008f78:	9900      	ldr	r1, [sp, #0]
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7fd f9f1 	bl	8006364 <_malloc_r>
 8008f82:	b948      	cbnz	r0, 8008f98 <__smakebuf_r+0x44>
 8008f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f88:	059a      	lsls	r2, r3, #22
 8008f8a:	d4ef      	bmi.n	8008f6c <__smakebuf_r+0x18>
 8008f8c:	f023 0303 	bic.w	r3, r3, #3
 8008f90:	f043 0302 	orr.w	r3, r3, #2
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	e7e3      	b.n	8008f60 <__smakebuf_r+0xc>
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	6020      	str	r0, [r4, #0]
 8008f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	9b00      	ldr	r3, [sp, #0]
 8008fa4:	6163      	str	r3, [r4, #20]
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	6120      	str	r0, [r4, #16]
 8008faa:	b15b      	cbz	r3, 8008fc4 <__smakebuf_r+0x70>
 8008fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f81d 	bl	8008ff0 <_isatty_r>
 8008fb6:	b128      	cbz	r0, 8008fc4 <__smakebuf_r+0x70>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f023 0303 	bic.w	r3, r3, #3
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	431d      	orrs	r5, r3
 8008fc8:	81a5      	strh	r5, [r4, #12]
 8008fca:	e7cf      	b.n	8008f6c <__smakebuf_r+0x18>

08008fcc <_fstat_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d07      	ldr	r5, [pc, #28]	; (8008fec <_fstat_r+0x20>)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	f7f9 fdc2 	bl	8002b62 <_fstat>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	d102      	bne.n	8008fe8 <_fstat_r+0x1c>
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	b103      	cbz	r3, 8008fe8 <_fstat_r+0x1c>
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	bd38      	pop	{r3, r4, r5, pc}
 8008fea:	bf00      	nop
 8008fec:	200005c4 	.word	0x200005c4

08008ff0 <_isatty_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d06      	ldr	r5, [pc, #24]	; (800900c <_isatty_r+0x1c>)
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	602b      	str	r3, [r5, #0]
 8008ffc:	f7f9 fdc1 	bl	8002b82 <_isatty>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_isatty_r+0x1a>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_isatty_r+0x1a>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	200005c4 	.word	0x200005c4

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
